ls
ls ~
ls /
ls "l"
p "asd"
put "asd"
puts "asd"
Object.abstract_class
ObjectSpace
ObjectSpace.object_id
ObjectSpace.id
Object.object_id
%w(asd)
%w(asd,asd)
%w(asd,asd454)
%w[asd,asd454]
%w|asd,asd454|
:string
:str
:st
:integre
:integer
5+6
x=read
x=input
x=get
require "ini"
require "IniFile"
require "ini"
require "iniparse"
IniParse.parse File.read("Ec")
ini=IniParse.parse File.read("Ec")
ini
ini['Compiler']
ini['Compiler']['arg']
ini['Compiler']['argv']
ini['Compiler']['bin']
ini['Compiler']['bis']
ini['Runner']['bin']
ini.methods
ini.all
ini.all（）
ini.all()
ini.all?()
ini.all?
ini.none?
IniParse.parse File.read("Ec")
require "iniparse"
IniParse.parse File.read("Ec")
ini=IniParse.parse File.read("Ec")
ini['CompilerEnvironment']
ini['CompilerEnvironment'].count
ini['CompilerEnvironment'].comment
ini['CompilerEnvironment'].indengt
ini['CompilerEnvironment'].indent
ini['CompilerEnvironment']
ini['CompilerEnvironment'].lines
require "iniparse"
IniParse.parse File.read("Ec")
ini=IniParse.parse File.read("Ec")
ini['CompilerEnvironment']
ini['Compiler']
ini['Compiler'][srgv]
ini['Compiler']['argv']
ini['Compiler']
IniParse.parse File.read("Ec")
ini=IniParse.parse File.read("Ec")
ini['Compiler']['argv']
ini['Compiler']['argv'].replace('${out}', "prog")
ini['Compiler']['argv'].replace('${out}')
ini['Compiler']['argv']
random
rand
(rand*10).to_i_
(rand*10).to_i
s="asda"
s
s.freeze!
s.freeze
s<<"asd"
s
s.frozen?
s["as"]
s.slice "as"
s.slice! "as"
s
s="asd"
s
s="Hello world"
s
s.slice! "Hel"
s
s="Hello world"
s[0]
s[-1]
s[1..5]
s[1...5]
s[5]
?s[5]
s[5].chr
s[6].chr
s[6].
s[6]
s[7]
s[7].to_i
s[8].to_i
?s[8]
s[8].to_sym
s[8]
s[1,5]
s[1..5]
s[/-He*/]
s[/.*He*/]
s[/.*He.*/]
s.index 5
s.index "5"
s.index "H"
s.index "l"
s.last_index "l"
"asd"=="a65sd5"
"1"==1
"1"===1
"1"===""
"1"==="1"
"1"==="11"
"1".equal? "11"
"1".equals? "11"
"1".eql? "11"
s
s["e"2
s["e"？2
s["e"]=?2
s
s["e"]=?e
s["2"]=?a
s
s.slice "l"
s["l"]=?I
s
"A\n"
"A\n".chop
"A\n\n".chop
"A\n\n".chomp
"A\n\n".chop
"A\r\n".chomp
"A\n\r".chomp
$KCODE
echi $KCODE
p $KCODE
p $env
64.chr
46.chr
"".ord
"1".ord
"A".ord
"a".ord
"asda ".rstrip
"asda    EEEEEE".rstrip "E"
"asda    EEEEEE".rstrip
"asda    ".rstrip
"0".next
"0.0".next
"0.0".next.netx
"0.0".next.next
"0.9".next.next
"0.8".next.next
"asd".name
"asd".intern"
"
"asd".intern
String.intern
hel
help
help intern
help String#intern
help String.intern
$String.intern
help String
$String
help
whereami
ri String.intern
ri String
"Halo".match"5"
"Halo".match"Hal"
"Hallo".match"l"
"Hallo".match".*l"
"Hallo".match"[la]"
"Hallo".match"[al]"
"Hallo".match"[al]+"
"Hallo".match"[la]+"
Integer 1.5
Bignum 1.5
Fixnum 1.5
Float 2.5
Float 2.5 6.5
+6+-9
24.div5
24.div 5
24.add 5
24.quo 5
24.quo 5.0
(24.quo 5)/1
(24.quo 5) mod 1
(24.quo 5) % 1
(24.quo 5).to_f
(24.quo 5).to_s
(24.quo 5).to_i
(24.quo 5).to_sym
1<=>
5
x
x+=5
x=5
x+=5
~101
~101+1
2^5
2^4
2^3
d.defined?
5.defined?
x.defined?
x
x=nil
x
x.defined?
1/0
0/0.0
0/0
0/0.0
0.0/0.0
0.0/0.0.infinite?
(0.0/0.0).infinite?
(1.0/0.0).infinite?
nil.nan
nil.nan？
nil.nan?
x
x.nan?
x=5
x.nan?
5.5.nan?
Math.constn
Math.constants
Math.PI
Math::PI
Math::DomainError
Math::DomainError.class
Math.erf "asd"
Math.erf 1.2
Math.erf 1
Math.erfc 1
Math.erf 1
Math.hypot 1 5
Math.hypot 1
Math.hypot 1, 5
Math.hypot 3, 4
require "mathn"
Prime
require "mathn"
Prime
Prime.pry
5
Prime.pry 12
54
;
p "asd"
p 5
Prime.new
Prime.new 5
Prime.new
ls
Prime.new 
d=Prime.new 
d=Prime
d
d=nil
Array.new
Array.new 5
Array.new 5000
Array.new 50
Array.new 5
Array.new 10
Array.new 10 do |e| e=5 end
Array.new 10 do |e| e=rand end
a=Array.new 10 do |e| e=rand end
p a
[] 10 do |e| e=rand end
Array[]
Array.[]
Array.["as"]
Array.[](1,2,"sd")
Array[](1,2,"sd")
Array[(1,2,"sd"]
Array[1,2,"sd"]
Array.methods
[10]<<[10]
[10]<<10
[10]+[10]
[10]*[10]
[10]*10
ls
[10]|[10]
[10]-[10]
[10]&[10]
[10]&[10,1]
[10]|[10,1]
a=Array.new 10 do |e| e=54 end
a.uniq
a.uniq!
a
[1,2,3,5,4].shift
[1,2,3,5,4].rshift
[1,2,3,5,4].unshift
[1,2,3,5,4].unshift 5
[[1,"sad"],[2,"asd"]].transpose
[[1,"sad"],[2,"asd","asd"]].transpose
[[1,"sad",1],[2,"asd","asd"]].transpose
Array.method
Array.methoda
Array.methods
Array.class_methods
Array.class_method
Array.class_variable
Array.class_variables
Array.class_variable_set 4 
Array.class_variable_set "s" 4
Array.class_variable_set "s" 
Array.class_variable_set "s" "asd"
Array.class_variable_set "s", "asd"
[nil, "asd", nil].delete nil
a=[nil, "asd", nil]
a
a.delete "nil"
a
a.delete nil
a
ls
$ARG
$ARGF
$ARGV
Dir
Dir.cd
Dir.chdir("/")
d=Dir.chdir("/")
d=Dir.chdir("/kahsolt")
d=Dir.chdir("~")
d=Dir.chdir("/home/kahsolt")
d
Dir.wpd
Dir.pwd
Dir.ls
Dir.list
Dir.home
Dir.home.entries
Dir.entries(Dir.home).eacj
Dir.entries(Dir.home).each{|e| print e}
Dir.entries(Dir.home).each{|e| print e[0]}
e=Dir.entries(Dir.home).each{|e| print e}
ARGV=[1,2,3,4]
ARGV<<[1,2,3,4]
ARGV.delete [1,2,3,4]
ARGV
$ARGV
$ARGV<<[1,2,3,5]
ARGF
ARGV
print while gets
ls
_dir_
_
__
_file_
_in_
_out_
_out_.inspect
d
e
e=nil
d=nil
ls
`ls`
cd Desktop
`cd Desktop`
ls
`cd `
`Desktop`
File.ctime('array.rb')
File::ctime('array.rb')
File.ctime('array.rb')
File.mtime('array.rb')
File.atime('array.rb')
systemc "ls"
system "ls"
ls
`ls`
$stderr
$stdou
$stdout
$stdin
$stdin = nil
ls
$stdin 
$stdout=nil
EOFError
EOFError=nil
EOFError
load
$load_path
$load_path_upper
$load_path.upper
$"load_path".upper
$LOAD_PATH
require "rexml/document"
REXML
REXML.id
REXML.object_id
RubyGems
RubyVM
RubyVM.methods
RubyVM.stats
RubyVM.stat
Gems
Gem
Gem.metheds
Gem.methods
Gem.dic
Gem.dir
Time.now
Date.now
Date.todey
Time.day
Time.date
String.included_modules
String.include?
String.include? Kernel
String.include? Kerne
local_variables
global_variables
$:
$-l
$-a
$?
$-w
$-W
global_variables
$PROGRAM_NAME
$SAFE
$KCODE
$FILENAME
$VERBOSE
$VERBOSE = true
$DEBUG
$DEBUG= true
p "asd"
$fileutils_rb_have_lchmod
require "tk"
begin
  12/0
rescue p "asd" end
eval 5+9
eval 5+9"
eval "5+9"
eval "5+9.5"
eval "5+9.5a"
StandError
StanddError
StandardError
StandardError.included_modules
StandardError.ancestors
ZeroDivisionError.ancestors
def f(n)
  throw :no
end
f
f 5
catch {:what} {f 5}
catch {:what} {f (5)}
catch {:what} { f(5) }
catch(:what){ f(5) }
catch(:no){ f(5) }
catch(:no){ p "asd" }
put "\a"
putc "\a"
putc "\b"
putc "\a\b"
putc "\aa\b"
putc "\a\b"
putc ""
putc "\a\a\a"
putc "\a\a"
putc "\ass\a"
putc "\a" &&
sleep 1 && putc "\a"
putc "\a"
sleep 1
putc "\a" and sleep 1 and putc "\a"
Thread
Thread.ne
Thread.new
proc
p=proc {putc "\a"}
p.call
Thread.new p.call
Thread.new {p}
t=Thread.new {p}
t.run
t.start
t.status
$/
NIL
$NIL
$ENV
ENV
t1=Thread.new do
  while true do
    putc "\a"
    sleep rand
  end
end
t1
t2=t1.dup
t2=t1.clone
t1
t2
t1.stop
t1.stop?
t1.f
t1.kill
t1
l
require midi
1 in [1,2]
[1,2][1]
[1,2][0]
[1,2][5]
[1,2][0]
[1,2][2]
ls=[1,2]
ls[0]
ls[1]
ls[2]
ls[3]
ls[1]
ls[0]
ls.index(1)
ls.index(2)
ls.index(5)
exit
exit 0
puts 1
puts -1
[1,2,3].map{|e| e=0}
ls=[1,2,3]
ls.map{|e| e=0}
ls
print ls
[1,2,3].map!{|e| e=0}
print ls
l=[1,2,5,6]
l.map!{|e| e=0}
l
l=[1,2,5,6]
l.map{|e| e=0}
l
l.sum
sum(l)
l
Math.sum
sum
[].length
s=gets
s
s.to_i
s
s.to_i
"".to_i
"*".to_i
"-asds".to_i
"#4".to_i
"5#4".to_i
"5#89".to_i
"5ADC".to_i
0.5+0.25+0.125+1/6
7/8
7/8.0
0xff
gem
help gem
help ('gem')
help 'gem'
ri gem
SecureRandom.urlsafe_base64
require SecureRandom
require 'SecureRandom'
SecureRandom.base64(64)
require securerandom
require secure_random
require 'secure_random'
require 'securerandom'
SecureRandom.base64(64)
require 'faker'
Faker::Username
Faker::Internet
Faker::InternetName
Faker::Internet
Faker::Long
Faker::Internet
Faker::
sd
Faker::App
Faker::App()
Faker::App.new
app=Faker::App
app.
s
app
app.methods
app.new
Faker::Name.new
Faker::Name
Faker::Name.name
Faker::Internet.name
Faker::Internet.email
nil and 4
false and 4
5 and 4
false and 4
:54
:asd
:asd::asd
require'faker'
Faker::Demographic.marital_status
Faker::Demographic.race
Faker::Demographic.demonym
Faker::Demographic.educational_attainment
rand(max=2)
rand(max=1)+1
rand(max=1)
rand(max=5)
rand(max=5, min=5)
rand(max=5, min=1)
rand(max=1)
rand(max=1.1)
rand(max=2)
(rand(max=2) + 1).times {puts "d"}
Path
Dir
Dir.chdir '.'
Dir.new '.'
d=Dir.new '.'
d
d.absolute
d.methods
d.path
d.list
d.ls
d.all?
d.first
d.zip
d.path
d.entries
Dir.path
path
Path
File
File::Separator
def zip_folder(folder)
  input_filenames = Dir.new(folder).entries
  zipfile_name = folder << ".zip"
  Zip::File.open(zipfile_name, Zip::File::CREATE) do |zipfile|
    input_filenames.each do |filename|
      zipfile.add(filename, folder + File::Separator + filename)
    end
    zipfile.get_output_stream("myFile") { |os| os.write "myFile contains just this" }
  end
end]
end
def zip_folder(folder)
  input_filenames = Dir.new(folder).entries
  zipfile_name = folder << ".zip"
  Zip::File.open(zipfile_name, Zip::File::CREATE) do |zipfile|
    input_filenames.each do |filename|
      zipfile.add(filename, folder + File::Separator + filename)
    end
    zipfile.get_output_stream("myFile") { |os| os.write "myFile contains just this" }
  end
end
zip_folder('123')
require 'rubyzip'
require 'archive/zip'
Archive::Zip.archive('example.zip', '123/.')
"asd/"[-1]
"asd/"[1..-1]
"asd/"[0..-1]
"asd/".strip("/")
"asd/".strip
"asd/".strip!
"asd/".strip
"asd/".trim
"asd/".strip
"asd/".end_with?"/"
"asd/".chomp "/"
"asd/".chop
"asd/".chomp
"asd/".chomp "sad"
"asd/".chomp "/"
help chomp
help String::chomp
"asd/".chomp File::Separator
"asd/d".chomp File::Separator
"asd/".chomp File::Separator
"asd///".chomp File::Separator
"asd".chomp File::Separator
def zip_folder(folder_path)
  path = folder_path.chomp File::Separator
  folder_path = path << '/.'
  zip_filename = path << '.zip'
  Archive::Zip.archive(zip_filename, folder_path)
  zip_filename
end
zip_folder("123")
require 'archive/zip'
def zip_folder(folder_path)
  path = folder_path.chomp File::Separator
  folder_path = path << '/.'
  zip_filename = path << '.zip'
  Archive::Zip.archive(zip_filename, folder_path)
  zip_filename
end
zip_folder("./123")
zip_folder("/home/kahsolt/123")
def zip_folder(folder_path)
  path = folder_path.chomp! File::Separator
  folder_path = path << '/.'
  zip_filename = path << '.zip'
  Archive::Zip.archive(zip_filename, folder_path)
  zip_filename
end
zip_folder("123")
zip_folder("./123")
folder_path= '123'
path = folder_path.chomp File::Separator
path
folder_path = path << '/.'
zip_filename = path << '.zip'
folder_path = path + '/.'
zip_filename = path + '.zip'
folder_path='123'
path = folder_path.chomp File::Separator
folder_path = path + '/.'
zip_filename = path + '.zip'
Archive::Zip.archive(zip_filename, folder_path)
zip_filename
def zip_folder(folder_path)
  folder_path = folder_path.chomp File::Separator
  zip_filename = folder_path + '.zip'
  Archive::Zip.archive(zip_filename, folder_path)
  zip_filename
end
zip_folder "123"
File.basename
File.new "asdas/asdasdas/asdasd"
File.new "/home/kahsolt/123"
dir = File.new "/home/kahsolt/123"
dir.basename
File::basename "asd/asd"
File::basename "asd/asasdasd"
File::dirname "asd/asasdasd"
File::path "asd"
File::path "asd/asdas"
File::path("asd/asdas")
File::path("asd/asdas").split
File::path("asd/asdas").split_into_parts"
File::path("asd/asdas").split_into_parts"/"
File::path("asd/asdas").split_into_parts
File::dirname "asd/asdas/"
File::basname "asd/asdas/"
File::basename "asd/asdas/"
File::basename "asd/asdas///"
File::basename "asd/asdasasd///"
def zip_folder(folder_path, zip_filename)
  zip_path = File::dirname folder_path + File::Separator + zip_filename or File::basename folder_path + '.zip'
  Archive::Zip.archive(zip_path, folder_path)
  zip_path
end
require "archive/zip"
def zip_folder(folder_path, zip_filename)
  zip_path = File::dirname folder_path + File::Separator + zip_filename or File::basename folder_path + '.zip'
  Archive::Zip.archive(zip_path, folder_path)
  zip_path
end
def zip_folder(folder_path, zip_filename)
  zip_path = File::dirname folder_path + File::Separator + (zip_filename or File::basename folder_path) + '.zip'
  Archive::Zip.archive(zip_path, folder_path)
  zip_path
end
zip_folder "123"
zip_folder "123", nil
def zip_folder(folder_path:, zip_filename:)
  zip_path = File::dirname folder_path + File::Separator + (zip_filename or File::basename folder_path) + '.zip'
  Archive::Zip.archive(zip_path, folder_path)
  zip_path
end
zip_folder "123"
zip_folder folder_path: "123"
def zip_folder(folder_path:, zip_filename:nil)
  zip_path = File::dirname folder_path + File::Separator + (zip_filename or File::basename folder_path) + '.zip'
  Archive::Zip.archive(zip_path, folder_path)
  zip_path
end
zip_folder folder_path: "123"
folder_path = "123"
zip_filename:nil
zip_filename=nil
zip_path = File::dirname folder_path + File::Separator + (zip_filename or File::basename folder_path) + '.zip'
zip_path = File::dirname(folder_path) + File::Separator + (zip_filename or File::basename(folder_path)) + '.zip'
def zip_folder(folder_path:, zip_filename:nil)
  zip_path = File::dirname(folder_path) + File::Separator + (zip_filename or File::basename(folder_path)) + '.zip'
  Archive::Zip.archive(zip_path, folder_path)
  zip_path
end
zip_folder folder_path: "123"
:'.5'
:'.5'.to_s
File::file? "123"
zip_folder folder_path: "123"
File::file? "123.zip"
File::file? "123.z"
File::file? ""
File::file? "132"
File::file? "123"
raise "craete zip file"
raise "failed to create zip file"
def zip_folder(folder_path:, zip_filename:nil)
  zip_path = File::dirname(folder_path) + File::Separator + (zip_filename or File::basename(folder_path)) + '.zip'
  Archive::Zip.archive(zip_path, folder_path)
  raise "Failed to create zip archive" unless File::file? zip_path
  zip_path
end
zip_fold "123"
zip_folder "123"
def zip_folder(folder_path, zip_filename:nil)
  zip_path = File::dirname(folder_path) + File::Separator + (zip_filename or File::basename(folder_path)) + '.zip'
  Archive::Zip.archive(zip_path, folder_path)
  raise "Failed to create zip archive" unless File::file? zip_path
  zip_path
end
zip_folder "123"
zip_folder "456"
require "archive/zip"
def zip_folder(folder_path, zip_filename:nil)
  zip_path = File::dirname(folder_path) + File::Separator + (zip_filename or File::basename(folder_path)) + '.zip'
  begin
    Archive::Zip.archive(zip_path, folder_path)
  rescue
    File::delete zip_path
  end
  raise "Failed to create zip archive" unless File::file? zip_path
  zip_path
end
zip_folder "654"
File::path.join "/asd", "asd"
File::path.join "/asd"
File::path.join "asd"
File.new("as").join "asd"
File.new("home").join "kahsolt"
File.new("/home").join "kahsolt"
require "achive/zip"
require "acrhive/zip"
require "archive/zip"
def zip_folder(folder_path, zip_filename:nil)
  zip_path = Pathname(folder_path).dirname.join(zip_filename || Pathname(folder_path).basename + '.zip').to_s
  begin
    Archive::Zip.archive(zip_path, folder_path)
    raise "Failed to create zip archive" unless File::file? zip_path
    zip_path
  rescue
    File::delete zip_path
  end
end
zip_folder "log"
zip_folder "log",:zip_filename => "logs.zip"
Pathname("log").join "asd.zip"
Pathname("log").dirname
Pathname("log").dirname.join "log.zip"
Pathname("log").dirname.join(Pathname("log").basename)
Pathname("log").dirname.join(Pathname("log").basename + ".zip")
Pathname("log").basename + ".zip"
Pathname("log").basename
Pathname("log").basename+".zip"
Pathname("log").basename << ".zip"
Pathname("log").basename 
Pathname("log").basename.to_s
Pathname("log/").basename
def zip_folder(folder_path, zip_filename:nil)
  zip_path = Pathname(folder_path).dirname.join(zip_filename || Pathname(folder_path).basename.to_s + '.zip').to_s
  begin
    Archive::Zip.archive(zip_path, folder_path)
    raise "Failed to create zip archive" unless File::file? zip_path
    zip_path
  rescue
    File::delete zip_path
  end
end
zip_folder "log"
zip_folder "logs"
zip_folder "log"
zip_folder "lo"
zip_folder "logs"
def zip_folder(folder_path, zip_filename:nil)
  zip_path = Pathname(folder_path).dirname.join(zip_filename || Pathname(folder_path).basename.to_s + '.zip').to_s
  begin
    Archive::Zip.archive(zip_path, folder_path)
  rescue
    File::delete zip_path
  end
  raise "Failed to create zip archive" unless File::file? zip_path
  zip_path
end
zip_folder "log"
zip_folder "logs"
zip_folder "log", :zip_filename=>"logs"
zip_folder "log", :zip_filename=>"logs.zip"
require 'archive/zip'
zip_folder "log", :zip_filename=>"logs.zip"
require 'archive/zip'
Pathname::escape
UUID
require uuid
SecureRandom.uuid
require 'securerandom'
SecureRandom.uuid
SecureRandom.uuid.length
SecureRandom.uuid
2...2
2..2
2..2.max
/\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\z/i ~= "asdasd@sdsad.c"
/\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\z/i =~ "asdasd@sdsad.c"
/\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\z/ =~ "asdasd@sdsad.c"
/\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\z/ =~ "asdasd@sdsad.com"
/\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\z/ =~ "asdasd@sdsad.tk"
/\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\z/ =~ "kahsolt@qq.com"
/\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\z/ =~ "kahsolt@buaa.edu.cn"
/\A([^@\s]+)@((?:[-a-z0-9]+\.)+[a-z]{2,})\z/ =~ "kahsolt@buaa.edu.c"
a="s"
a
a<<5
a
5 || 1+2
0 || 1+2
nil || 1+2
nil or 1+2
5 or 1+2
0 or 1+2
false or 1+2
5 or 1+2
1 or 1+2
redis.set("mykey", "hello world")
JSON
require json
JSON
{}.to_json
require json
{}.to_s
{:asd=>5}.to_s
{:asd=>5}.to_json
{:asd=>5}.parse
{:asd=>5}.to_s.parse
require 'json'
{:asd=>5}.to_json
[].join
[1,2,3].join
[1,2,3].join " "
load "mycurl"
load "mycurl.rb"
$autoload
$auth_token
purl
purl /profiles {}
purl' /profile', {}
load "mycurl.rb"
purl' /profile', {}
load "mycurl.rb"
purl' /profile', {}
p $email
load "mycurl.rb"
purl' /profile', {}
load "mycurl.rb"
purl' /profile', {}
load "mycurl.rb"
purl' /profile', {}
load "mycurl.rb"
purl' /profile', {}
paurl' /profile', {}
paurl'/profile', {}
paurl'/profiles', {}
paurl'/profile', {}
paurl'/profiles', {}
load "mycurl.rb"
paurl'/profiles', {}
load "mycurl.rb"
paurl'/profiles', {}
paurl'/profiles/', {}
paurl'/profiles/1', {}
load "mycurl.rb"
gaurl'/profiles'
load "mycurl.rb"
gaurl'/profiles'
paurl'/profiles' {"profile":{"name": "from client"}}
paurl'/profiles', {"profile":{"name": "from client"}}
load "mycurl.rb"
paurl'/profiles', {"profile":{"name": "from client"}}
load "mycurl.rb"
paurl'/profiles', {"profile":{"name": "from client"}}
turl'/profiles', {"profile":{"name": "from client"}}
turl'/profiles', {"profile":{"name": "from clientsad"}}
purl'/profiles', {"profile":{"name": "from client"}}
turl'/profiles', {"profile":{"name": "from clientsad"}}
turl'/profiles', {"profile":{"name": "from cliasdtsad"}}
turl'/profiles', {"profile":{"name": "5445"}}
turl'/profiles', {"profile":{"name": "5445", "gender": "mail"}}
turl'/profiles', {"profile":{"name": "5445", "gender": nil}}
turl'/profiles', {"profile":{"name": "5445", "gender": false}}
turl'/profiles', {"profile":{"name": "5445", "gender": nil}}
turl'/profiles', {"profile":{"email": "5445@qq.com", "gender": nil}}
turl'/profiles', {"profile":{"email": "544", "gender": nil}}
gurl'/profiles', {"profile":{"email": "544", "gender": nil}}
gurl '/profiles'
turl'/profiles', {"profile":{"email": "NoOK", "gender": nil}}
turl'/profiles', {"profile":{"email": "NoOK", "gender": true}}
turl'/profiles', {"profile":{"email": "NoOK", "gender": "sad"}}
turl'/profiles', {"profile":{"email": "NoOK", "gender": fuck}}
turl'/profiles', {"profile":{"email": "NoOK", "gender": 1}}
turl'/profiles', {"profile":{"email": "NoOK", "gender": fuck}}
turl'/profiles', {"profile":{"email": "NoOK", "gender": 1}}
turl'/profiles', {"profile":{"email": "NoOK", "gender": 0}}
turl'/profiles', {"profile":{"email": "NoOK", "gender": 1}}
turl'/profiles', {"profile":{"email": "NoOK@..com", "gender": 1}}
turl'/profiles', {"profile":{"email": "No@OK.com", "gender": 1}}
turl'/profiles', {"profile":{"email": "No", "gender": 1}}
turl'/profiles', {"profile":{"email": "No"}}
turl'/profiles', {"profile":{"email": "No", "gender":1}}
turl'/profiles', {"profile":{"email": "No", "gender":0}}
turl'/profiles', {"profile":{"email": "No@q.om", "gender":0}}
turl'/profiles', {"profile":{"email": "No@asd.om", "gender":1}}
turl'/profiles', {"profile":{"email": "No@asd.om", "gender":5}}
turl'/profiles', {"profile":{"email": "No", "gender":5}}
turl'/profiles', {"profile":{"email": "No", "gender":0}}
turl'/profiles', {"profile":{"email": "No@ok.ck", "gender":0}}
turl'/profiles', {"profile":{"email": "Noasdasd", "gender":0}}
turl'/profiles', {"profile":{"phone": "545"}}
turl'/profiles', {"profile":{"phone": "541252525"}}
turl'/profiles', {"profile":{"phone": "5412525205"}}
turl'/profiles', {"profile":{"phone": "54125252005"}}
turl'/profiles', {"profile":{"phone": "54125252105"}}
turl'/profiles', {"profile":{"phone": "54125252005"}}
turl'/profiles', {"profile":{"phone": "54125252105"}}
turl'/profiles', {"profile":{"phone": "541252521X5"}}
purl'/profiles', {"profile":{"phone": "541252521X5"}}
load "mycurl.rb"
turl'/profiles', {"profile":{"phone": "541252521X5"}}
purl'/profiles', {"profile":{"phone": "541252521X5"}}
turl'/profiles', {"profile":{"phone": "541252521X5"}}
gurl'/profiles'
gaurl'/profiles'
turl'/profiles', {"profile":{"phone": "541252521X5"}}
turl'/profiles', {"profile":{"phone": "541252521a5"}}
turl'/profiles', {"profile":{"phone": "5412"}}
turl'/profiles', {"profile":{"name": "asd"}}
gaurl'/profiles'
load "mycurl.rb"
gurl'/profiles'
x=gurl'/profiles'
x
gurl'/profiles'
{}.add
{} << "dd"
{} < "dd"
gurl'/profiles'
load "mycurl.rb"
gurl'/profiles'
p=Profilo::Profile.first
load "mycurl.rb"
purl'/auth' {"email": "kahsolt@163.com", "password":"1379"}
purl'/auth', {"email": "kahsolt@163.com", "password":"1379"}
load "mycurl.rb"
purl'/auth', {"email": "kahsolt@163.com", "password":"1379"}
purl'/auth', {"user": {"email": "kahsolt@163.com", "password":"1379"}}
purl '/auth', {"user": {"email": "kahsolt@163.com", "password":"1379"}}
$auth_token='z5ggfMr8+djPb0Puu7XEXYtHF8Ua3gCWYB7B7MW/2OzmwcdjIdGRoVGu7eml/1qJq6Hk4IzzYiJ3tNEXdXcIlQ=='
gurl'/api/auth'
gurl'/api/profile'
gurl'/api/profiles'
$email='kahsolt@163.com'
gurl'/api/profiles'
purl '/auth', {"user": {"email": "kahsolt@163.com", "password":"1379"}}
$auth_token='AeAq/xmCEDTkt9Nit/QsG/8lJAftWHvi9x5QQZZnDdXmdYB92GPMOkBo/OT5qkPRHdZcVICxxnVNCEOm4cZe3w=='
gurl'/api/profiles'
Faker::Science.element
require 'faker'
Faker::Science.element
Faker::Number.positive
purl '/auth', {"user": {"email": "kahsolt@163.com", "password":"1379"}}
$auth_token = 'fZMHOfkf12E1/hzGLmkOvcT2q9e4mW+5N2fCbRkufrGpaAqFUga2YEasKfnfnQlbVp29G01U20NA2amvTzVwNg=='
gurl'/api/profiles'
purl '/auth', {"user": {"email": "kahsolt@163.com", "password":"1379"}}
$auth_token='w8JOxjLhnlKZVPoBydheVbas9cvEy215xBOAR3rJHUmRviyL7LTrQhdvV7Kb3cpgafDietQ/U6DicOCWz+Wslg=='
gurl'/api/profiles'
alias $t $auth_token
$t
$t='sd'
$auth_token
$t='w8JOxjLhnlKZVPoBydheVbas9cvEy215xBOAR3rJHUmRviyL7LTrQhdvV7Kb3cpgafDietQ/U6DicOCWz+Wslg=='
Dir::rmdir "132"
FileUtils.rm_r "132"
`ls
.
ls
ls
load "mycurl.rb"
purl '/auth', {"user": {"email": "kahsolt@163.com", "password":"1379"}}
$t='w+AY3kX3PZ6c/d2DMIaxd08LOiZztLvvkAzqkgeGgiLsZtIi5TcThuQlYAvxaEBADH8m02Fr1EkanSiEHUuWBg=='
gurl'/api/profiles'
purl '/auth', {"user": {"email": "kahsolt@163.com", "password":"1379"}}
$t='ss/hq/8oJtPLiK3b6dCf8jAzb8H6YzpTu3nG3D4bn1wOwTUnCwt3T+QWmMZ0zm/xM3dLqvMI+740AU0FiKSKfw=='
gurl'/api/profiles'
$t
load "mycurl.rb"
purl "/signup", {"email":"kahsolt.163.com", "password":"1379"}
purl "/signup", {"account":{"email":"kahsolt.163.com", "password":"1379"}}
purl "/signup", {"email":"kahsolt.163.com", "password":"1379"}
purl "/signup", {"email":"kahsolt@163.com", "password":"1379"}
purl "/activate", {"token":"8FwSGOYNy8jw+O6QHzZQ5uMWGUgjvYObL29AAhS0Kh6Rx+ghvoo6XI+qxPSTAmGzd0Xi6NkVtiCKenT7V/HLsQ=="}
purl "/signup", {"email":"kahsolt@163.com"}
purl "/signup", {"email":"kahsolt@163.com", "password":"1379"}
purl "/activate", {"token":"e6m3ZZmXD6eBLpXn2YvuOUV06Rml5LCcUVCkvFTbZyUsFvngjHB7sgv0cgHq6qN6WyzTRXZukzfZITDNIFPHXQ=="}
purl "/signup", {"email":"kahsolt@163.com", "password":"1379"}
purl "/activate", {"token":"+9ttAZnNB62cSM1yThi/I4IkIk2eysR1rk4ELIgsrdtKb2hGTW5nT/hhbbMjCMYtg21pkUqyfJnm2K/NcEMwLg=="}
purl "/signup", {"email":"kahsolt@163.com", "password":"1379"}
purl "/activate", {"token":"hmzPINekJZrsxt5FVS14dndRQJb9g4uzT7ia7g+y3g9Lej7B/NWxyVRLoinxUo9Y82gvNHFuCXle90JhoEh+A=="}
purl "/signup", {"email":"kahsolt@163.com", "password":"1379"}
purl "/activate", {"token":'NkJjm1YWtAj19QlxKlGYkbQCFu8Jiuz14ukz/zESJ9lF2KX0/p4h/F86TDCAEZ9hP925OccDsQcceYI/+9pe9Q=='}
purl "/auth", {"email":"kahsolt@163.com", "password":"1379"}
purl "/auth", {"email":"kahsolt@163.com", "password":"1379s"}
purl "/auth", {"email":"kahsolt@163.com", "password":"137asd9"}
purl "/activate", {"token":'NkJjm1YWtAj19QlxKlGYkbQCFu8Jiuz14ukz/zESJ9lF2KX0/p4h/F86TDCAEZ9hP925OccDsQcceYI/=='}
purl "/signup", {"email":"kahsolt@163.com", "password":"13"}
purl "/signup", {"email":"kahsolt@163.com"}
purl "/forget_password", {"email":"kahsolt@163.com"}
purl "/reset_password", {"token":"qZJSmwc/+qF1uPr6HaWCEqXc4mbkedSDEFOr+t2dvKz7cv0BCFaErvIWoK/rTQYl6wNS5bw6F0JCj1bXU+jVew==", "password":"123"}
purl "/forget_password", {"email":"kahsolt@163.com"}
purl "/reset_password", {"token":"+KsDGvGd2lQXSyzaRtnitCFj4LHG+XkgmGSEFO7xRAmPMD4b5g0oLcl36cFSfOav3DuORZxeip3a63SWkfVFUg==", "password":"123"}
purl "/auth", {"email":"kahsolt@163.com", "password":"137asd9"}
purl "/auth", {"email":"kahsolt@163.com", "password":"15"}
purl "/auth", {"email":"kahsolt@163.com", "password":"1379"}
purl "/auth", {"email":"kahsolt@163.com", "password":"123"}
$t= 'W6Xd9mI3L+DlAqzFr1TFimTvI0f78DRq9yd96dKQQ/ZahSpKz1HobO+hEWQYpJ9PNIqT+wT6b5P9idKIiiuc5g=='
gurl "/api/profiles"
$email = "kahsolt@163.com"
gurl "/api/profiles"
purl "/api/profiles"
purl "/api/profiles", {}
gurl "/api/profiles"
gurl "/api/users"
gurl "/api/user"
gurl "/api/users"
gurl "/api/users/@me"
$t
gurl "/api/users/@me"
gurl "/api/users"
purl "/api/profiles", {}
purl "/forget_password", {"email":"kahsolt@163."}
purl "/forget_password", {"email":"kahsolt@1asd"}
purl "/reset_password", {"token":"asd"}
purl "/reset_password", {}
purl "/reset_password", {"password": "154"}
gurl "/api/users"
gurl "/api/users/@me"
purl "/reset_password", {}
purl "/reset_password", {"usernam":"asd"}
purl "/reset_password", {"usernam":"asasdd"}
purl "/reset_password", {"username":"asasdd"}
purl "/reset_password", {"username":"kahsolt@163.com"}
purl "/reset_password", {"email":"kahsolt@163.com"}
$email
purl "/reset_password", {"email":"kahsolt@163.com"}
purl "/forget_password", {"email":"kahsolt@63.com"}
purl "/forget_password", {"email":"kahsolt@qq.com"}
purl "/forget_password", {"email":"kahsolt@163.com"}
purl "/reset_password", {"token":"r3ZVAU1X06+Y7wqhMh5Vp809vTpWle6kfRES72zN8OHIYw7y2Z4iCQeerqhM/QixE/WLOJy/1OoYjaZasF0Qpg=="}
purl "/reset_password", {"token":"r3ZVAU1X06+Y7wqhMh5Vp809vTpWle6kfRES72zN8OHIYw7y2Z4iCQeerqhM/QixE/WLOJy/1OoYjaZasF0Qpg==","password":""}
purl "/auth", {"email":"kahsolt@163.com", "password": ""}
purl "/auth", {"email":"kahsolt@163.com", "password": "54"}
purl "/auth", {"email":"kahsolt@163.com", "password": "54asd"}
purl "/auth", {"email":"kahsolt@163.com", "password": ""}
purl "/auth", {"email":"kahsolt@163.com", "password": "1379"}
purl "/auth", {"email":"kahsolt@163.com", "password": ""}
purl "/forget_password", {"email":"kahsolt@163.com", "password": ""}
purl "/reset_password", {"token":"y4twuophg1Bu6gro5yJhLjzIb6JdKLyPIp8/ZS6jjoVYhy6Vul+JX5Qp9YUruC04ADr1hVSpl7wespwYn3VFJA==","password":""}
purl "/auth", {"email":"kahsolt@163.com", "password": ""}
purl "/forget_password", {"email":"kahsolt@163.com"}
purl "/reset_password", {"token":"JutDYpErtrYdLDgSCPK1YRrc9TtnYBZ8FK7r759fCQN/NBstirk9HAL5GQl0+b03voVv1WUOcOIV+m2870xAOg==","password":"183729"}
purl "/auth", {"email":"kahsolt@163.com", "password": ""}
purl "/auth", {"email":"kahsolt@163.com", "password": "183729"}
purl "/auth", {"email":"kahsolt@163.com", "password": "18379"}
purl "/auth", {"email":"kahsolt@163.com", "password": "183729"}
purl "/signup", {"email":"kahsolt@163.com", "password": "189"}
purl "/signup", {"email":"kahsolt@163.com"}
purl "/signup", {"email":"kahsolt@163.com","password":"asd"}
purl "/forget_password", {"email":"kahsolt@163.com","password":"asd"}
gurl "/api/users/@me"
purl "/auth", {"email":"kahsolt@163.com", "password": "183729"}
$t=taGej65En3eqQBSRnRPvaFun51UnZt/1E69y/n5u4zYxrLefAdapIslSZmFt8K6DWBX9zRzTJiPeA4TwNQZ8Aw==
$t='taGej65En3eqQBSRnRPvaFun51UnZt/1E69y/n5u4zYxrLefAdapIslSZmFt8K6DWBX9zRzTJiPeA4TwNQZ8Aw=='
$email
gurl "/api/users/@me"
gurl "/api/users"
purl "/api/users", {"email":"asd@asd.cas", "password":"54","type":"Inquisitor"}
purl "/api/users", {"email":"asd@asd.cas", "password":"5asd4","type":"Admin"}
purl "/api/users", {"email":"asd@qq.com", "password":"5asd4","type":"Admin"}
gurl "/api/profiles@me"
gurl "/api/profiles/@me"
gurl "/api/profiles/1"
gurl "/api/profiles/@me"
gurl "/api/users/@me"
gurl "/api/profiles/1"
//i
/\d/i ~= 5
/\d/i =~ 5
/\d/i.methods
/\d/i ~ 5
/\d/i ~~ 5
/\d/i !~ 5
/\d/i !~ "5"
/\d/i ~ "5"
/\d/i =~ "5"
/\d/i =~ "55"
/\/i =~ "55"
/\D/i =~ "55"
/d{11}/
/d{11}/i
/d{11}/i =~ "55"
/d{11}/i =~ "1521254152"
/d{11}/i =~ "15212541525"
/d{11}/i =~ "19235125663"
/\d{11}/i =~ "19235125663"
/\d{11}/i =~ "1923512566"
/\d{11}/i =~ "192351256"
/[Xx\d]{18}/i =~ "
"
/[Xx\d]{3}/i =~ ""
/[Xx\d]{3}/i =~ "512"
/[Xx\d]{3}/i =~ "51x"
/[Xx\d]{3}/i =~ "51X"
/[Xx\d]{3}/i =~ "51"
/[Xx\d]{3}/i =~ "5x"
{1:5}
{1=>5}
{1=>5}+{2=>5}
{1=>5}<<{2=>5}
{1=>5}<{2=>5}
{1=>5}.union {2=>5}
{:1=>5}.union {:2=>5}
{:s=>5} + {:h=>5}
{:s=>5}.assoc {:sdf=>4}
{}.methdos
{}.methods
{:s=>5}.merge {:h=>5}
{:s=>5}.update {:h=>5}
{:s=>5}.update {:h=>"5"}
{"5"=>"5"}.update {:h=>"5"}
{"5"=>"5"}.update {"asd"=>"5"}
h1 = { :a  => 1,  :b  => 2} 
h2 = {:b  => 3,  :d  => 3} 
h1.merge h2
{:b  => 3,  :d  => 3}.merge {:sd => 5}
Dir::mkdir " logs"
Dir::mkdir "logs"
load "mycurl.rb"
gurl "/auth", {"email":"app@iriscraft.tk","password":"1379"}
purl "/auth", {"email":"app@iriscraft.tk","password":"1379"}
gurl "/api/users/@me", {"email":"app@iriscraft.tk","token": "RouUoIv7VrpslyzicXxXiyYCwe1nOfKS43TjLkPp4TNhaqNFM8/m6WVfwl9yPMs2qhxZSP7c7XvU+stc0PCL+Q=="}
$t="RouUoIv7VrpslyzicXxXiyYCwe1nOfKS43TjLkPp4TNhaqNFM8/m6WVfwl9yPMs2qhxZSP7c7XvU+stc0PCL+Q=="
$email="app@iriscraft.tk"
gurl "/api/users/@me"
gurl "/api/profile"
gurl "/api/profiles/@me"
purl "/api/profiles/@me", {"name":"Kahsolt"}
purl "/api/profiles", {"name":"Kahsolt"}
load "mycurl.rb"
purl "/api/profiles/@me", {"name":"Kahsolt"}
purl "/api/profiles", {"name":"Kahsolt"}
turl "/api/profiles", {"name":"Kahsolt"}
turl "/api/profiles/@me", {"name":"Kahsolt"}
$t='RouUoIv7VrpslyzicXxXiyYCwe1nOfKS43TjLkPp4TNhaqNFM8/m6WVfwl9yPMs2qhxZSP7c7XvU+stc0PCL+Q=='
$email='app@iriscraft,tk'
turl "/api/profiles", {"name":"Kahsolt"}
turl "/api/profiles/@me", {"name":"Kahsolt"}
load "mycurl.rb"
app
$t ='RouUoIv7VrpslyzicXxXiyYCwe1nOfKS43TjLkPp4TNhaqNFM8/m6WVfwl9yPMs2qhxZSP7c7XvU+stc0PCL+Q=='
t "/api/profiles/@me", {"name":'kahsolt'}
u "/api/profiles/@me", {"name":'kahsolt'}
u "/api/profiles/@me", {"is_frozen":0}
u "/api/profiles/@me", {"is_frozen":nil}
u "/api/profiles/@me", {"is_frozen":null}
u "/api/profiles/@me", {"is_frozen":"null"}
u "/api/profiles/@me", {"is_frozen":false}
u "/api/profiles/@me", {"is_frozen":true}
u "/api/profiles/@me", {"is_frozen":nil}
u "/api/profiles/@me", {"is_frozen":5}
u "/api/profiles/@me", {"is_frozen":false}
u "/api/profiles/@me", {"is_frozen":f555}
u "/api/profiles/@me", {"is_frozen":555}
u "/api/profiles/@me", {"is_frozen":false}
u "/api/profiles/@me", {"is_frozen":0}
u "/api/profiles/@me", {"is_frozen":true}
u "/api/profiles/@me", {"is_frozen":trs}
u "/api/profiles/@me", {"is_frozen":false}
u "/api/profiles/@me", {"is_frozen":5}
u "/api/profiles/@me", {"is_frozen":true}
u "/api/profiles/@me", {"is_frozen":tr}
u "/api/profiles/@me", {"is_frozen":51}
load "mycurl.rb"
app
$t ='8RBKbmgyhGFRF+0UiXjAFMx1QLDL4CC5KWMVAIG/Mg5+zChGi7RAFarAJ48hh0939urA83GyjBxAwCGqpnh6WQ=='
u "/api/profiles/@me", {"is_frozen":true}
adm
$t ='bAQ2EGAd86adqF5ypZfvhFLVe5M2GLxZ9IMN2PVGeKp4PXs1QAIdaeGFYygNMI7tolHWXwgVxSO8mYk3rBXoPg==' 
u "/api/profiles/1", {"is_frozen":true}
u "/api/profiles/1", {"is_frozen":254}
u "/api/profiles/1", {"is_frozen":false}
load "url.rb"
app
$tapp='8RBKbmgyhGFRF+0UiXjAFMx1QLDL4CC5KWMVAIG/Mg5+zChGi7RAFarAJ48hh0939urA83GyjBxAwCGqpnh6WQ=='
adm
$tadm='bAQ2EGAd86adqF5ypZfvhFLVe5M2GLxZ9IMN2PVGeKp4PXs1QAIdaeGFYygNMI7tolHWXwgVxSO8mYk3rBXoPg=='
app
t "/api/profiles/@me", {"gender": 5}
t "/api/profiles/@me", {"gender": 0}
t "/api/profiles/@me", {"gender": 1}
u "/api/profiles/@me", {"is_frozen": 1}
u "/api/profiles/@me", {"is_frozen": true}
t "/api/profiles/@me", {"gender": 1}
t "/api/profiles/@me", {"gender": true}
adm
u "/api/profiles/i", {"is_frozen": true}
u "/api/profiles/1", {"is_frozen": true}
u "/api/profiles/1", {"is_frozen": false}
app
t "/api/profiles/@me", {"political_status": "asdssa" }
5.nil>
5.nil?
5.not_nil?
5.nil?
5.type
5[t:ype]
5[:type]
load "url.rb"
app
$tapp = '8RBKbmgyhGFRF+0UiXjAFMx1QLDL4CC5KWMVAIG/Mg5+zChGi7RAFarAJ48hh0939urA83GyjBxAwCGqpnh6WQ=='
p "/api/profile/@me"
p "/api/profiles", {}
$t
$t = '8RBKbmgyhGFRF+0UiXjAFMx1QLDL4CC5KWMVAIG/Mg5+zChGi7RAFarAJ48hh0939urA83GyjBxAwCGqpnh6WQ=='
p "/api/profiles", {}
p "/api/profiles/@me", {"name":"1379asd"}
t "/api/profiles/@me", {"name":"1379asd"}
t "/api/profiles/@me", {}
u "/api/profiles/@me", {"name":"1379asd"}
u "/api/profiles/@me", {"name":"OK"}
u "/api/profiles/@me", {"math_courses":"ok"}
t "/api/profiles/@me", {"math_courses":"ok"}
t "/api/profiles/@me", {"math_courses":[]}
t "/api/profiles/@me", {"math_courses":[{"name":"DONG","grade":5}]}
t "/api/profiles/@me", {"math_courses":[{"name":"DONG","grade":5, "sn":1}]}
t "/api/profiles/@me", {"profile":{"math_courses":[{"name":"DONG","grade":5, "sn":1}]}}
app
t "/api/profiles/@me", {"gender":"asd"}
t "/api/profiles/@me", {"gender":"0"}
t "/api/profiles/@me", {"gender":"1"}
t "/api/profiles/@me", {"math_courses":[{"name":"DONG","grade":5, "sn":1}]}
[1,2,3].index1
[1,2,3].index 1
[1,2,3].index 0
t "/api/profiles/@me", {"math_courses":[{"name":"DONG","grade":5, "sn":1}]}
t "/api/profiles/@me", {"math_courses":[{"name":"DONG","grade":500, "sn":1}]}
t "/api/profiles/@me", {"math_courses":[{"name":"DO5","grade":500, "sn":1}]}
t "/api/profiles/@me", {"math_courses":[{"grade":500, "sn":1}]}
t "/api/profiles/@me", {"math_courses":[{"grade":0, "sn":1}]}
t "/api/profiles/@me", {"math_courses":[{"grade":0, "sn":2}]}
t "/api/profiles/@me", {"math_courses":[{"grade":0, "sn":1}]}
t "/api/profiles/@me", {"math_courses":[{"name":"What1", "grade":0, "sn":1},{"name":"What2","grade":5,"sn":2}]}
t "/api/profiles/@me", {"professional_courses":[{"name":"What1", "grade":0, "sn":1},{"name":"What2","grade":5,"sn":2}]}
t "/api/profiles/@me", {"professional_courses":[{"name":"What1", "grade":0, "sn":1},{"name":"What2","grade":5,"sn":5}]}
t "/api/profiles/@me", {"professional_courses":[{"name":"What2","grade":5,"sn":2}]}
t "/api/profiles/@me", {"professional_courses":[{"name":"What2","grade":5,"sn":5}]}
t "/api/profiles/@me", {"gender":"0"}
if []
  puts "asd"
end
rasie ""asd
rasie "ADSSD"
raise "ADSSD"
raise :Error, "ADSSD"
raise Error.new, "ADSSD"
load "url.rb"
app
$t=$tapp='vRCzC9EHcVq6aNbMnFZkkln93F7ewlxMDxTmjyS0YaM1BKNn44YTvHJgVF5goThO0nGXGtALILad+lXPbTxllg=='
g "/api/profiles/@me"
app
$t=$tapp='8IQUAy0MoGMFzxrWzngIsNjFTyxt5YGg7ewwxFNEcp49/+8JwtMJ/sAvtaku6qXtB7EbxGv7e+zzQsBZ27jmvg=='
g "/api/profiles/@me"
1.present?
true.blank?
{}.to_json
gets "asd"
gets "A"
[2,2,3].sample
{}.count
{:asd=>5}.count
rand
rand 10
a=4
a.class.ancestor
a.class.ancestors
p
p.class
load "./test/controllers/crl.rb"
app
$t=$tapp='VjCXR76Fy7bZbJToE+oWEyIU6NXePl9jvjfbV7GuhhPUeUDNwp1X9lLuLUdSZSCdQH22SEveeXHdkKsCrkzLDw=='
g "api/profiles/@me"
g "/api/profiles/@me"
t "/api/profiles/@me", {"name", "NewName"}
t "/api/profiles/@me", {:name => "NewName"}
t "/api/profiles/@me", {:email => "NewNam@em.edu.cn"}
t "/api/profiles/@me", {:date_of_birth => "Nehah"}
t "/api/profiles/@me", {:cv => "asd"}
t "/api/profiles/@me", {:cv => "what"}
t "/api/profiles/@me", {:cvs => "what"}
1024.byte
1024/1024
//
//i
/a/i =~ "a"
/a/i =~ "s"
/a/i =~ "A"
/a\a/i =~ "A"
/a\a/i =~ "a\a"
/a\a/i =~ "Aa"
/a\a/i =~ "A\a"
if 0
  puts "asd"
end
x=:Profile
Profile::x
Profile::x.to_s
require :securerandom
require :securerandom.to_s
SecureRandom.methdos
SecureRandom.methods
SecureRandom.hex
SecureRandom.urlsafe_base64
SecureRandom.urlsafe_base64 
SecureRandom.urlsafe_base64 64
SecureRandom.urlsafe_base64 
SecureRandom.urlsafe_base64 8
SecureRandom.urlsafe_base64 4
SecureRandom.urlsafe_base64 3
SecureRandom.urlsafe_base64 2
SecureRandom.urlsafe_base64 4
SecureRandom..methdos
SecureRandom..methods
SecureRandom.methods
SecureRandom.uuid
SecureRandom.uuid 1
SecureRandom.uuid 
SecureRandom.number
SecureRandom.random_bytes
SecureRandom.random_number
SecureRandom.urlsafe_base64 4
SecureRandom.urlsafe_base64 8
SecureRandom.urlsafe_base64 6
SecureRandom.base64 6
SecureRandom.urlsafe_base64 6
SecureRandom.urlsafe_base64 5
SecureRandom.urlsafe_base64
SecureRandom.urlsafe_base64.length
SecureRandom.urlsafe_base64
load "crl.rb"
g "api/tutors"
g "/api/tutors"
{
  :scalars => %w[
        name gender date_of_birth
        ethnicity political_status id_card_number
        phone email address zip_code
        is_accommodate
        emergency_contact_name emergency_contact_phone family_address
        university department major classname
        counselor_name counselor_phone
        english_proficiency_level english_proficiency_grades
        major_grade_rank major_student_number
        hobbies self_introduction
      ],
  :files => %w[
        photo school_id_card_front school_id_card_back
        transcript cv
      ],
  :structs => %w[
        math_courses professional_courses
        scholarship_awards discipline_awards technology_awards other_awards
        student_works paper_works research_works internship_works
        applications references
      ]
}.flatten
a={
  :scalars => %w[
        name gender date_of_birth
        ethnicity political_status id_card_number
        phone email address zip_code
        is_accommodate
        emergency_contact_name emergency_contact_phone family_address
        university department major classname
        counselor_name counselor_phone
        english_proficiency_level english_proficiency_grades
        major_grade_rank major_student_number
        hobbies self_introduction
      ],
  :files => %w[
        photo school_id_card_front school_id_card_back
        transcript cv
      ],
  :structs => %w[
        math_courses professional_courses
        scholarship_awards discipline_awards technology_awards other_awards
        student_works paper_works research_works internship_works
        applications references
      ]
}.flatten
a
a.flatten
a.flatten.flatten
hash
"asd.asdfsv.fdbvre.54".spilit
"asd.asdfsv.fdbvre.54".split
"asd.asdfsv.fdbvre.54".split(".")
"asd.asdfsv.fdbvre.54".split(".").last
send
send "puts", 5
[:asd]+[:sn]
1048576/1024
1048576/1024/1024
1024*500
load "test/controllors/RAW/curl.rb"
load "test/controllers/RAW/curl.rb"
app
load "test/controllers/RAW/curl.rb"
app
adm
load "test/controllers/RAW/curl.rb"
adm
$t=$tadm="Ly93mU3x8wlcd1XzV362cP--RtWqUubSOHCACIr6hbsMiCNp7FM7Bqjl1LgrAsra3ZmYfiwoZIsGRpbKyG-hkA"
p "/api/tutors", {"name": "Hahaha"}
p "/api/tutors", {"name": "Hahahadsd"}
g "http://localhost:3000/api/tutors/8"
g "/api/tutors/8"
Tutor.all.map!{|e|e.delete}
"asd".each do |e| puts e end
"asd".each_byte do |e| puts e end
p "asd"
print "asd"
?56
chr 5
5.to_c
5.to_s
5.chr
5.chr+"asd"
56.chr+"asd"
exit 0
require "logger"
Logger
Logger.new
l=Logger.new(STDOUT)
l.info("asd")
l.info("Whai")
l.error("Whai")
l.warn("Whai")
l.fatal("Whai")
/\A([^@\s]+)@((?:[-a-z0-9]+\.)+edu\.[a-z]{2,})\z/i
/\A([^@\s]+)@((?:[-a-z0-9]+\.)+edu\.[a-z]{2,})\z/i =~ "asdsad@buaa.edu.cn"
/\A([^@\s]+)@((?:[-a-z0-9]+\.)+edu\.[a-z]{2,})\z/i =~ "asdsad@buaaedu.cn"
/\A([^@\s]+)@((?:[-a-z0-9]+\.)+edu\.[a-z]{2,})\z/i =~ "asdsad@buaa.edu.cn"
/\A([^@\s]+)@((?:[-a-z0-9]+\.)+edu\.[a-z]{2,})\z/i =~ "asdsad@buasada.edu.cn"
def f do def p enden end
def f do def p end end
def f  def p end end
def f
  def p
  end
end
p
p "asd"
def f
  def r
    puts "r"
  end
  puts "f"
end
f
r
true.eql? 'true'
true.to_s
true.to_s.to_b
true.to_s.to_i
true.to_s.to_c
true.to_s.to_s
true.to_s.to_f
true.to_s.to_r
Inf
inf
INF
0/0
0\0
0//0
0
;
%w[C C++ Java].each {|e| puts e << "is naive"}
%w[C C++ Java].each {|e| puts e << " is naive"}
%w[C C++ Java PHP].each {|e| puts e << " is naive"}
%w[C C++ Java PHP].map {|e| puts e << " is naive"}
%w[C C++ Java PHP].each {|e| puts e << " is naive"}
%w[C C++ Java PHP Python].each {|e| puts e << " is naive :)"}
%w[C C++ Java PHP Python].each {|e| puts e << " is naive"}
%w[C C++ Java PHP Python].all {|e| puts e << " is naive"}
%w[C C++ Java PHP Python].each {|e| puts 'Naive' << e << ?!}
%w[C C++ Java PHP Python].each {|e| puts ' Naive '<<e<<?!}
%w[C C++ Java PHP Python].each {|e| puts 'Naive '<<e<<?!}
time
Os
OS
Time.now
Time.clock
Timer
Time.utc
Time.now
Time.now.to_i
Time.now.to_f
system
system "ls"
`ls
`
`ls`
Kernel.`ls
Kernel.`"ls"
`"ls"
`
a=`ls`
a
Random
Random.randint
Random.rand
rand
randint
rand
Random.rand 5
Random.rand 5 10
Random.rand 5, 10
Random.rand 5
Random.rand 0xFFFFFFFF
Thread.new do
  puts "asd"
end
t=Thread.new do
  puts "asd"
end
t
t.status
t.run
t=Thread.new do
  while true do
    a=5
    b=Random.rand
    a=a+b
  end
end
t
t.status
t.exit
t.status
t.run
ARGV
help join
help Thread
r=`cat /proc/meminfo |grep MemTotal|cut -f2 -d:`.to_i
r
r/1024
r/1024.0
r/1024.0/1024.0
r/1024
:C++
:"C++"
:[C++]
:(C++)
"asdas\n".ti_s
"asdas\n".to_s
"asdas\n".chomp
"asdas\n".chomp "\n"
"asdas\n\n".chomp "\n"
"asdas\n\n".chomp
/image\/.*/i~="image/png"
/image\/.*/i =~ "image/png"
load "curl.rb"
app
adm
app
$tadm = "ynyuqKxPAlnUhI5HVBdaNPJHuAXnze_Yui9hEr6P6wnWN-58i0kq4ecWpUp3NBOVPNVmPe42EXi6JD_vW34exg"
g "/api/users"
$tapp=$tadm
g "/api/users"
g "/api/profiles/@me"
app
$tapp ='ynyuqKxPAlnUhI5HVBdaNPJHuAXnze_Yui9hEr6P6wnWN-58i0kq4ecWpUp3NBOVPNVmPe42EXi6JD_vW34exg'
g "/api/profiles/@me"
g "/api/profiles/@me.zip"
3000*12*31*4
3000*12*31*4/1024.0/1024.0
3000*12*31*4B
gets.split
gets.split.map!{|e| e.to_i}
gets.split.map!{|e| e.to_i}.sum
gets.split.reduce{|e| :+}
gets.split.reduce{|e, ans| :+}
gets.split.reduce{|e, ans| ans+=e}
gets.split.reduce{|e, ans| ans+=e.to_i}
gets.split.map!{|e| e.to_i}.reduce{|e, ans| ans+=e}
puts gets.split.map!{|e| e.to_i}.reduce{|e, ans| ans+=e}
puts gets.split.map!{|e| e.to_i}.reduce{|e, ans| ans+=e} while true
gets do {|e| puts e}
gets {|e| puts e}
gets {|l| puts l.split.map!{|e| e.to_i}.reduce{|e, ans| ans+=e}}
gets {|l| l and puts l.split.map!{|e| e.to_i}.reduce{|e, ans| ans+=e} or } while true
gets {|l| l and puts l.split.map!{|e| e.to_i}.reduce{|e, ans| ans+=e} or break} while true
gets {|l| l and puts(l.split.map!{|e| e.to_i}.reduce{|e, ans| ans+=e}) or break} while true
gets {|l| l and (puts l.split.map!{|e| e.to_i}.reduce{|e, ans| ans+=e}) or break} while true
puts gets.split.map!{|e| e.to_i}.reduce{|e, ans| ans+=e}
$_
puts gets.split.map!{|e| e.to_i}.reduce{|e, ans| ans+=e} while $_
puts gets.split.map!{|e| e.to_i}.reduce{|e, ans| ans+=e} while $_ != '\n'
$_
puts(gets.split.map!{|e| e.to_i}.reduce{|e, ans| ans+=e}) while $_ != '\n'
s=gets
s
while true {puts "asd"; break}
while true {puts "asd"; break;}
while true doputs "asd"; break;end
while true do puts "asd"; break;end
while true do puts "asd"; break; end
while true do l=gets!='\n' and puts split.map!{|e| e.to_i}.reduce{|e, ans| ans+=e} or break end
while true do l=gets!='\n' and puts l.split.map!{|e| e.to_i}.reduce{|e, ans| ans+=e} or break end
while true do (l=gets)!='\n' and puts l.split.map!{|e| e.to_i}.reduce{|e, ans| ans+=e} or break end
while true do (l=gets)!='\n' && puts l.split.map!{|e| e.to_i}.reduce{|e, ans| ans+=e} || break end
while true do (l=gets)!='\n' and puts(l.split.map!{|e| e.to_i}.reduce{|e, ans| ans+=e}) or break end
while true do (l=gets)!='\n' and puts(l.split.map!{|e| e.to_i}.reduce{|e, ans| ans+=e}) or (break) end
while true do (l=gets)!='\n' ? puts(l.split.map!{|e| e.to_i}.reduce{|e, ans| ans+=e}) : break end
while true do (l=gets)!='\n' ? puts(l.split.map!{|e| e.to_i}.reduce{|e, ans| ans+=e}) : (print l) end
l=gets
l
l=='\n'
l=="\n"
while true do (l=gets)!="\n" ? puts(l.split.map!{|e| e.to_i}.reduce{|e, ans| ans+=e}) : (print l) end
(l=gets)!="\n"
(l=gets)=="\n"
while l=gets do l=="\n" ? break : puts(l.split.map!{|e| e.to_i}.reduce{|e, ans| ans+=e}) end
while l=gets do print(l) end
while l=gets do l=="\n" ? break : puts l.split.map!{|e| e.to_i}.reduce{|e, ans| ans+=e} end
if "\n" do puts "asd" edn
if "\n" do puts "asd" ednd
if "\n" do puts "asd" end
if "\n" then puts "asd" end
class T
  def ()(x)
a=5
a.()=5
a=5
a=
(a=)
rand 2..3
rand 50..100
rand 0..2
rand 1..2
rand(1..2).time {|t| puts t}
rand(1..2).times {|t| puts t}
'app' << sn << '@buaa.edu.cn'
sn=1
'app' << sn << '@buaa.edu.cn'
'app' << sn.to_i << '@buaa.edu.cn'
'app' << sn.to_s << '@buaa.edu.cn'
rand(1..2).times {|t| puts t}
rand(1..5).times {|t| puts t}
sn=1;rand(1..5).times {puts sn; sn+=1}
b=0
gx=0
zx
zx=0
b+=4+2+3.5+2+0.5+0.2+2.0+0.5
b
gx+=2
b+=3
b+=4+5
zx+=3
b+=2
b+=4+3+4+2+2+2+0.5+0.3+2
gx+=2.5+2
b+=7
zx+=3
zx+=1
b+=1
b+=3+4+1.5+3
b+=0.5+0.2+2+3+5
zx+=5
b+=6.5
b+=0.5
b+=0.5+2+5+3
zx+=4
b+=5
b+=2
b+=10.7
zx+=3
b+=3
zx+=3+2+2+2+2+2
zx+=2
b+=2.8
zx+=2
zx+=5
b+=3+2+3
b+=1.2
b
gx
zx
"一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十".length
"一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十".each_char do |c| puts c if c=='一' end
cnt=0
"一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十一二三四五六七八九十".each_char do |c| cnt+=1 if c=='一' end
cnt
2**2
2^2
5**0.5
4**0.5
1..10.map {|e|puts e}
10.map {|e|puts e}
rand 100
[].push 1
[1,2,3,5].sample 5
[1,2,3,5].sample 4
[1,2,3,5].sample 1
puts []
puts [1,2,3]
[]*5
[[]*5]
[[]*1]
[[]*5]
rep
[[1],[2]]
[[1],[2]][1]
[[1],[2]][1][1]
[[1],[2]][1][0]
g{}
g{=}
g={}
g[0]
g[1]
g[1]=[]
g
2*2**0.5
6*2**0.5
(6*2)**0.5
[[' '*5]]*5
([[' '*5]]*5)[1][5]
([[' '*5]]*5)[1][1]
([[' '*5]]*5)[1]
([[' '*5]]*5)[1][5]
([[' ']*5]*5)[1][5]
([[' ']*5]*5)
[[' ']*5]*5
[[' ']*5]*5[0]
[[' ']*5]*5[0][1]
[' '*5]*5[0][1]
[' '*5]*5[0]
[[' ',]*5]*5[0]
[[' ',]*5]*5
[[' ',]*5]*5[0][1]
map=[]
map[0]=[]
map
map[1]=[]
map[1]=[' ', ' ']
map
([[' ',]*5]*5)[0][1]
([[' ',]*5]*5)
([[' ']*5]*5)
([[' ']*5]*5)[1][4]
rand 2
while true do puts random 4 end
while true do puts rand 4 end
map=[[' ']*5]*5
map[2][3]='o'
map[1][4]='X'
map
map[1]
map[1][4]
map
(map[1][4])='X'
map[0]
map[0][1]
map[0][1]='A'
map
Array.new " ", 5
Array.new 5, " "
Array.new 5, Array.new 3, ''
Array.new (5, Array.new (3, ''))
Array.new (5, Array.new(3, ''))
Array.new(5, Array.new(3, ''))
@env
require "judged"
JSON
require 'json'
JSON
JSON.par
JSON.parse "{'asd':1}"
JSON.parse '{"asd":1}'
x=JSON.parse '{"asd":1}'
x["asd"]
x["assd"]
x.asd
Pathname
Pathname("asdsad")
Pathname("asdsad").join
Pathname("asdsad").join("12321").to_s
open("TEST", "w").write("asdasdsadad").flush.close
f=open("TEST", "w").write("asdasdsadad")
f.flush
f=open("TEST", "w")
f.flush.close
f.flush
Pathname(:asdas)
help load
sleep 5
sleep random 5
sleep random 3
sleep rand
sleep rand*5
req
require 'json'
JSON.strinfy
JSON.stringfy
dir(JSON)
JSON.dump {}
JSON.dumps {}
{}.to_s
{:c=>"asd"}.to_s
{:c=>"asd"}.to_json
[].sample
[1,2,3].sample
r'asd'
@'asd'
Pathname("asd")
require 'os'
require 'sys'
require "sys-cpu"
SysCPU
SysCpu
Sys
CPU
Sys.CPU
Sys.cpu
Sys::CPU
Sys::CPU::HW_NCPU
Sys::CPU.HW_NCPU
Sys::CPU::VERSION
Sys::CPU::CTL_HW 
Sys::CPU::CTL_HW
Sys::CPU::CPUStruct
Sys::CPU::cpu_stats
Sys::CPU::cpu_type
Sys::CPU::fpu_type
Sys::CPU::freq
Sys::CPU::freq 5
Sys::CPU::freq 2
Sys::CPU.machine
Sys::CPU::machine
Sys::CPU::module_exec
Sys::CPU::module_eval
Sys::CPU::modle
Sys::CPU::model
Sys::CPU.model
Sys::CPU.processors
Sys::CPU.machine
Sys::CPU.load_avg
Sys::CPU.fpu_type
Sys::CPU.cpu_type
Sys::CPU.cpu_stats
Sys::CPU.architecture
Sys::CPU.family
Sys::CPU.voltage
Sys::CPU::CPUStruct
Sys::CPU.state
Sys::CPU.state 5
Sys::CPU.state 1
Sys::CPU.num_cpu 1
Sys::CPU.num_cpu 
Sys::CPU.processors
`cat /proc/loadavg`
s=`cat /proc/loadavg`
s.split " "
s.split
load 'machine_info.rb'
MachineInfo
MachineInfo.get_swap
MachineInfo.get_status
MachineInfo.get_load_avg
load 'machine_info.rb'
MachineInfo.get_load_avg
MachineInfo.get_status
load 'machine_info.rb'
MachineInfo.get_status
MachineInfo.get_load_avg
g = ->(a, b, c) { a }
g
-> (a) {2*a}
g=-> (a) {2*a}
g()
g
g.call
g.call 5
->(a){2*a}(5)
->(a){2*a} 5
(->(a){2*a}) 5
(->(a){2*a}) (5)
(->(a){2*a}) {5}
(->(a){2*a}) 
(->(a){2*a}).call 5
->(a){2*a}.call 5
load "judged"
load "judge"
require "judge"
require "judged"
require "judged.rb"
Pathname
Pathname.
new "asd"
Pathname
File
File.dirname
File.dirname __FILE__
Dir.pwd
Pathname.new(File.dirname(__FILE__)).realpath
$:
require 'logger'
Logger
Logger.new
help Logger.new
help(Logger.new)
help(Logger)
hdir(Logger)
dir(Logger)
help Logger
logger=Logger.new "A"
logger.warn "asd"
logger.error "eeee"
logger.info 123
logger.log "ad"
logger.log 
logger.log 123
logger.progname
logger.progname = "Koj"
logger.reopen
logger.level
logger.level 2
logger.level=2
logger.level 2
logger.debug? "asd"
logger.debug? 
logger.info? 
logger.level=0
logger.info? 
logger.info "innnn"
logger.close
logger
logger.info "asd"
logger
ruby = %w[Java Smalltalk Lisp Perl Python Lua].reduce do |this, it| this+it end
ruby = %w[Java Smalltalk Lisp Perl Python Lua].reduce do |this, it| this<<?+<<it end
ruby = %w[Java Smalltalk Lisp Perl Python Lua].reduce do |this, it| this+?++it end
Dir('.')
Dir.new('.')
d=Dir.new('.')
d.entries
require "iniparse"
IniParse
IniParse.parse
Dict
hash
Hash
Hash.new {}
Hash.new
Hash.new[:asd]=5
Hash.new [:asd]=5
Hash.new 
`lsb_release -d | cut -f2`
`uname -r`.chomp
{
  :hostname     => `hostname`.chomp,
  :kernel       => `uname -r`.chomp,
  :os           => `lsb_release -d | cut -f2`.chomp,
  :processor    => `cat /proc/cpuinfo | grep 'processor' | wc -l`.to_i,
  :memory       => `cat /proc/meminfo | grep MemTotal | cut -f2 -d:`.to_i / 1024,
  :memory_free  => `cat /proc/meminfo | grep MemFree | cut -f2 -d:`.to_i / 1024,
  :swap         => `cat /proc/meminfo | grep SwapTotal | cut -f2 -d:`.to_i / 1024,
  :swap_free    => `cat /proc/meminfo | grep SwapFree | cut -f2 -d:`.to_i / 1024,
  :load_avg     => `cat /proc/loadavg`.split,
}
"asd".start_with?"a"
d=Dir.new('.')
d
d.entries
Path.new('.')
File.new('.')
f=File.new('.')
f.entries
d.entries[0]
ls
d
d.pa
d.path
d
d.fileno
File.read "/mnt/c/Users/Kahsolt/Desktop/Koj/judge/conf/judged.conf"
c=File.read "/mnt/c/Users/Kahsolt/Desktop/Koj/judge/conf/judged.conf"
c
IniParse.parse c
c
File.read "/mnt/c/Users/Kahsolt/Desktop/Koj/judge/conf/judged.conf"
c=File.read "/mnt/c/Users/Kahsolt/Desktop/Koj/judge/conf/judged.conf"
IniParse.parse c
p=IniParse.parse c
p
p[:Timer]
p['Timer']
p['Timer'].keys
p['Timer'].key
p['Timer']['methods']
p['Timer']['method']
requre bunny
requre 'bunny'
require 'bunny'
help Bunny.new
pp "asd"
require "pp"
require "pprint"
Logger
l=Logger.new STDOUT
l=Logger.new progname: 'KOO'
require 'uuid'
UUID
require 'securerandom'
SecureRandom.UUID
SecureRandom.uuid
SecureRandom.url_safe
SecureRandom.url_safe_uuid
SecureRandom.base
SecureRandom.base64
SecureRandom.uuid
require "securerandom"
Dir.mkdir "asdasd"
Dir.rmdir "asdasd"
Date
Time
Time.today
require "securerndom"
require "securerandom"
SecureRandom.uuid
reqiure "banner"
require "banner"
require "securerandom"
SecureRandom.hash 
SecureRandom.hash "asd"
SecureRandom.hash
Kernel.hash
require 'socket'
IPSocket.getaddress(Socket.gethostname)
TCPSocket.gethostbyname(Socket.gethostname)
require "iniparse"
c=File.read("./conf/languages/Ec")
c
p=IniParse.parse c
p['Macro']
p['Macro'].each
p['Macro'].each {|k| puts k}
p['Macro'].each {|k,v| puts v}
p['Macro'].each {|line| puts line}
p['Macro'].each {|line| puts line.key}
p['Macro'].each {|line| puts line[:key]}
p['Macro'].each {|line| puts line.value}
p['Macro'].each {|line| puts line.value.values}
p['Macro'].each {|line| puts line.value.value}
p['Macro'].each {|line| puts line.value}
p['Macro'].keys {|line| puts line.value}
p['Macro'].key {|line| puts line.value}
"asd".replace "a", "5"
"asd".replace "a"
"asdas".sub "a", "s"
"asdas".sub "a", "A"
"asdas".gsub "a", "A"
Random
Random.rand
Random.rand 9000
Dir.chroot "."
Dir.chroot "/"
require "bunny"
Bunny.new
b=Bunny.new
b.display
b.heartbeat
b.create_channel
b.start
b.heartbeat
c=b.create_channel
c.name
c.client
c.direct
c.basic_ack
c.number
q
937500-890625
(937500-890625)/937500
(937500-890625)/937500.0
require 'ffi'  
module MyExtModule  
  extend FFI::Library  
  attach_function :printf, [:string], :void  
end  
MyExtModule.printf("Hello FFI\n") 
{
  "limit_time_cpu": 1000,
  "limit_time_real": 3000,
  "limit_memory": 4096,
  "limit_output": 4096,
  "limit_stack": 4096,
  "limit_process_number": 10,
  "src_path": "main.c",
  "compile_cmd": "gcc main.c -o main",
  "exe_path": "./main",
  "argv": ["./main", null],
  "envp": ["PATH=/bin:/usr/bin", null],
  "input_path": "1.in",
  "output_path": "1.out",
  "error_path": "1.out",
  "ans_output_path": "/data/1/1.out",
  "log_path": "koj.log"
}
null=nil
d={
  "limit_time_cpu": 1000,
  "limit_time_real": 3000,
  "limit_memory": 4096,
  "limit_output": 4096,
  "limit_stack": 4096,
  "limit_process_number": 10,
  "src_path": "main.c",
  "compile_cmd": "gcc main.c -o main",
  "exe_path": "./main",
  "argv": ["./main", null],
  "envp": ["PATH=/bin:/usr/bin", null],
  "input_path": "1.in",
  "output_path": "1.out",
  "error_path": "1.out",
  "ans_output_path": "/data/1/1.out",
  "log_path": "koj.log"
}
d
require 'json'
d.to_json
{
  "result": "AC",
  "time": 233,
  "memory": 500,
  "code_length": 666
}.to_json
d
d.to_json.length
"{"
"\"result\":\"AC\","
"\"time\":233,"
"\"memory\":500,"
"\"code_length\":666"
"}"
{
  "result": "AC",
  "time": 233,
  "memory": 500,
  "code_length": 666
}.to_json.length
require 'socket'   
hostname = 'localhost'  
port 7000
port =7000
s = TCPSocket.open(hostname, port)   
s.send "asd"
help s.send
s.puts "asd"
require 'json'
ls
{
  "limit_time_cpu": 1000,
  "limit_time_real": 3000,
  "limit_memory": 4096,
  "limit_output": 4096,
  "limit_stack": 4096,
  "limit_process_number": 10,
  "src_path": "main.c",
  "compile_cmd": "gcc main.c -o main",
  "exe_path": "./main",
  "argv": ["./main", null],
  "envp": ["PATH=/bin:/usr/bin", null],
  "input_path": "1.in",
  "output_path": "1.out",
  "error_path": "1.out",
  "ans_path": "/data/1/1.out",
  "log_path": "koj.log"
}.to_json
null=nil
{
  "limit_time_cpu": 1000,
  "limit_time_real": 3000,
  "limit_memory": 4096,
  "limit_output": 4096,
  "limit_stack": 4096,
  "limit_process_number": 10,
  "src_path": "main.c",
  "compile_cmd": "gcc main.c -o main",
  "exe_path": "./main",
  "argv": ["./main", null],
  "envp": ["PATH=/bin:/usr/bin", null],
  "input_path": "1.in",
  "output_path": "1.out",
  "error_path": "1.out",
  "ans_path": "/data/1/1.out",
  "log_path": "koj.log"
}.to_json
task_json={
  "limit_time_cpu": 1000,
  "limit_time_real": 3000,
  "limit_memory": 4096,
  "limit_output": 4096,
  "limit_stack": 4096,
  "limit_process_number": 10,
  "src_path": "main.c",
  "compile_cmd": "gcc main.c -o main",
  "exe_path": "./main",
  "argv": ["./main", null],
  "envp": ["PATH=/bin:/usr/bin", null],
  "input_path": "1.in",
  "output_path": "1.out",
  "error_path": "1.out",
  "ans_path": "/data/1/1.out",
  "log_path": "koj.log"
}.to_json
s
s.count
s.puts task_json
s = TCPSocket.open(hostname, port)   
s.puts task_json
s = TCPSocket.open(hostname, port)   
s.puts task_json
s = TCPSocket.open(hostname, port)   
s.puts task_json
s
task_json
s
task_json = {
  "limit_time_cpu": 1000,
  "limit_time_real": 3000,
  "limit_memory": 4096,
  "limit_output": 4096,
  "limit_stack": 4096,
  "limit_process_number": 10,
  "src_path": "main.c",
  "compile_cmd": "gcc main.c -o main",
  "exe_path": "main",
  "argv": ["main", null],
  "envp": ["PATH=/bin:/usr/bin", null],
  "input_path": "in.txt",
  "output_path": "out.txt",
  "error_path": "/dev/null",
  "ans_path": "ans.txt"
}.to_json
s.puts task_json
s
s.closed?
s.puts task_json
s
s = TCPSocket.open(hostname, port) 
File("example/test.rb")
File.new("example/test.rb")
f=File.new("example/test.rb")
f.absluto
f.absolute_path
f
f.dirname
Pathname.getwd
File.rm
Dir.dir?
Dir.exist? "asd"
Dir.exist? "src"
Dir.exists? "src"
"asdas.asd.asd.asd".split ","
"asdas.asd.asd.asd".split "."
"asdas.asd.asd.asd".split "."require "iniparse"
require "iniparse"
s="[Meta]"
name = c
display_name = C
description = GNU C with std90
[File]
src = main.c
out = main
[Compiler]
cmd = /usr/bin/gcc -std=c90 -o $out $src
[Runner]
cmd = ./$out
argv = [NULL]
Dir.getwd
Dir.chdir ".."
Dir.getwd
Dir.chdir "conf/languages"
Dir.getwd
p=Iniparse.parse(File.read "Ec")
p=IniParse.parse(File.read "Ec")
p["Meta"]
p["Runner"]
p["Runner"]["envp"]
list(p["Runner"]["envp"])
list()
array(p["Runner"]["envp"])
Array(p["Runner"]["envp"])
Array.parse
require "json"
JSON.parse p["Runner"]["envp"]
p["Runner"]["envp"]
p=IniParse.parse(File.read "Ec")
JSON.parse p["Runner"]["envp"]
[].to_json
["asd"].to_json
["asd",nill].to_json
["asd",nil].to_json
[]<<[]
[]+[]
[1]+[]
[1]+[12,3,5]<<5
Dir("submit")
Dir.new("submit")
Dir.new("submit").each_entry do |e| puts e end
File.read "submit/README"
puts :asdasd
HOST = 'localhost'
PORT = 7000
sock = TCPSocket.new HOST, PORT
require 'socket'
sock = TCPSocket.new HOST, PORT
sock.puts "asd"
sock = TCPSocket.new HOST, PORT
sock.fflush
sock.flush
sock.ioflush
sock.iflush
sock.oflush
system ls
system 'ls'
system 'sleep 2'
system 'ls /asd'
Dir.mkdir "asd"
nil.nil?
nil.empty?
[]+nil
[1,2]+nil
[1,2]<<nil
[1,nil]
a=1
[a,nil]
"sd".gsub ?a, ?4
s='["$src"]'
s
s.gsub('$out', "oooo")
s.gsub('$out', nil)
JOSN.parse "asd"
JSON.parse "asd"
require "json"
JSON.parse "asd"
getpid
pid
Process.ths
Process
Process.pid
require 'json'
require 'socket'
require 'pathname'
HOST = 'localhost'
PORT = 7000
task_json = {
  limit_time_cpu: 1000,
  limit_time_real: 3000,
  limit_memory: 512 * 1024,
  limit_output: 4 * 1024,
  limit_stack: 1 * 1024,
  limit_process_number: 10,
  work_dir: Pathname.getwd,
  src_path: 'main.c',
  compile_cmd: 'gcc -ansi main.c -o main',
  exe_path: "./main",
  argv: ["./main", nil],
  envp: ["PATH=/bin:/usr/bin", nil],
  input_path: "in.txt",
  output_path: "out.txt",
  error_path: "/dev/null",
  ans_path: "ans.txt"
}.to_json
puts task_json
sock = TCPSocket.new HOST, PORT
sock.puts task_json
sock.flush
puts sock.gets
sock.close
sock.setsockopt
help sock.setsockopt
help "sock.setsockopt"
help "sock#setsockopt"
require 'json'
{"limit_time_cpu":1000,"limit_time_real":3000,"limit_memory":524288,"limit_output":4096,"limit_stack":1024,"limit_process_number":10,"work_dir":"/mnt/c/Users/Kahsolt/Desktop/Koj/judge/judged/example","src_path":"main.c","compile_cmd":"gcc -ansi main.c -o main","exe_path":"./main","argv":["./main",null],"envp":["PATH=/bin:/usr/bin",null],"input_path":"/mnt/c/Users/Kahsolt/Desktop/Koj/judge/judged/example/in.txt","output_path":"out.txt","error_path":"/dev/null","ans_path":"/mnt/c/Users/Kahsolt/Desktop/Koj/judge/judged/example/ans.txt"}.to_json.length
null =nil
{"limit_time_cpu":1000,"limit_time_real":3000,"limit_memory":524288,"limit_output":4096,"limit_stack":1024,"limit_process_number":10,"work_dir":"/mnt/c/Users/Kahsolt/Desktop/Koj/judge/judged/example","src_path":"main.c","compile_cmd":"gcc -ansi main.c -o main","exe_path":"./main","argv":["./main",null],"envp":["PATH=/bin:/usr/bin",null],"input_path":"/mnt/c/Users/Kahsolt/Desktop/Koj/judge/judged/example/in.txt","output_path":"out.txt","error_path":"/dev/null","ans_path":"/mnt/c/Users/Kahsolt/Desktop/Koj/judge/judged/example/ans.txt"}.to_json.length
{}.to_json
{}.to_json.length
{asd: 1}.to_json
{:asd=> 1}.to_json
{}.to_json.length
{}.to_json
{:asd=> 1}.to_json
()->puts "asd"
() -> {puts "asd"}
lambda x : x+5
lambda x -> x+5
lambda x do |x| x+5 end
lambda x =>
x+2
lambda{}
lambda{puts "sad"}
p=lambda{puts "sad"}
p
p.call
->()
->{}
->{|d| d+2}
x = lambda {|x,y| x + y}
x = -> {|x,y| x + y}
lambda{|d| d+2}
lambda{|d| d+2}(2)
lambda{|d| d+2}.call(2)
x = ->{puts "Hello Lambda"}
x = -> {|x,y| x + y}
x = ->{|x,y| x + y}
x = ->{puts "asd"}
x
x.call
x.status
x.curry
x.curry 2
x.curry x,y
find
x.itself
x
xx==x.itself
x==x.itself
x===x.itself
x=~x.itself
x.pry
x.yield
x.yield 24
x.info
x.lambda?
1.lambda?
Proc.new
Proc.new {}
Proc.new {}.lambda?
x.to_proc
p=x.to_proc
p
p.lambda?
p.info
x.inf
x.info
p==x
p[1]
p[]
p[:__pry__]
p.__pry__
p.source
p.source_location
p.arity
p.arity 0
lambda{|x| lambda{|y| x+y}}
add=lambda{|x| lambda{|y| x+y}}
add 5, 6
add (5, 6)
add(5, 6)
add
add.class
add.lambda?
add.call
add.call 1
add.call 1, 2
add=lambda{|x| x+lambda{|y| y}}
add.call
add.call 1 
add=lambda{|x| lambda{|y| x+y}}
add.call 1.call 2
add.call(1).call(2)
add.curry
add.curry(1)
add.curry(1).call(2)
add.curry(1).call(2).call(3)
add.curry(x).call(2).call(3)
add.curry(1).call(2).call(3)
add.arity
sum=add
add.arity
sum.arity
x=5
x.arg
ls
_
__
_dir_
_ex_
_file_
_in_
_out_
_pry_
_pry_.sticky_locals
_pry_.input
Readline
Readline.readline
Readline.redisplay
Readline.readline
Readline.redisplay
pp
p
pp 
pp 5
require redis
require 'redis'
r=Redis.new
r.client
r.pttl
r.ping
r.list
r.keys
r.get["meyset"]
r.get "meyset"
r.get 13
r.set 13 , 13
r.get 13
r.get 54
r.get "1378"
r.get "13"
r.scan
r.scan "31"
r.scan "13"
r.scan "s"
r.scan ""
require 'redis'
r=Redis.new
r.get 12
r.get "12"
r.get 12
ls
r
r.method
r.methods
r.ttl
r.ttl 1
r.ttl 10
r.ttl "myset"
r.ttl "mysetas"
UUID
require "uuid"
SecureRandom.uuid
f=File.read("time.log")
l=f.split
l.map{|e|e.to_f}
l.sort
l.max
l.min
l.sum
l.map!{|e|e.to_f}
l.sum
Array
Array.sum
l.ma
l.max
l.min
l.avg
sum=0
l.map{|e|sum+=e}
sum
sum/1000
l
l.sort!
l.max
sum=0
l.each{|e| sum+=e }
sum
sum/1000
l.min
l.max
data=File.read("ping,data")
data=File.read("ping.data")
data.length
ls = data.split 
l= data.split 
l= data.split "\n"
//
/\d*ms/
r=/\d*ms/
r ~ data
r ~= data
r =~ data
r=/\d*ms/
data=File.read("ping.data")
l=data.split
l=data.split "\n"
l=[]
l[1]
l[2]
l
l=data.split "\n"
l[0]
l[4]
l[3]
l[2]
l[2]["ms"]
l[2]["asds"]
nl=[]
nl=nil
s
l.map!{|ln| ln=nil unless ln["ms"]}
l=data.split "\n"
l.map{|ln| ln=nil unless ln["ms"]}
l.map{|ln| ln=nil if ln["ms"]}
l.map{|ln| puts ln}
l.map{|ln| puts ln["ms"]}
l.map{|ln| ln=nil if ln["ms"]!="ms"}
l.map{|ln| if ln["ms"]!="ms" then ln=nil end}
l.map{|ln| if ln["ms"]=="ms" then ln=nil end}
nl=l.map{|ln| if ln["ms"]!="ms" then ln=nil end}
nl
l.select{|ln| ln["ms"]}
nl=l.select{|ln| ln["ms"]}
l=nil
data=nil
ls
data=nil
r
nl
nl[1] =~ r
r
reg
Regexp.match
Regexp.gsuh
r.gsub
r.sub
r
r=/(\d*)ms/
nl[1] =~ r
nl
l=nl
nl=nil
l
l.map! {|l| l.chomp}
l.map! {|l| l.replace!("最短 =", '')}
l.map! {|l| l.replace("最短 =", '')}
l.map! {|l| l.sub("最短 =", '')}
l.map! {|l| l.sub("最长 =", '').sub("，平均 =", "")}
l.map! {|l| l.sub("，", "")}
l.map! {|l| l.sub("ms", "")}
l.map! {|l| l.gsub("ms", "")}
l.map! {|l| l.sub(" ", "")}
fp=fopen("ping.data.clean","w")
fp=open("ping.data.clean","w")
for line in l do
  fp.puts l
end
for line in l do
  fp.puts line
end
fp.close
fp=open("ping.data.clean","w")
fp.write l
fp.flush
fp.clo
fp.close
fp=open("ping.data.clean","w")
for i in l do
  fp.puts i
end
fp.flush
fp.close
d=File.read("data")
l=d.split
l=d.split("\n")
l.map!{|line| line.split}
l.select{|line| line[1].to_i}
l.select!{|line| line[1].to_i}
l
l[1]
l[2]
l.map! {|line| line=line[1]}
l.map! {|line| line.to_i}
l.reduce {|i| :+}
l.reduce  :+
974/292.0
ls
`ls
`
system ls
system "ls"
passed = File.read("time_passed.txt").to_i
"passed " << passed
`ls`
d=Dir('.')
d=Dir.new('.')
d.entries
d.each_entry do |entry|
  next if %[. ..].index entry
"asd".toupper
"asd".upper
"asd".to_upper
"asdsad".upcase
"asd".chop
"asd".chomp
"asd".chomp "sd"
"2017323122438_22".length"
"2017323122438_22".length
l=File.read "bin.list"
l.split("\n")
l.split!("\n")
l=l.split("\n")
l.each {|e| system "rm -r #{e}"}
l.each {|e| system "rm -r \"#{e}\""}
l=File.read "list"
l=l.split("\n")
l.each {|e| system "rm -r \"#{e}\""}
q
l=File.read "namelist"
l=File.read "namelist.txt"
l=l.split("\n")
l.map! {|e| e.chop!}
l
l.map!{|e|e.split "\t"}
d={}
l.each{|e|
  if d[e[2]] then
{"asd"=>5}
{"asd":5}
    d[e[2]].push {e[0]=>e[1]}
  else
    d[e[2]] = []
    d[e[2]].push {e[0]=>e[1]}
  end
}
d={}
l.each{ |e|
d={"asd":5}
d.name
d.asd
d["asd"]
d["aasd"]
d
d[:asd]
  if d[e[2]] then
    d[e[2]][e[0]]=e[1]
  else
    d[e[2]]={}
    d[e[2]][e[0]]=e[1]
  end
}
d
open("classes","w").puts(d.to_json)
fp=open("classes","w")
fp.pus d.to_json
fp.puts d.to_json
d.to_json
fp.flush
fp.close
fp=nil
d
d.flatten.length
d.flatten.flatten.length
d.flatten
d.keys
Dir.getwd
Dir.mkdir Ar
Dir.mkdir 'Ar'
Dir.chdir "Ar"
d.each_key {|k| Dir.mkdir k}
"_2017323122438_22".length"
"_2017323122438_22".length
f="75211101_江胤霖_Ex1_2017323122438_22"
id,name,work=f.split("_")
id
name
work
id2cls={}
d
d.each_key do|k|
  k.each_key do |id|
    id2cls[id]=k
  end
end
d.each_key do|k|
  d[k].each_key do|k|
    id2cls[id]=k
  end
end
m=id2cls
m
d.each_key do|cls|
  d[cls].each_key do|id|
    m[id]=cls
  end
end
m
m.count
mj=m.to_json
fp=open("m","w")
fp.puts mj
fp.flush
fp.close
mj=nil
l
ls
d
d.each_entry do |e|
Dir.getwd
d.each_entry do |e|
  d[e].each_entry do |id|
    system "mkdir #{e}/id_d[e][id]"
  end
end
d.each_key do |e|
  d.each_key do |e|
    system "mkdir #{e}/id_d[e][id]"
  end
end
system "mkdir #{e}/#{id}_#{d[e][id]}"
d.each_key do |e|
  d[e].each_key do |id|
    system "mkdir #{e}/#{id}_#{d[e][id]}"
  end
end
l=File.read"list"
l=l.split "\n"
l.map {|e| Kernel.`"rm \"{e}\"`}
}
l.map {|e| system "rm \"#{e}\" }
l.map{|e| system "rm \"#{e}\" }
l.map{|e| system "rm \"#{e}\"" }
quit
l=File.read"list"
l=l.split "\n"
l.map{|e| system "rm \"#{e}\"" }
q
ls = File.read "namelist.txt"
l = File.read "namelist.txt"
l.map! {|e| e.chomp("\n").chomp("\r").split("\t")}
l = File.read("namelist.txt").sqlit "\n"
l = File.read("namelist.txt").split "\n"
l.map! {|e| e.chomp("\r").split("\t")}
[1,2,3].index 2
[1,2,3].index 8
d=Dir.new(?.)
d
d.entries
d.each_entry |e| do
d.each_entry do |e|
  system "rm #{e}" if File.file? e+".c"
end
d=Dir.new(?.)
d
d.entries
d.each_entry do |e|
  system "rm #{e}" if File.file? e+".cpp"
end
d.entries
d.entries do|e|
  system "mv #{e} #{e[5..e.length]}" if e.start_with? 'class'
end
d=Dir.new(?.)
d.entries
d.entries do|e|
  puts e if e.start_with? 'class'
end
d.entries do|e|
  puts e 
end
d.each_entry do|e|
  system "mv #{e} #{e[5..e.length]}" if e.start_with? 'class'
end
1.2.to_i
1.2.5.to_i
[1,3,5].shuufle
[1,3,5].shuffle
%d[0 0 1]
%w[0 0 1]
%D[0 0 1]
%s[0 0 1]
rand
rand 3
0.upto 2 {puts "a"}
0.upto 2 { |e| puts "a" }
0.upto(2) { |e| puts "a" }
0.upto(2) { puts "a" }
1/3
ARGV
ARGV[0]
ARGV[0].to_i
require 'socket'
s=Socket.new
s=Socket.open 'www.baidu.com', 80
s=Socket.open '127.0.0.1', 80
help(Socket.open)
help(Socket)
ri
ri Socket
ri Socket#open
Socket.new Socket.PF_INET
Socket.constants
TCPServer.new
s=TCPServer.new 8000
s.start
s.stat
s.close
s
loop do
  c=s.accept
  c.puts Time.now.ctime
  c.close
end
s=TCPServer.new 8000
loop do
  c=s.accept
  c.puts Time.now.ctime
  c.close
end
s.close
require 'lzma'
require 'LZMA'
require 'zip'
require 'bzip'
require 'bzip2'
require 'br2'
require 'bz2'
require 'gzip'
s=TCPSocket.open 'www.baidu.com', 80
while l=s.gets do
  puts l
end
=BEGIN
asd
==BEGIN
=begi
=begin
asdsad
=end
10.map {1}
Array(10).map {1}
Array(10).each {1}
Array(10) do {|e| e= 10}
Array(10) {|e| e= 10}
Array(1) { |e| e= 10}
Array { |e| e= 10}
Array 10 { |e| e= 10}
Array 10 do |e| e = 10 end
help('Array')
help(Array)
Array.new
Array.new 10 do |e| e= 5 end
Random
Random.rand
Random.rand > 0
Random.rand > 0.5
Random.rand 
true == 1
true.eql >1
true.eql? 1
true.equal? 1
[1,2,3,6].sum
Array.sum
[1,2,3,6].reduce :+
[false].reduce :+
[false,true].reduce :+
[false,true].reduce :&&
[false,true].reduce :&
[false,true].count
[false,true].count {|e| e}
[false,true].count {|e| e==false}
[false,true].count {|e| e==true}
false ^ true
[false,true].reduce :|
[false,true].reduce :&
[false,false].reduce :&
[false,false].reduce :|
100/2
50/2
25/2
25\5
25\\5
25/5
25/5.0
ARGF
ARGV
ARGV.length
!0
!5
!true
!false
[1,2,3].each {|e|e=5}
[1,2,3].map {|e|e=5}
[1,2,3].map! {|e|e=5}
votes = Array.new n { |e| e = Random.rand < 0.5}
n=10
votes = Array.new n { |e| e = Random.rand < 0.5}
votes = Array.new (n) { |e| e = Random.rand < 0.5}
sleep 5
n=3
votes = Array.new(n) { |e| e = Random.rand < 0.5 }
votes.reduce :&
votes.reduce :|
majority = votes.count { |e| e } * 2 > n
votes
votes = Array.new(n) { |e| e = Random.rand < 0.5 }
puts votes
print votes
require 'pp'
require 'pprint'
pp 'asd'
!nil
!true
!false
n=3
votes = Array.new(n) { |e| e = Random.rand < 0.5 }
votes
votes.reduce :& || !(votes.reduce :|)
maj = votes.count { |e| e == true } * 2 >= n
votes.map { |e| e = !e if (e == maj && Random.rand >= p || e != maj && Random.rand < p) }
p=0.95
votes.map { |e| e = !e if (e == maj && Random.rand >= p || e != maj && Random.rand < p) }
rand
rand == Random.rand
rand 5
rand 
SecureRandom.random_
SecureRandom.random_number
R = SecureRandom.random_number
R
R &= SecureRandom.random_number
R =& SecureRandom.random_number
alias R = SecureRandom.random_number
alias R SecureRandom.random_number
alias :R :SecureRandom.random_number
alias :R :"SecureRandom.random_number"
alias :R :"random_number"
a = :SecureRandom.random_number
"SecureRandom.random_number".send
"SecureRandom".send "random_number"
SecureRandom.send "random_number"
'asd' + 4
'asd'<< 4
'asd'< 4
'asd' .. 4
puts asd', 4
puts 'asd', 4
pp "asd", 5
votes=[false, false, false, false, false, false, false, false, false, false]
!(votes.reduce :|)
votes.reduce :& || !(votes.reduce :|)
(votes.reduce :&) || !(votes.reduce :|)
[1,2,3].map{|e|5}
[1,2,3].map!{|e|5}
BEGIN do puts "asd" end
BEGIN { puts "asd" }
END { puts "asdasdfsvd" }
BEGIN { puts "asd64654" }
Thread
Thread.new
100
"100"
p "01\t"
puts "01\t"
pp "01\t"
puts '01\t'
Array
Hash
h={'a':5}
h['a']
h[:a]
Array()
Array(0)
Array(5)
Array(5,5)
Array(5)
a=Array(5)
a=Array(-500)
Array.new
Array.new 500
Array.new 5
Array.new(5,5)
Array.new(5,1)
Array.new 5,1
Array.new {|e| rand}
Array.new {|e| e=rand}
Array.new 5 {|e| e=rand}
Array.new (5) {|e| e=rand}
Array.new (5) {|e| rand}
Array.new (5) {rand}
Array.new (5) do rand end
Hash
Hash.new
Hash.new 5
Hash.new 5,56
Hash.new 8
Hash.new(5)
Hash.new([2,8,3])
h=Hash.new([2,8,3])
h[2]
h[5]
h[99]
h=Hash.new(0)
h[5]
h[6545]
h['asd']
h[55]
h[55]=5
h['asd']=5
h['asd']=50
h[55]
h['55']
a
a=[]
a[5]
a[5]=6
a
a[500]=6
a
a.size
a=[]
a[10]
a[10]=10
a.size
a=Array(5)
a
a[10]=9
a
Array([1,2,65])
Array({1,2,5})
Array({'1':5,'2':5})
Array({k:'v'})
in
h['a']
a={}
del a
rm a
a
a=nil
a
c
v
d
h={}
h[2]
h['a']
h['k']=5
h['k']
h["k]
h[:k]
h['k']==5 and h[:k]==nil
h[:k]=2
h['k']==5 and h[:k]==nil
h['k']
h[:k]
h[1]
h[1]=5
h[1]
h[:1]
h[:"1"]
h[:"1"]=9
h[:"1"]
h[:1]
h[1]
and
h[1] = 2, h[:'1'] = 4
h[1] = 2 and h[:'1'] = 4
h[1] = 2 && h[:'1'] = 4
(h[1] = 2, h[:'1'] = 4)
()
a=5
o=Object
o=Object.new
o
h[o]=5
h[o]
5+6i
5+6j
5+6.5i
{str: 4, :sym => 2}
{str: 4, sym: 2}
h={str: 4, sym: 2}
h[:str]
h['str']
h={'str': 4, 'sym': 2}
h['str']
h['sym']
{'str': 2, sym1: 3, :sym2 => 3}
p "asd" if nil
p "asd" if 5
/r/=~'rascr'
/r/=~'ascr'
~'ascr'=~/r/
nil=5
true=5
undef a
undef h
__F
unless false then p "asd" end
'A'..'Z'
2333 =='2333'
2333 ==='2333'
nil===Object
__id__
__id__(5)
1.__id__
1.object_id
1.object_id.self
1.object_id.itself
1.object_id?
Kernel.`
lambda x:x+1
lambda(x)
lambda do end
a=lambda do end
a
a.is_a? Object
a.is_a? BasicObject
Dat
Date
Random
a.is_a? Random
Random.new
for i in 1..3 do p i end
undo
File::is_a? Object
File::file? 'asd'
ls
File::file? 'a'
ls()
dir
_dir_
123.to_s
def p(m) puts m end
p
undef p
p "sad"
p ==p
p ==pp
p=pp
def h(m) puts m end
h"asd"
block_given?
def wrap
  puts "fire!"
  yield
  puts "home.."
end
wrap do
  puts "do something"
end
def f(*args)
  args.each {|e| puts e}
end
f(1,5,9,7,5,3)
def f(a,*mid,z)
  puts a, mid, z
end
f(1,2,3,4,5)
f(1,2)
def f(*args)
  args.each {|e| p e}
end
f(1,5,9,7,5,3)
def f(a,*mid,z)
  p a, mid, z
end
f(1,2,3,4,5)
f(1,2)
p=pp
def f(*args)
  args.each {|e| p e}
end
f(1,5,9,7,5,3)
def f(a,*mid,z)
  p a, mid, z
end
f(1,2,3,4,5)
def f(*args)
  args.each {|e| p e}
end
f(1,5,9,7,5,3)
def f(a,*mid,z)
  p a, mid, z
end
f(1,2,3,4,5)
f(1,2)
def f(name: 'kahsolt', height: 174)
  p name, height
end
f(height: 137, name: 'luper')
f(
)
VERSION
Vesionr
require 'requests'
Net::HTTP
require 'net'
require 'http'
require 'nte'
require 'net'
require 'net/http'
Net::HTTP
Net::HTTP.get
Net::HTTP.get 'http://www.baidu.com'
a
a=nil
a or=5
a |=5
a ||=5
a
a=5
a ||=10
a
a |=10
a
a?:5
def p end
def p; end
%
54
a=b=c=5
a
b
c
[" "]*5
l=[" "]*5
l<<5
l<<"asd"
l.delete ' '
l
ls
chdir
cd
ls
cd 
cd 'asd'
ls
exit
RUBY_ENGINE
RUBY_COPYRIGHT
RUBY_PLATFORM
RUBY
LC_ALL
def giveme
  if block_given?
    yield
  else
    puts "No block given"
  end
  puts "bye~"
end
giveme
giveme { puts "five" }
{"asd"=>5}
{"asd":5}
{:asd=>5}
{"asd":5, "asd":82}
{"asd":5, "asds":82}
{"asd":5, "asds"=>82}
{'sym0': 2, sym1: 3, :sym2 => 3, 'str' => 3}
def h
  puts self
end
h
h 5
def h
  puts self.class
end
h
h.class
a.type
type a
h.type
type h
1<=>5
1<=>9
1<=>-5
:a <=> :sd
%w[Ruby C Perl Python].sort {|a, b| a.length <=> b.length}
%w[Ruby C Perl Python].sort { |a, b| a.length <=> b.length }
%w[Ruby C Perl Python].sort_y { |e| e.length }
%w[Ruby C Perl Python].sort_by { |e| e.length }
Array
Array.method
Array.methods
Array.h
Array.self_methods
Array[]
Array[5]
def sum(data)
  res = 0
  data.each do |e|
    res += block_given? && e || yield(e)
  end
  res
end
sum [1, 2, 3]
sum [1, 2, 3] { |e| e ** 2 }
def sum(data)
  res = 0
  data.each do |e|
    res += block_given? and e or yield(e)
  end
  res
end
sum [1, 2, 3]
sum [1, 2, 3] { |e| e ** 2 }
puts "asd" if 1 else 2
def sum(data)
  res = 0
  data.each do |e|
    res += (block_given? and e or yield(e))
  end
  res
end
sum [1, 2, 3]
sum [1, 2, 3] { |e| e ** 2 }
def sum(data)
  res = 0
  data.each do |e|
    res += block_given? && yield(e) || e
  end
  res
end
sum [1, 2, 3]
sum [1, 2, 3] { |e| e ** 2 }
def giveme
  yield 1, 2, 3
end
giveme do |one|
  p one
end
giveme do |*all|
  p all
end
sum [1, 2, 3] do |e|
  if e % 2 == 0 then
    next 2
  elsif e % 3 == 0 then
    break 3
  end
end
sum [1, 2, 3, 4, 5] do |e|
  if e % 2 == 0 then
    next 2
  elsif e % 3 == 0 then
    break 3
  end
end
(lambda { |name| puts "Hello " << name }).call "Kahsolt!"
lambda { |name| puts "Hello " << name }.call "Kahsolt!"
def exec_block
  yield
end
exec_block { puts "Get block, yield to execute." }
def exec_proc(&proc)
  p proc
  yield
end
exec_proc { puts "Get block in parameter, convert to proc, yield to execute." }
p 1,2
p [1,2]
glob = 0
loc = 0
[1, 2, 3].each do |e; loc|
  glob = e
  loc = e
  p [glob, loc]
end
p [glob, loc]
a,b=5/9
a,b=9/5
a
b
<
include Comparable
<
:<
1<5
self
main
self.pack
5.prime?
a=5
a.prime?
def Integer.prime?
  true
end
5.prime?
def Integer:prime?
def Integer.prime?
  true
end
5:prime?
a:prime?
class Integer
  def prime?
    true
  end
end
5.prime?
%W[asd asdff sfdv5]
%w[asd asdff sfdv5]
%w[asd asdff sfdv5 64]
%I[asd]
%I[asd 546]
%/654 654 654654654/
%w/654 654 654654654/
%f/654 654 654654654/
%q/654 654 654654654/
%Q/asd/
%Q/asd 54/
%z/asd 54/
%x/asd 54/
%s/asd 54/
%S/asd 54/
%w/asd 54/
%e/asd 54/
%r/asd 54/
%l/asd 54/
%c/asd 54/
%r[654]
%c//
%x//
%s//
%w//
%q//
%Q//
%t//
%f//
%e//
%c//
%v//
%f//
%b//
%g//
%r//
%t//
%g//
%y//
%h//
%n//
%u//
%j//
%m//
%k//
%u//
%i//
%i/5/
%i/5 sdf sdf/
%i/5 sdf sdsfd sdff/
% o//
%o//
%l//
%p//
[2,2]|[3]
[2,2]|[3,5]
[2,2]|[3,5,2]
[2,2]||[3,5,2]
[8]*6
[8]*6[1..2]
([8]*6)[1..2]
([8]*6)[1,2]
([8]*6)[1,2,5..9]
([8]*6)[1,9]
([8]*60)[1,9]
Array.new 50 {rand}
Array.new(50){rand}
Array.new(5){rand}
Array.new 5 do rand end
%i[This is an array with 5 :symbols]
%R
%R//
%r//
%ri//
p <<-MY
  print ok
  leading blank omitted
MY
puts <<-"MY"
  print ok
  leading blank omitted
MY
print(<<'O')
sdadadasd
dafsdf sgfdbx
    agsdhfs
O
print(<<-'O')
 asd 
sad
 asd 
sfdsvd v
O
ord 5
's'.ord
'我'.ord
'我'.ord.to_hx
'我'.ord.to_c
nkf
require 'nfk'
require 'nkf'
NKF
NKF.new
NKF.nkf
{}.to_a
{"asd":5}.to_a
require 'open-uri'
OpenURI.
OpenURI.__binding__
undef sum
undef h
OpenURI.get_class_info
OpenURI.get_class_info 0
OpenURI.class
OpenURI.info
require 'open-uri'
OpenURI.open_http "http://www.baidu.com" do |res|
  p res
end
OpenURI.open_uri "http://www.baidu.com" do |res|
  p res
end
OpenURI.open_uri "http://www.baidu.com" do |res|
  p res.read
end
bs
require 'bs4'
require 'bs'
require 'beautiful-soup'
require 'beautifulsoup'
require 'beautifulsoup4'
require 'beautifulsoup5'
require 'beautiful-soup5'
require 'beautiful-soup'
`ls`
File.stat 'block.rb'
__LOAD__
__LOAD_PATH__
__LOADPATH__
LOADPATH
LOAD_PATH
$:
open("http://cruel.org/freeware/cathedral.html") do |fp|
  p fp.read
end
open("https://cruel.org/freeware/cathedral.html") do |fp|
end
open("https://cruel.org/freeware/cathedral.html") do |fp|
  p fp.read
end
fp
SQLite3
require 'sqlite3'
SQLite3
SQLite3.new
SQLite3.open
SQLite3::Table
SQLite3::Database
SQLite3::Database.open('t.sql') do |db|
  db.execute('create table t (id int);')
end
SQLite3::Database.open('t.sql') do |db|
  db.execute('insert into t values(5),(9),(-1);')
end
SQLite3::Database.open('t.sql') do |db|
  p db.execute('select * from t;')
end
`rm t.sql`
`ls`
Kernel.` ls
Kernel.` 'ls'
system 'ls'
rand 1, 5
rand 5
rand 1..5
[1,2,3].instance_variable
[1,2,3].instance_variables
[1,2,3].instance_variable_set 5
[1,2,3].instance_variable_set 'as', 5
[1,2,3].instance_variable_set 'a', 5
[1,2,3].instance_variable_set :a, 5
[1,2,3].instance_variable_set :@a, 5
[1,2,3].instance_variables
[1,2,3].@a
[1,2,3].self_methods
[1,2,3].methods false
Array.method false
Array.methods false
Class.class
Class.class.class
Object.class
Class.new
c=Class.new
c.new
c.new.new
b=c.new.
b=c.new
b.new
b.class
b.itself
b
b.nil?
b.method
b.methods
b.pretty_print
b.pretty_print 0
b.pretty_print "asd"
b.pry
Class.superclass
Module.superclass
Object.superclass
Object.superclass.super
Object.superclass.superclass
Object.superclass.superclass.super
Object.superclass.superclass.superclass
"s".ancestors
o=Object.new
o.ancestors
1.angle
10.angle
80.angle
0.5.angle
0.5.arg
5.arg
self
module A
  p self
end
class B
  p self
end
def C
  p self
end
lambda do p seff end
lambda do p self end
(lambda do p self end).call
a=(lambda do p self end)
a.call
proc do p self end.call
def C
  def F
    def F
      p self
    end
  end
end
module A
  class B
    def C
      p self
    end
  end
end
class A
  class B
    p self
  end
end
undef A
A
A=nil
class P 
  class Q
    p self
  end
end
class P 
  class Q
    def O
      p self
    end
  end
end
O
P::Q::O
P.new
P.new.O
P::O
P::O.new.O
P::Q.new.O
o=P::Q.new
o.O
o.O()
class H
  def priv
    p self.name
  end
  private :priv
end
h=H.new
h.priv
h.send :priv
h
def f; p "f()"; end
f.name
require 'ghee'
JSON.ancestors
define_method :h do
  p "asd"
end
h
h()
h.class
H
H.class
define_method :h do
  p "asd"
end
h
h()
h.class
display 5
eval 2+6
eval '2+6'
eval '2+6.5'
a=5
def h
  a=100
end
h
a
a=Class.new
a.new
a.new.class
a.new.class.class
Method.new
Method
Method.info
Method[0]
Method.ar
Method::arity
Method:arity
Method.call
Method.new=Module:define_method
Method.new=define_method
Method.new = define_method
->(){p "s"}
->(){p "s"}.call
->()do p "s" end.call
yield 5
proc=5
proc
proc do end
def proc_to_block
  yield
end
proc_to_block &(Proc.new { p "ok" })
@a=5
send p "d"
send p "d" do x end
send :p :d do x end
send :p, 'd' do x end
define_method
load 'closure'
`ls`
load 'closure.rb'
my_scope=nil
undef my_scope
my_scope
my_closure
counter
inc 4
counter
cnt
cat
proc p do
  cnt=0
  define_method :giveme
  do cnt end
proc p do
  cnt=0
  define_method :giveme do
    cnt
  end
  define_method :up do
    cnt+=1
  end
end
p=proc   cnt=0
define_method :giveme do
  cnt
end
define_method :up do
  cnt+=1
end
p = proc do
  cnt=0
  define_method :giveme do
    cnt
  end
  define_method :up do
    cnt+=1
  end
end
givem
giveme
p
p.class
p.call
giveme
up
giveme
up
p.cnt
def closure.a 
  p 's'
end
Module.new
p pm or 'sd'
pm.nil?
pm.defined?
defined 
defined p
defined? l
defined? 5
defined? 5+6
defined? +
defined? ：+
defined? :+
defined? H
defined? O
defined? Object
undef H
[dsf,dsgfd,afsdb,afsbx].each do  p defined? end
[dsf,dsgfd,afsdb,afsbx].each do |e| p defined? e end
defined? 5
defined? o
p defined? o
Data
Data.info
class Foo
  def initialize
    @v = 0
  end
end
bar = Foo.new
bar.instance_eval
bar.instance_eval {@v}
bar.instance_eval {@v=5}
bar.instance_eval {@v}
bar.instance_eval {self}
p bar.instance_eval {self}
class Foo
  def bar
    42
  end
end
Foo.br
Foo.bar
Foo.bar.unbind
Foo.bar.new.unbind
undef Foo
undef :Foo
module Foo
  def bar
    42
  end
end
module Foo
  def bar
    42
  end
end
Foo.bar
class Foo
  def bar
    42
  end
end
m = Foo.instance_method :bar
p m.class
~
class Foo
  def bar
    42
  end
end
m = Foo.instance_method :bar
p m.class
~
class Foo
  def bar
    42
  end
end
m = Foo.instance_method :bar
p Foo.new.bar
p m.class
f=Foo.new
f.bar.class
m = f.instance_method :bar
m = f.method :bar
m.unbind
m
um=m.unbind
um.bind String
"str".methods
class << self
end
__FILE__
$0
class << ""
  class <<self
    class <<self
      p self
    end
  end
end
class << object
  class << self
    class << self
      p self
    end
  end
end
class << Object
  class << self
    class << self
      p self
    end
  end
end
a||=[]
a
[1,2,3].map :+
[1,2,3].map :next
[1,2,3].map &:next
:s.to_proc
p=:s.to_proc
p.call
p=:next.to_proc
p
p.call 5
:next.to_proc.call 4
[1,2,3].map :next.to_proc
'A'.lower
'A'.lowercase
'A'.tolowercase
'A'.lowercase
'A'.downcase
send :next, 
4
send &:next, 4
send
send next, 4
send next 4
send next
send next, 5
next
next 4
send Inetegr.next, 5
send Integer.next, 5
send 4, :next
send :4, :next
proc.obj
proc.obj_name
proc.object_id
lambda.object_id
Kernel.lambda
Kernel.lambda.object_id
Kernel.lambda
lambda
->(){}
->(){p}.call
->(){p 'asd'}.call
->(x){p x}.call 5
NotImplementedError
NotImplementedError.new
NotImplementedError.new "asd"
p '*'*5, "asd"
puts '*'*5, "asd"
puts '*'*5<< "asd"
? 
?5
?\0
?\
0
Iterator
__0
$0
"#"
"#" ^ "asd"
"#" ^ "a"
"a" ^ "#"
'#'.to_i
'#'.chr
'#'.ord
cat 'adapter.rb.encypted'
ls
'a' ^ 5
define
STDOUT
STDOUT.write "asd"
STDOUT
open(1)
$stdout
class Logger
  attr_accessor :level
  ERROR = 1
  WARNING = 2
  INFO = 3
  @@instantce = Logger.new
  def initialize
    @logfp = STDOUT
    @level = WARNING
  end
  def self.instantce
    @@instantce
  end
  def error(msg)
    @logfp.puts '[ERRO] ' + msg
  end
  def warn(msg)
    @logfp.puts '[WARN] ' + msg if @level >= WARNING
  end
  def info(msg)
    @logfp.puts '[INFO]' + msg if @level >= INFO
  end
  private_class_method :new
end
Logger.new
l=Logger.instance
l=Logger.instantce
l.info "asd"
l.level
class Nonsense
  class << self
    class << self
      class << self
        class << self
          class << self
            class << self
              class << self
                p self
              end
            end
          end
        end
      end
    end
  end
end
class Nonsense
  class << self
    class << self
      class << self
        class << self
          class << self
            class << self
              class << self
                p self
              end
            end
          end
        end
      end
    end
  end
end
n = Nonsense.new
n.info
class Nonsense < BasicObject
  class << self
    class << self
      class << self
        class << self
          class << self
            class << self
              class << self
                p self
              end
            end
          end
        end
      end
    end
  end
end
n = Nonsense.new
class Nonsense < BasicObject
  class << self
    class << self
      class << self
        class << self
          class << self
            class << self
              class << self
                p self
              end
            end
          end
        end
      end
    end
  end
end
n = Nonsense.new
n.info
n.methdos
n.methods
n.class
n.objectid
n.object_id
undef Nonsence
undef Nonsense
class Nonsense < Object
  class << self
    class << self
      class << self
        class << self
          class << self
            class << self
              class << self
                p self
              end
            end
          end
        end
      end
    end
  end
end
n = Nonsense.new
n.object_id
n.display
n.class
n.to_json
n.trust
n.trust == n
a = { }
b = {:a => a}
a[:b] = b
a
b
def=5
@def=5
@def
@def.class
def.class
@def.name
@def.names
@def.namespace
k
object
Object
Object.class
Object.superclass
Object.class.class
Object.class.class.class
Object.class.class.superclass
Object.class.class.superclass.superclass
Object.class.class.superclass.superclass.superclass
Object.class.class.superclass.superclass.superclass.superclass
Object.class.class.superclass.superclass.superclass.superclass.superclass
Object.type
Object.class
puts nil
puts "val is #{nil}"
def h(x) puts x end
h
h()
def h(x=nil) puts x end
h()
h(5)
@val=4
@val=nil
@val=nil if @val &&!nil
@val=4
@val=nil if @val &&!nil
@val
@val=5
v=nil
@val = v unless @val && !v
@val
module.class
module.class do end
quit
class1 = Class.new do
  def func(v=nil)
    @val = v unless @val && !v
    puts “@val is #{@val}”
end
""
class1 = Class.new do
  def func(v=nil)
    @val = v unless @val && !v
    puts "@val is #{@val}"
  end
end
class1
class1.new
obj1 = class1.new
class1.ancestors
class1.methods
Class.class
class O end
class A < O end
class A < O ;end
o=Object
o=Object.new
o
o.clone
class1 = Class.new do; end
class1.new
Object.new
Object.new.colone
Object.new.clone
o1=Object.new
ol.class
o1=Object.new
o1.class
o2=o1.clone
o2.class
o2.define_singleton_method do
o2.define_singleton_method "h" do
  puts "asd"
end
:h
h()
o2.class
o2.h
o1.h
o2.class
o2.singleton_class
o1.singleton_class
Object.new.singleton_class
Object.singleton_class
Object.singleton_class==Object
Object.singleton_class.class
Object.singleton_class==Class
Object.singleton_class==object
Object.singleton_class==Object
Object.singleton_class==Class:Object
Object.singleton_class==Class::Object
o1.singleton_class
o1.define_singleton_method :p do; end
o1.singleton_class
o1.p
o1.h
o2
o2.h
o2.p
o
o.define_singleton_method 'p' do; end
o.p
a=o.clone
a.p
a.q
a.o
a.o = 5
a.o=nil
undef a.o
a
a.p
a.q
a.p
undef a.p
del a.p
a.p
a<<class
  undef p
a<<class
  undef :p
a<<self
a>>self
a<<class
  def a do; end
a<<class
  def a() do; end
a<<class
  def a() ; end
a<<class
  def a()
    puts 5
  end
def a() ; end
undef :a
a<<
a
a<<class
  undef :p
a<<self
undef
a.p
undef "a.p"
undef :"a.p"
a
a.p
a<<class
  undef :p
a<<class
  def 
    x
def x()
a<<class
  def x()
    puts 5
  end
x
r=/(?!24)[1-9]\d+/
sleep 0.2
s='0'
while true
  puts r ~= s
while true
  puts r =~ s
  sleep 0.2
  s=s.succ
end
while true
  puts s, r =~ s
  sleep 0.2
  s=s.succ
end
while true
s='0'
while true
  puts "#{s} #{r =~ s}"
  sleep 0.2
  s=s.succ
end
while true
  puts "#{s} #{r =~ s}"
  s=s.succ
  sleep 0.2
end
s="240"
while true
  puts "#{s} #{r =~ s}"
  sleep 0.2
  s=s.succ
end
r=/(?!24)[1-9]\d+/
r=~"0"
r=~"1"
r=~"2"
r=~"3"
r=~"9"
r=~"10"
r=~"11"
r=~"24"
r=~"241"
r=~"2431"
r=~"24315465"
r=~"241"
r=~"240"
r
r=~"24654"
r=~"24000"
r=~"55"
r=~"0"
r=~"1"
r=~"2"
r=~"3"
r=~"4"
r=~"5"
r=~""
r=~"6"
r=~"7"
r=~"8"
r=~""
r=~"9"
r=~"0"
r=~"10"
r=~"4685"
r=~"945"
10.days
require 'active-record'
require 'activerecord'
