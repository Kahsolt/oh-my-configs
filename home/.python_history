import word2vec
m=word2vec.load('chinese.bin')
m.clusters
m.vectors
m.vocab
m.vocab.size
m['的']
m['的'][:10]
m.cosine('得')
m.cosine('的')
model.vectors.shape
m.vectors.shape
model=m
indexes, metrics = model.cosine('socks')
indexes, metrics = model.cosine('的')
indexes
metrics
model.vocab[indexes]
model.generate_response(indexes, metrics).tolist()
import multiprocessing
h(multiprocessing.Pool)
pd
import pandas as pd
data=pd.read_csv('data.csv')
data.groupby('key')
gbo=data.groupby('key')
gbo.size()
gbo.keys
gbo.keys()
gbo.keys
gbo.key
gbo.val
gbo.groups
gbo.groups[1]
gbo.groups[0]
gbo.groups
type(gbo.groups)
gbo.groups['A']
gbo.groups['A'].to_csv
for g in gbo:
  print(dir(g))
for g in gbo:
  print(g.to_csv)
gbo.apply()
gbo.apply(lambda x:print(x))
gbo.apply(lambda x:print(type(x)))
gbo.apply(lambda x:print(dir(x)))
gbo.apply(lambda x: print(x.to))
gbo.apply(lambda x: print(x.to_csv))
pprint
pp
import pprint
FIN = 'data.csv'
GROUP_BY = 'key'
PATH = 'data.out'
data = pd.read_csv(FIN)
gbo = data.groupby(GROUP_BY)
import pandas as ps
import pandas as pd
data = pd.read_csv(FIN)
gbo = data.groupby(GROUP_BY)
del ps
gbo.apply(lambda x: print(dir(x)))
gbo[0]
gbo.groups
gbo.get_group(0)
gbo.get_group()
gbo.get_group('A')
type(gbo.get_group('A'))
g=gbo.get_group('A')
g.keys()
g.
ls
gbo.groups
gbo.groups.keys
gbo.groups.keys()
gbo.keys
gbo.val
gbo.key
gbo.key.head()
gbo.id
gbo.indices
gbo.groups
type(gbo.groups)
gbo.groups
g.keys()
g
g.name
g.name()
gbo.apply(lambda x: print(x.name))
gbo.apply(lambda x: print(type(x)))
gbo.apply(lambda x: print(x.name))
ls
import multiprocess as mproc
import pandas as pd
FIN = 'data.csv'
GROUP_BY = 'key'
data = pd.read_csv(FIN)
gbo = data.groupby(GROUP_BY)
gbo.groups
len(gbo.groups)
gbo.apply(lambda x: print(x.name))
gbo.apply(lambda x: print(x.size()))
gbo.apply(lambda x: print(x.size))
gbo.apply(lambda x: print(x.shape))
gbo.apply(lambda x: print(x))
data
gbo
gbo.apply(lambda x: print(x.to_csv))
gbo.apply(lambda x: help(x.to_csv))
mproc.Process
h(mproc.Process)
gbo.groups
gbo.groups['B']
type(gbo.groups['B'])
h(gbo.groups)
h(gbo.groups['B'])
h(gbo.get_group)
gbo.get_group('A')
gbo.get_group('H')
gbo.get_group('C')
gbo.keys
gbo.key
gbo.groups
gbo.groups.keys
gbo.groups.keys()
gbo.groups.keys()['A']
gbo.groups.keys()
for k in gbo.groups.keys():
  print(k)
gbo.get_group('A')
gp=gbo.get_group('A')
gp.name
gp.to_csv()
gp.to_csv('A')
gp.to_csv('A', index=False)
gp.to_csv(index=False)
gp.to_csv()
gp.to_csv('A')
{asd:5}
p=mproc.Pool()
h(p.apply_async)
from collections import namedtuple
namedtuple(index=True)
t=namedtuple()
t=namedtuple('TaskArgs', ['name','index'])
from collections import namedtuple
t=namedtuple('TaskArgs', ['name','index'])
t
t(wat)
t(name='asd')
t(name='asd', index='asd')
p
import multiprocessing
p=multiprocessing.Pool()
h(p.apply_async)
import multiprocess as mproc
import pandas as pd
from collections import namedtuple
FIN = 'data.csv'
GROUP_BY = 'key'
data = pd.read_csv(FIN)
gbo = data.groupby(GROUP_BY)
Work = nametuple('Work', ['func', 'name'])
Work = namedtuple('Work', ['func', 'name'])
Work
import os
import socket
import sys
h(sys.exit)
ls
!ls
h(socket.socket)
h(socket.socket.bind)
h(socket.socket.listen()
h(socket.socket.listen)
h(os.fork)
time
time.localtime()
time.localtime(time.time())
print(1,5,6)
print(1,5,556,"asd")
print(1,asdsa5,556,"asd")
print(1,'asdsa5',556,"asd")
print(1,'asdsa5',556,"asd", seperator='\t')
print(1,'asdsa5',556,"asd", delimitor='\t')
print(1,'asdsa5',556,"asd", delimiter='\t')
exit()
import mnist_loader
training_data, validation_data, test_data = mnist_loader.load_data_wrapper()
training_data
training_data=list(training_data)
training_data
training_data[0]
training_data[0].shape
import network
net = network.Network([784, 30, 10])
net.SGD(training_data, 30, 10, 3.0, test_data=test_data)
import network2
network2.CrossEntropyCost
net.SGD
hnet.SGD
h(net.SGD)
training_data[0][0]
training_data[0][0].shape
training_data[0][1].shape
training_data[0][1]
import random
random.randrange(5)
random.randrange(100)
h(random.randrange)
h(random.randint)
h(random.randrange)
max([1,2,5,9,6,3])
range(5)
range(5,9)
def h():
  print("asdasd")
h()
a=h()
a
v
a
a is None
print(None)
print(a)
None
'ad '? 'asd':None
1/5
a+=5
scipy
import scipy
ls(scipy)
dir(scipy)
scipy.number(
5)
scipy.number()
scipy.number
h(scipy.number)
locals()
global
global()
globals()
__package__
__build_class__(
__builtins__
__builtins__.min(1,2,5)
__builtins__.True
__builtins__.True == True
l
ls
scipy.stats
import scipy.stats
import matplot.pyplot as plt
import numpy as np
from scipy import binom, poisson
from scipy.stat import binom, poisson
from scipy.stats import binom, poisson
fig, ax = plt.subplots(1,1)
print('平均值, 方差, 偏度, 峰度')
# Binom
mean,var,skew,kurt = binom.stats(n, p, moments='mvsk')
print(mean,var,skew,kurt)
x = np.arange(binom.ppf(0.01, n, p),binom.ppf(0.99, n, p))
p1, = ax.plot(x, binom.pmf(x, n, p),'b*',label = 'binom')
n = 1000
p = 0.1
mean,var,skew,kurt = binom.stats(n, p, moments='mvsk')
print(mean,var,skew,kurt)
x = np.arange(binom.ppf(0.01, n, p),binom.ppf(0.99, n, p))
p1, = ax.plot(x, binom.pmf(x, n, p),'b*',label = 'binom')
# Poisson
mu = n * p
mean,var,skew,kurt = poisson.stats(mu, moments='mvsk')
print(mean,var,skew,kurt)
x = np.arange(poisson.ppf(0.01, mu),poisson.ppf(0.99, mu))
p2, = ax.plot(x, poisson.pmf(x, mu),'ro',label = 'poisson')
plt.legend(handles = [p1, p2])
plt.title(u'对比')
plt.show()
l
ls
from scipy.stats import poisson
h(poisson.ppf)
h(poisson.cdf)
h(poisson.pdf)
h(poisson.cdf)
h(poisson)
poisson(
5)
p5=poisson(5)
p5
p5.cdf
p5.cdf()
p5.cdf(1)
p5.cdf(5)
from scipy.stats import *
import scipy.stats as ss
h(ss.alpha)
ss.mvn
h(ss.mvn)
(ss.norm)
h(ss.norm)
h(ss.binorm)
ss.binom
ss.binom.a
ss.binom.b
ss.binom.isf
ss.binom.isf()
ss.binom.isf(5)
ss.binom.isf(5,100,0.5)
ss.binom()
[ss.binom(100, 0.1*x) for x in range(1,9)]
b=[ss.binom(100, 0.1*x) for x in range(1,9)]
len(b)
b=[ss.binom(100, 0.1*x) for x in range(1,10)]
len(b)
x=range(0,100)
b[0].cdf(x)
plt.plot(x,b[0].cdf(x))
plt.show
plt.show()
plt.plot(x,b[0].cdf(x))for i
for i in range(1,10):
  plt.plot(x,b[i].cdf(x))
plt.show()
for i in range(1,9):
  plt.plot(x,b[i].pmf(x))
plt.show()
  plt.plot(x,b[i].cdf(x))ti
import scipy.stats as ss
sst.norm
sst.norm()
sst.binom()
sst.binom
sst.binom.a
sst.binom.badvalue
sst.binom.cdf
sst.binom.cdf(
)
h(sst.binom.cdf)
sst.binom.cdf(5)
sst.binom.cdf(5,10, 0.25)
sst.binom.cdf(1, 10, 0.25)
sst.binom.cdf(2, 10, 0.25)
sst.binom.cdf(100, 10, 0.25)
sst.binom.cdf(1000, 10, 0.25)
sst.binom.cdf(10, 10, 0.25)
sst.binom.cdf(9, 10, 0.25)
sst.binom.cdf(4, 10, 0.25)
sst.binom.cdf([1,5,9,6], 10, 0.25)
sst.binom.cdf([1,5,9,6], 1, 0.25)
sst.binom.cdf([1,5,9,6], 100, 0.25)
b=[sst.binom(10*x, 0.25) for x in range(10)]
for _ in range(10):
  plt.plot(range(50), b[_].cdf(range(50)))
plt.show()
plt.subplot()
ax=plt.subplot()
ax
a
Axes
plt.show()x=range(50)
x=range(50)
for _ in range(10):
  plt.plot(x, b[_].pmf(x))
plt.show()
x=range(-10,50)
for _ in range(10):
  plt.plot(x, b[_].pmf(x))
plt.show()
ls
sst.binom.cdf(9, 10, 0.25)s
b=[sst.poisson(x) for x in range(10)]
for _ in range(10):
  plt.plot(x, b[_].pmf(x))
plt.show()
n=sst.norm()
x=[0.1*x for x in range(-50,50)]
plt.plot(x, n.pmf())
plt.plot(x, n.pmf(x))
plt.plot(x, n.cdf(x))
plt.show()
plt.plot(x, n.pmf(x))
n.pmf()
n.pmf(1)
n.pdf()
n.pdf(x)
h(n.pdf)
sst.poisson(50).pdf
sst.poisson(50).pdf()
sst.poisson(50).pdf(5)
plt.plot(x, n.pdf(x))
plt.show()
plt
plt.sci
h(plt.sci)
sst.expon(50)
e=sst.expon(50)
plt.plot(x, e.pdf(x))
plt.show()
e=sst.expon(10)
x=[0.1*x for x in range(-10, 100)]
plt.plot(x, e.pdf(x))
plt.show()
e
h(sst.expon)
h(sst.exponnorm)
e=sst.expon
e=sst.expon(10)
e
e.pdf
e.pdf()
e.pdf(1)
e.pdf(5)
e.pdf(100)
e.pdf(100)
x=[0.1*x for x in range(-100, 5000)]
plt.plot(x, e.pdf(x))
plt.show()
x=[0.1*x for x in range(-10, 500)]
plt.plot(x, e.pdf(x))
plt.show()
e=sst.expon(1)
x=[0.1*x for x in range(-10, 500)]
plt.plot(x, e.pdf(x))
plt.show()
e=[sst.expon(x) for x in range(10)]
for i in e:
  plot(x, i.pdf(x))
for i in e:
  plt.plot(x, i.pdf(x))
plt.show()
for i in e:
  plt.plot(x, i.cdf(x))
plt.show()
for i in e:e=sst
e=sst.expon(10)
plt.plot(x, e.pdf(x))
plt.show()
x
e.ppf(0.1)
e.ppf(0.99)
x=np.linspace(e.ppf(0.01), e.ppf(0.99), 100)
plt.plot(x, e.pdf(x))
plt.show()
fig,ax = plt.subplots(1,1)
fig
ax
fig,ax = plt.subplots(2,2)
fig
ax
ax[0]
ax[0][0]
ax[0][0].plot
ax[0][0].plot(x, e.pdf(x))
ax[0][1].plot(x, e.ppf(x))
ax[1][0].plot(x, e.pmf(x))
ax[1][0].plot(x, e.cdf(x))
plt.show()
fig.show()
fig
fig.show()
fig.plot
def exp_pdf(lmbd):
  return lambda x: lmbd*math.e**(-lmbd*x)
e1=exp_pdf(1)
e1(2)
e1(10)
e=[exp_pdf(x) for i in range(10)]
e
for i in e:
  x=[0.1*x for x in range(100)]
  y=[e(i) for i in x]
  plt.plot(x,y)
for i in e:
  x=[0.1*x for x in range(100)]
  y=[i(x) for x in i]
  plt.plot(x,y)
for i in e:
  x=[0.1*x for x in range(100)]
  y=[i(_x) for _x in x]
  plt.plot(x,y)
fig.show()
plt.show()
ls
f=lambda x: 1/(math.pi)/(1+x**2)
x=[0.1*x for x in range(-200,200)]
y=[f(_x) for _x in x]
x
y
plt.plot(x,y)
plt.show()
plt.subplot(2,1)
plt.subplots(2,1)
fig,ax = plt.subplots(2,1)
ax[0]
ax[1]
ax[2]
ax[0].plot(x,y)
g=lambda y: 2/math.pi/(4+y**2)
x
z=[g(_x) for _x in x]
ax[1].plot(x,z)
plt.show()
plt.close()
plt
plt.plot(x,y)
plt.plot(x,z)
plt.show()
plt.hot()
plt.hot
h(plt.hot)
plt.colors(
)
plt.colors
plt.colorbar
plt.colorbar()
plt.imshow()
plt.imshow(x)
plt.imshow(np.ndarray(100).reshape(20,5))
plt.show()
i=np.ndarray(100).reshape(20,5)
i
for _ in i:
  _=random.random()
i
for _ in i:
  print(_)
for r in i:
  for e in r:
    e = random.random()
i
for r in i:
  for e in r:
    e.
ls
i
i[5[8]]=5
i[5][8]=5
i[5][4]=5
i[1][4]=5
i[1][4]=50
i
plt.imshow(i)
plt.show()
ls
sste
e
sst.norm(5,20)
n=sst.norm(5,20)
h(n.isf)
n.isf(0.5)
n.isf(0.8)
n.isf(0.n8)
n.dist()
n.a
n.b
h(n.b)
n.kwds
n.mean
n.mean()
n.moment()
n.moment(5)
n.moment(0)
n.moment(2)
n.sf(2)
n.sf(8)
h(n.sf)
n.args
n.random_state
n.random_state()
n.stats()
n.expect()
n.var()
n.std()
n.entropy()
n.entropy()[0]
t(n.entropy())
type(n.entropy())
n.rvs()
n.rvs(5)
n.rvs()p=sst
p=sst.poisson(50)
p.interval()
p.interval(5)
p.interval(0.5)
p.interval(0.8)
p.interval(0.9)
p.interval(0.1)
p.std
p.std()
p.var()
p.rvs()
h(p.rvs)
p.rvs(4)
p.rvs(5)
n.rvs(4)
n.rvs(40)
ls(sst)
dir(sst)
ls=dir
ls(sst)
sst.erlang
h(sst.erlang)
e=sst.expon()
e
e.a
e.b
e.args
e.kwds
e.expect()
e.rvs()
e.stats(
)
a,b,c,d=e.stats()
h(e.stats)
mv=e.stats()
m,v=e.stats()
m
v
e.mean()
e.var()
e.std()
e.entropy()
h(e.entropy)
h(sst.entropy)
sst.entropy(5)
sst.entropy(50)
sst.entropy(,ee50)
sst.entropy(e,e50)
sst.entropy(e,50)
e.median()
e.mean()
e.mean()==e.expect()
e.expect()
h(sst.mean)
e.rvs()
e.rvs(50)
e.cdf(5)+e.sf(5)
e.ppf(5)+e.isf(5)
e.ppf(0.5)+e.isf(0.5)
e.ppf(0.5)
e.isf(0.5)
e.isf(0.7)
e.ppf(0.7)
h(sst.a)
ls
ls=dir()
ls
locals()
dir()
h(dir)
v
del v
dir()
time
del S
S
sst.binom()
b=sst.binom(100,0.1)
b
b.dist()
b.dist
h(sst.dist)
h(b.dist)
weakref
b.__weakref__
b.__weakref__()
b.moment()
b.moment(0)
b.moment(1)
b.moment(2)
b.moment(3)
b.moment(4)
b.moment(40)
b.moment(2)
b.var()
b.var()b.
ls
e
b
b.rvs(100)
b.n
b.a
b.b
b.
b.dist()
b.dist(100,0.1)
d=b.dist(100,0.1)
d
d==b
del d
b
ls()
del h
h=help
__spec__
__package__
__name__
__loader__
__loader__()
__loader__.get_code(0
)
__loader__.get_code()
__loader__.get_data()
__loader__.name
__loader__.path
__loader__.path_mtime()
__loader__.path_mtime(__loader__.path)
__loader__.is_package()
__loader__.is_package('ls')
__loader__.is_package('os')
ls
ls()
__cached__
__doc__
__build_class__(
__builtins__
__builtins__._
bool(5)
bool(-8)
bool('')
bool(''')
'
)
__builtins__.True
__builtins__.False==False
__builtins__.hash
__builtins__.hash()
__builtins__.hash(1)
__builtins__.hash(100)
__builtins__.hash(100.5)
__builtins__.hash(-5)
__builtins__.hash(inf)
__builtins__.hash(nan)
__builtins__.hash(math.inf)
__builtins__.hash(math.nan)
__builtins__.hash(0)
id(0)
id(546)
id(0)
id(123456789)
id(1234567890)
id(123456789)
id(12345678)
id(1234567)
id(123456)
id(1234)
id(12)
id(ls)
id(dir)
ls==dir
hash(ls)
hash(dir)
data=b.rvs(100)
data
data=b.rvs(1000)
data
from collections import Counter
c=Counter(data)
c.values()
c.items()
dict(c.items())
data=dict(c.items())
plt.plot(data)
plt.hist(data)
plt.hist()
h(plt.hist)
data=b.rvs(1000)
plt.hist(data)
plt.show()
plt.hist(b.rvs(1000000))
plt.hist(b.rvs(1000000)).show()
plt.show()
plt.hist(sst.binom(10000,0.1).rvs(1000000)).show()
plt.hist(sst.binom(10000,0.1).rvs(1000000))
plt.show()
plt.hist(sst.binom(10000,0.1).rvs(1000000),bin=50).show()
plt.hist(sst.binom(10000,0.1).rvs(1000000),bins=50).show()
plt.hist(sst.binom(10000,0.1).rvs(1000000),bins=50)
plt.show()
x = [1,1,2,3,6,6,6,6,9,9,9,9]
h1 = plt.hist(x, bins=25)
plt.show()
ls
b
b.rvs()
b.rvs(1000)
plt.hist(sst.binom(100,0.1).rvs(1000000),bins=50)
plt.show()
plt.hist(sst.binom(100,0.1).rvs(1000000),bins=30)
plt.show()
plt.hist(sst.binom(100,0.1).rvs(100000000),bins=30)
plt.show()
b=sst.binom(100,0.1)
d=b.rvs(100000)
d=b.rvs(1000000)
d
ax=plt.hist(d)
ax
ax.count(
)
ax.count(0)
ax.count(5)
ax.index(5)
ax.any
plt.show()
ax=plt.hist(d, bins=50)
plt.show()
ax=plt.hist(d, bins=30)
plt.show()
100*0.1
b.expect()
plt.show()
ax=plt.hist(d, bins=30)
plt.show()
del data
d.var()
d.mean()
d.view()
d.choose(5)
d.choose()
d.choose([1,2,3,5])
h(d.choose)
hnumpy.choose)
h(numpy.choose)
h(np.choose)
ls()
del b c d
del b, c, d
del ax
del h1
ls()
e=sst.expon(5)
d=e.rvs(100000)
plt.hist(d, bins=20)
plt.show()
plt.hist(d, bins=50)
plt.show()
e=sst.expon(5)p
ls
d=dict()
d
d['a']
d['a']=5
d['a']
d.a
del d
ls()
tp
p=sst.poisson(10)
b1=sst.binom(100,0.1)
b2=sst.binom(500,0.02)
b3=sst.binom(1000,0.01)
b1.expect()
b2.expect()
b3.expect()
p.expect()
p.var()
b1.var()
b2.var()
b3.var()
plt.hist(p.rvs(1000000), bins=30)
plt.hist(b1.rvs(1000000), bins=30)
plt.hist(b2.rvs(1000000), bins=30)
plt.hist(b3.rvs(1000000), bins=30)
plt.show()
del p
del b1,b2,b3
ns=[sst.norm(x) for x in range(4)]
ns.size
len(ns)
ns.size()
ns.count()
ns.count(0)
ns.count({})
ns.count([])
for n in ns:
  plt.hist(n,rvs(100000), bins=50)
for n in ns:
  plt.hist(n.rvs(100000), bins=50)
plt.show()
ns=[sst.norm(1, x) for x in range(4)]
for n in ns:
  plt.hist(n.rvs(100000), bins=50)
plt.show()
ns=[sst.norm(1, 10*x) for x in range(4)]
for n in ns:
  plt.hist(n.rvs(100000), bins=50)
plt.show()
h(sst.norm)
ns=[sst.norm(exp=1, 10*x) for x in range(4)]
ns=[sst.norm(exp=1, var=10*x) for x in range(4)]
cat /usr/local/lib/python3.5/dist-packages/scipy/stats/_distn_infrastructure.py
open()file
file
File
d=open('/usr/local/lib/python3.5/dist-packages/scipy/stats/_distn_infrastructure.py', 'r').readall()
d=open('/usr/local/lib/python3.5/dist-packages/scipy/stats/_distn_infrastructure.py', 'r').read()
d
pp(d)
ppq(d)
sys=S
sys
sys()
sys('ls')
import sys
sys
sys.version
sys=S
sys
sys.verion
sh()
what()
from traceback import print_exc as wtf
wtf()
wtf
try:
  a=0/0
except:
  wtf()
try:
  wtf()
except:
  wtf()
a=0/0
p=0.95
P=0.95
del p
N=10000
votes=[random.random() < 0.5 for i in range(N)]
vote[:5]
votes[:5]
votes.count(True)
votes.count(True) *2 > N
votes.count(False) *2 > N
from time import perf_counter as pc
pc()
time.time()
for i,v in enumerate(votes):
  print(i,v)
  break
ls
[print('hello'), x for i in range(10)]
[(print('hello'), x) for i in range(10)]
[(print('hello'), i) for i in range(10)]
[print('hello'), i for i in range(10)]
[[print('hello'), i] for i in range(10)]
import pickle
pickle.dump([])
h(pickle.dump)
pickle.dump([],'ad')
pickle.dump([],open('t','w'))
pickle.dumps([],open('t','w'))
pickle.dumps([])
import file
import fileutils
import encoding
import encodings
os.file
os.path.exists('probVotes.data')
next
()
netx()
next()
next([1,2,3])
next(1)
p=[a=5]
plt.xlim(
h(plt.xlim)
a=b=5
a
b
id(a)
id(b)
h(np.save)
h(np.savetxt)
plt.figure()
plt.figure(1)
plt.figure(1,2)
plt.figure([1,2])
h(plt.figure)
ls()
sh('ls')
sh('rm t')
sh('ls')
cat('probVotes.py')
sh('rm probVotes.py')
sh('ls')
sh('cd Documents/Python')
sh('ls')
os.chdir('Documents/Python')
sh('ls')
os.unlink(
)
os.listxattr()
os.listdir()
np.plt.coo
np.colo
plt.colorbar()
show(plt.colorbar)
h(plt.colorbar)
h(plt.colormaps)
plt.im
import numpy as np
from matplotlib import pyplot as plt
def euclid(x, y):
  cnt = 0
  if x < y: # keep x >= y
    x, y = y, x
  while y != 0:
    r = x % y
    x = y
    y = r
    cnt += 1
  return cnt
N = 100
data = np.array([[0] * N] * N, dtype=np.int64)
for i in range(N):
  for j in range(i, N):
    data[i][j] = euclid(i, j)
np.savetxt('Euclid.csv', data, fmt='%d', delimiter=',')
vmax = vmin = data[0][0]
for row in data:
  vmax = max(row) > vmax and max(row) or vmax
  vmin = min(row) < vmin and min(row) or vmin
map = plt.imshow(data, interpolation='nearest', cmap=cm.Blues,vmin=vmin, vmax=vmax)
map = plt.imshow(data, interpolation='nearest',vmin=vmin, vmax=vmax)
map
plt.colorbar(mappable=map, cax=None, ax=None, shrink=0.5)
plt.show()
q
data
sh('ls')
os.chdir('')
os.chdir('datascience')
ls
os.listdir(('')
os.listdir((''))
os.listdir()
os.chdir('../algorithm')
os.listdir()
__import__('23Tr')
__import__('23Tree')
__import__('23Trre')
__import__('23Tree')
23Tree
T=__import__('23Tree')
T
T.Node()
T.Node(5)
n=T.Node(5)
n.isF
n.isFull()
n.isLeaf(()
)
n.isLeaf()
n.hasKey(5)
n.hasKey(8)
n.getChild(8)
n.getChild(5)
t=T.Tree()
del n
sl()
ls()
scipy.random
scipy.rand()
scipy.rand==rand
ranom
random
scipy.random
ls()
math
scipy.math
scipy.exp(5)
scipy.cos(5)
scipy.cos
man(scipy.cos)
h(scipy.cos)
np.info(np.scipy.cos)
np.info(scipy.cos)
np.cos
np.cos==scipy.cos
np.cos==scipy.cos==math.cos
np.cos==math.cos
scipy.cos==math.cos
np.math
np.math==math
np.math==math=scipy.math
np.math==math==scipy.math
math=scipy.math
math
del math
math
math=scipy.math
math
np.time
scipy.time
scipy.sys
scipy.os
np.os
np.sys
np.random
scipy.random
np.math
scipy.math
dir(scipy)
dir(scipy)[0]
np.csv
np.zip
import import
import importlib
importlib.machinery
importlib.warnings
importlib.warnings.warn('asd')
importlib.reload('np')
importlib.reload(np)
id(importlib.__import__)
id(importlib.import_module)
importlib.types
import types
types.FunctionType()
types.FunctionType('asd')
types.CodeType()
types.CodeType('asd')
types.new_class()
types.new_class('A')
A=types.new_class('A')
A()
type('A')
type(A)
claa(A)
class(A)
class()
class
import functools
functools.lru_cache()
c=functools.lru_cache(5)
c['s']=5
c()
map
reduce
importlib.util
importlib.util.abc
importlib.util.abc.abc
import abc
h(abc)
util
import util
import utils
importlib.util.abc.abc
importlib.util
importlib.util.resolve_name()
importlib.util.resolve_name('abc')
importlib.util.resolve_name('abc','abc')
importlib.util.resolve_name('abcs','abc')
importlib.util.resolve_name('abcsasdasd','abc')
importlib.util.resolve_name('abcsasdasd','abc42')
__import__('23Tree')
importlib.import_module('23Tree')
importlib.import_module('23Tree')==__import__('23Tree')
ls()
sh('ls')
cat('RSA.py')
sh('cat RSA.py')
ls()
sh('ls')
sh()
sh(None)
l()
ls()
locals()
locals().keys()
T
__import__('23Trre')
T=__import__('23Tree')
t=T()
t=T.Tree()
t.root
t.get(5)
t.put(50)
t.get(50)
t.root
t.root.key1
t.root.key2
t.put(10)
t.put(x) for x in range(10)
(t.put(x) for x in range(10))
t.get(0)
t.get(5)
h=(t.put(x) for x in range(10))
h
h=[t.put(x) for x in range(10)]
t.put(500)
t.put(58)
t.root
t.root.left
t.root.right
import sh
sh.ls
sh.ls()
sh('ls')
sh.locate('hs')
sh.which('lua')
sh.ls()
x=sh.ls()
x
type(x)
str(x)
pp(str(x))
p=sh.ls()
p
type(p)
p.call_args
p.cmd
p.ran
p.process
p.log
p.log.log
p.exit_code
p.next()
import tinydb
tinydb.Storage()
tinydb.JSONStorage()
db=tinydb.TinyDB()
db=tinydb.TinyDB('t.json')
db.tables()
db.table()
t=db.table()
db.tables()
t=db.table('my')
t.name
t.insert({'a':4})
t.insert({'a':8})
t.insert({'b':8})
t.contains({'b':8})
t.contains()
t.contains
t.search('a'==5)
q=tinydb.Query()
t.search(q.'a'==5)
t.search(q.a==5)
t.search(q.a!=5)
t.write_back()
db.tables()
db.tables
db.table_class()
db.close()
sh('cat t.json')
exit
exit()
type ('1')
type (r'1')
type (b'1')
1 instanceof object
def f()
  print(__NAME__)
def f():
  print(__NAME__)
f()
__NAME__
def f():
  print(__name__)
f()
def f():
  print(self)
f()
def f():
  print(f.__name__)
f()
def jsonify(fn):
    @functools.wraps(fn)
    def wrapper(*args, **kwargs):
        return json.dumps(fn(*args, **kwargs))
    return wrapper
def respose():
    return {'status': 404}
respose()
type(respose())
r=jsonify(respose)
import functools
r=jsonify(respose)
r
r()
import json
r()
type(r())
h(functools.wraps)
def f():
pass
def f():
  pass
f()
def f():
  print("asdsa")
f()
def fibonacci():
    a, b = 0, 1
    while True:
        yield b
        a, b = b, a + b
gen = fibonacci()
def fibonacci():
    a, b = 0, 1
    while True:
        yield b
        a, b = b, a + b
fibonacci()
g=fibonacci()
g
g()
g.__name__
g.__next__
g.__next__()
g.send
g.send()
g.send(1)
g.send(1,5)
g.send(1)
has_next
 class singleton_generator:
     def __init__(self):
         self.a, self.b = 0, 1
     def __iter__(self):
         return self
     def __next__(self):
         while True:
             yield self.b
             self.a, self.b = self.b, self.a + self.b
     def send(self, val):
         pass class singleton_generator:
     def __init__(self):
         self.a, self.b = 0, 1
     def __iter__(self):
         return self
     def __next__(self):
         while True:
             yield self.b
             self.a, self.b = self.b, self.a + self.b
     def send(self, val):
lass singleton_generator:
   def __init__(self):
       self.a, self.b = 0, 1
   def __iter__(self):
       return self
   def __next__(self):
class singleton_generator:
    def __init__(self):
        self.a, self.b = 0, 1
     def __iter__(self):
         return self
class singleton_generator:
    def __init__(self):
        self.a, self.b = 0, 1
    def __iter__(self):
        return self
    def __next__(self):
        while True:
            yield self.b
            self.a, self.b = self.b, self.a + self.b
    def send(self, val):
        pass
f = singleton_generator()
f
f1 = iter(f)
f1
next(f1)
next(next(f1))
iter(f)
iter(f)==f
def f()
def f():
  yield 'asd'
g=f()
next(g)
next(f())
l=5
round(.6)
round(1.6)
abs(1.6)
dir(l)
h
h.__call__()
h()
h.__doc__
h.__sizeof__()
h.__sizeof__(5)
h.__module__
type(object)
c=lambda x, y: x[0]=y
c=lambda x, y: x[0] = y
c=lambda (x, y): x[0] = y
lambda x, y: x[0] = y
lambda x, y: (x[0] = y)
lambda x, y: (x = y)
lambda x, y: (x == y)
lambda x, y: return (x = y)
lambda x, y: return (x = 1)
lambda x,y: x=y
lambda x,y: (x=y)
lambda x,y: (x=y) and 
lambda x,y: (x=y) and 5
lambda x,y: ((x=y) and 5)
def f(): pass
{'asd': def f(): pass}
{'asd': f(): pass}
doc
list.__anme__
list.__name__
"%s" % []
"%s" % [1,2,5]
"%s" % (1,2,5)
def baroque(quality=None):
    def bbaroque(chapiter=None):
        def bbbaroque(texture=None):
            def bbbbaroque(fn):
                return fn() % (quality, chapiter, texture)
            return bbbbaroque
        return bbbaroque
    return bbaroque
baroque()
baroque()()
baroque()()()
baroque()()()()
baroque()()()
b=baroque()()()
b
@b
def f():
  return "asd"
b=baroque('asd')('65')('87ds')
@b
def f():
  return "asd"
b=baroque(quality='marble')(chapiter='corinth')(texture='bayleaf')
b
@b
def f():
  return "asd"
def f():
@b
def f():
  return "%s-%s-%s"
f()
f
def f():
  return "%s-%s-%s"
baroque(quality='marble')(chapiter='corinth')(texture='bayleaf')(f)
def baroque(quality=None):
    def bbaroque(chapiter=None):
        def bbbaroque(texture=None):
            def bbbbaroque(fn):
                return fn() % (quality, chapiter, texture)
            return bbbbaroque
        return bbbaroque
    return bbaroque
@baroque(quality='marble')(chapiter='corinth')(texture='bayleaf')
def my_cathedral():
    return 'A cathedral built using %s \n' +
           'in %s style and with %s texture.\n' +
           'Masterpiece in baroque era!'
print(my_calthedral())
def baroque(quality=None):
    print('Let us pick some %s stones' % quality)
    def bbaroque(chapiter=None):
        print('And design a %s chapiter' % chapiter)
        def bbbaroque(texture=None):
            print('Then carve much %s texture' % texture)
            def bbbbaroque(fn):
                def bbbbbaroque(*args, **kwarg):
                    return 'Finnally, ' + fn()
                return bbbbbaroque
            return bbbbaroque
        return bbbaroque
    return bbaroque
@baroque(quality='marble')(chapiter='corinth')(texture='bayleaf')
baroque(quality='marble')(chapiter='corinth')(texture='bayleaf')
@(baroque(quality='marble')(chapiter='corinth')(texture='bayleaf'))
@baroque(quality='marble').__call__(chapiter='corinth').__call__(texture='bayleaf')
@baroque(quality='marble')
def h():
  return "asd"
h()
h()()
h()()()
import lzma
h(lzma.compress)
lzma.compress([1,2,3,])
lzma.compress(b'asdkavhshfpvashvof')
data=b'asdasdasdsafsdf'*50
len(data)
len(lzma.compress(data))
lzma.compress(data)
data=[random.choice('ZXCVBNMLKJHGFDSAQWERTYUIOPpoiuytrewqasdfghjkl.,mnbvcxz1234567890-+_)(*&^$#@!') for _ in range(1000)]
import urllib
urllib.parse.unquote('<script>alert('uhm..');</script>')
urllib.request.quote('<script>alert('uhm..');</script>')
urllib.request.quote("<script>alert('uhm..');</script>")
import urllib1
import urllib
import urllib2
import urllib3
urllib3.request.urlencode('asdsad<type>')
urllib3.request.urlencode(b'asdsad<type>')
urllib3.request.urlencode(u'asdsad<type>')
urllib3.request.urlencode(u'http://asd.com')
urllib3.request.urlencode('http://asd.com')
import scrapy
scrapy.version_info
type(scrapy.version_info)
t=type
scrapy._txv
t(scrapy._txv)
increment
incremental
import incremental
incremental
incremental.Version(2)
incremental.Version(2,5,9)
incremental.Version((2,5,9))
incremental.Version(2,5,9)
incremental.Version(2,5,9,6)
incremental.Version(,5,9,6)
incremental.Version(None,5,9,6)
del incremental
ls()
del scipy
del timer
del np
del plt
ls()
__cached__
scrapy.__all__
scrapy.__cached__
h(scrapy.__class__)
h(scrapy.__dict__)
scrapy.__dict__
dir(scrapy)
scrapy.__file__
scrapy.__doc__
scrapy.__na
scrapy.__name__
scrapy.__loader__
scrapy.__dir__()
scrapy.__package__
scrapy.__path__
scrapy.__spec__
inspect
spect
scrapy.version_info
scrapy.twisted_version
scrapy.utils
scrapy.utils.gz
scrapy.Item('asd')
i=scrapy.Item()
i.__abstractmethods__
i.__module__
i._values
i.fields
i['asd']=5
i['x']=5
i.values()
i.update('s',5)
i.update('s')
i.update('s','5')
i._MutableMapping__marker
i._class()
f=scrapy.Field()
f['a']=5
f['b']=10
f.items()
f.a
scrapy.Request()
r=scrapy.Request('www.baidu.com')
r=scrapy.Request('http://www.nhentai.net')
r._encoding
r._meta
r._get_url()
r._url
r.flags
r.errback
r.cookies
r.callback
r.dont_filter
r.headers
r.method
r.priority
r.encoding
r.body
r=scrapy.Request('https://www.nhentai.net')
r.body
s=scrapy.Spider()
s=scrapy.Spider('nhentai')
s.custom_settings
s.log()
s.log('what')
s.logger
s.logger.info('asd')
s.name
s.start_urls
scrapy.link.Link()
scrapy.link.Link('https://www.nhentai.net')
l=scrapy.link.Link('https://www.nhentai.net')
l.fragment
url='https://www.nhentai.net'
scrapy.http.request.Request(url)
r=scrapy.http.request.Request(url)
r.body
tiwsted
import twisted
twisted.web.http.base64
twisted.web.http.base64.b64encode('kahsolt')
twisted.web.http.base64.b64encode(b'kahsolt')
u'kahsolt'.decode()
u'kahsolt'.encode('ascii')
u'kahso是lt'.encode('ascii')
'kahso是lt'.encode('ascii')
scrapy.version_info
import scrapy
del np
del plt
ls(
)
del scipy
del timer
a={ }
b={:a=a}
a={ }
b = {a: a}
b = {'a': a}
a
a = {}
b = {'a': a}
a['b'] = b
a
b
a['b']['a']['b']
a = { }
b = { 'a': a }
a['b'] = b
a
b
a['b']['a']['b']['a']['b']
None
id(None)
__file__
__name__
import scrapy
del scipy
ls
ls()
del np, plt, timer
import scrapy.extensions
scrapy.extensions.__cached__
scrapy.extensions.__dict__
scrapy.extensions.__dir__
scrapy.extensions.__dir__()
import scrapy.extensions.*
from scrapy.extensions import *
ls()
locals()
scrapy.extensions.telnet.TelnetConsole
import scrapy.extensions.telnet.TelnetConsole
import scrapy.extensions.telnet
scrapy.extensions.telnet.hpy
scrapy.extensions.telnet.manhole
scrapy.extensions.telnet.signals
scrapy.utils.engine.get_engine_status())
scrapy.utils.engine.get_engine_status()
scrapy.settings
import scrapy.settings
scrapy.settings.getint()
scrapy.settings.default_settings
dir(scrapy.settings.default_settings)
scrapy.settings.default_settings.DOWNLOAD_WARNSIZE
pp(dir(scrapy.settings.default_settings))
pp(dict(scrapy.settings.default_settings))
scrapy.settings.default_settings.__doc__
pp(scrapy.settings.default_settings.__doc__)
print(scrapy.settings.default_settings.__doc__)
scrapy.settings.default_settings.__doc__
h(scrapy.settings.default_settings.__doc__)
import scrapy.signal
scrapy.signal
scrapy.signals.engine_started
scrapy.signals.engine_started()
scrapy.signals.engine_started
ot(scrapy.signals.engine_started)
t(scrapy.signals.engine_started)
tpye(scrapy.signals.engine_started)
type(scrapy.signals.engine_started)
scrapy.signals.engine_stopped
os.path.join('asd','54','564asd6')
'\u4e00\u5207\u5b89\u597d\u3002'
1^1
0^1
0^1^1
0^1^1^
1
1^1
1^1^1
1^1^1^1
1^1^1^1^1
!1
~1
~0
5+6i
5+6j
j
0j
1j
comple
complex
complex()
help(comple)
help(complex)
x=0j
x
x.conjugate()
load
import i_base_number
N
del i_base_number
from i_base_number import *
N
inums
from i_base_number import *
inums
from i_base_number import *
inums
imods
inums[0]
repr(inums[0])
inums[0]
repr(inums[0])
from i_base_number import *
repr(inums[0])
from i_base_number import *
repr(inums[0])
from i_base_number import *
repr(inums[0])
from i_base_number import *
repr(inums[0])
from i_base_number import *
repr(inums[0])
repr(inums[1])
repr(inums[2])
repr(inums[3])
repr(inums[4])
repr(inums[5])
inums[0]
inums[1]
dir(inums[1])
inums.val
inums[0].val
inums[0].modulus()
inums[1].modulus()
inums[2].modulus()
inums[3].modulus()
inums[4].modulus()
from i_base_number import *
inums[3].modulus()
inums[0..10]
inums[0:10]
inums[1]
5/10
5//10)
5//10
x=5
x
x/10
x//10
x//=10
x
locals()
del inums
del imods
locals()
ls()
import importlib
importlib.reload(i_base_number)
from i_base_number import *
inums
from i_base_number import *
inums
imods
plt.plot(inums)
plt.plot(imods)
plt.show()
dir(np)
dir(np).select
dir(np).map
for x in dir(np):
  if 'range' in x:
    print(x)
np.arange(1,10)
x=np.arange(1,10)
y=np.arange(2,11)
X,Y=np.meshgrid(x, y)
X
Y
ax
plt.figure(0)
f=plt.figure(0)
plt.close()
plt
plt.open()
0b00
s=(0b00)
s
s=(0b001)
s=(0b101)
s
s.denominator
s.bit_length()
s.from_bytes()
s.from_bytes(1)
s.from_bytes(1,2)
s.from_bytes(1,'s')
s.from_bytes(1,'big')
s.from_bytes(b'','big')[F[2~[F[2
s.from_bytes(b'10101010101011101000100001101','big')
s.from_bytes(b'101','big')
s.from_bytes(b'101','little')
s.from_bytes(b'1','little')
s.from_bytes(b'1','big')
class
class B-2:
bin(5)
bin(6)
6%2
6/2
3%2
3/2
3//2
1%2
import datatime
import socket
socket.gethostname()
datatime
datetime
import datetime
datetime
dir(datetime)
datetime.time
import time
datetime.time == time
id(itme)
id(time)
id(datetime.time)
id(datetime)
id(datetime.datetime)
id(datetime.date)
time
datetime.time 
datetime
time.daylight
time.ctime()
time.time()
time.mktime()
time.gmtime()
time.localtime()
time.asctime()
time.ctime()
h(time.ctime)
h(time.asctime)
time.altzone
time.clock()
time.monotonic()
h(time.monotonic)
time.get_clock_info()
time.tzname
time.timezone
time.sleep(1)
thread
import thread
import threading
threading.currentThread()
t=threading.currentThread()
t.getName()
t.daemon
t.ident
t.isAlive()
t.name
del t
datetime.MAXYEAR
datetime.MINYEAR
datetime.tzinfo()
str(datetime.tzinfo())
repr(datetime.tzinfo())
datetime.timezone()
datetime.time()
datetime.time
datetime.time.max
datetime.time.min
datetime.time.minute
datetime.date.weekday()
datetime.date.resolution
datetime.date.today()
datetime.datetime.mor()
datetime.datetime.day
datetime.datetime.day=5
datetime.datetime.time()
datetime.datetime.time
datetime.datetime.time == datetime.time
datetime.datetime.utcnow()
datetime.datetime.now()
datetime.time.now()
import twisted
import twisted.internat
import twisted.internet
from twisted.internet import defer
d = defer.Deferred()
d.called
d.callback([])
d.called
d.callback([])
d.result
d = defer.Deferred()
d.addCallback(lambda x:x+1)
d.call(5)
d.callback(5)
d.result
import testTwisted
print(1,2)
import testTwisted
import importlib
importlib.reload('testTwisted')
importlib.reload(testTwisted)
map
import functools
functools.map()
functools.map
map
map()
map(1)
h(map)
m=map(date)
import datetime
m=map(datetime.datetime.isoformat, x)
x=5
m=map(datetime.datetime.isoformat, x)
m=map(datetime.datetime.isoformat, [])
m=map(sum, [[1,3,5,8],[5,9,6],[1,2,6,5]])
m
m()
dict(m)
m
h(m)
for i in m:
  print(i)
m=map(sum, [[1,3,5,8],[5,9,6],[1,2,6,5]])
for i in m:
  print(i)
m=map(sum, [[1,3,5,8],[5,9,6],[1,2,6,5]])
print(m)
print(next(m))
cls
rand()
import random
random.rand()
random.random()
[1,2,3].count(0)
[1,2,3].count(1)
np.array([0]*400).reshape(20)
np.array([0]*400).reshape(20,20)
np.array(400).reshape(20,20)
np.zeros(10)
np.zeros(10).reshape(5,2)
x, y = np.random.rand(2, 100) * 4
x
x.shape
cls
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import random
def times(n):
  def wrapper(fn):
    def func(N, p):
      ans = 0.0
      for _ in range(n):
        ans += fn(N, p)
      return ans / n
    return func
  return wrapper
@times(30)
def go(N=100, p=0.5):
  choices = [(random.random() < p and 'A' or 'B') for _ in range(N)]
  acnt = choices.count('A')
  bcnt = N - acnt
  majority = acnt * 2 > N and 'A' or 'B'
  expect = (majority == 'A' and acnt * 2 + bcnt * 10 or 0) / N
  return expect
N = 100     # N: 10~1000
M = 100     # P: 0.00~1.00
ans = np.zeros(N*M).reshape(N, M)
for i in range(N):
  for j in range(M):
    ans[i][j] = go(10*(i+1), 1.0/M*j)
N = 100     # N: 10~1000
M = 50      # P: 0.00~1.00
ans = np.zeros(N*M).reshape(N, M)
for i in range(N):
  for j in range(M):
    ans[i][j] = go(10*(i+1), 1.0/M*j)
ans
ans.savetxt('probConspiracy.txt', fmt='%.4f')
dir(ans)
np.savetxt('probConspiracy.txt', ans,fmt='%.4f')
from tkinter import *
tk=Tk()
canvas=Canvas(tk,width=300,height=300)
myTriangle=canvas.create_polygon(10,10,10,60,50,35)
canvas.pack()
def moveTriangle(event):
    if event.keysym=='Up':
        canvas.move(myTriangle,0,-3)
    elif event.keysym=='Down':
        canvas.move(myTriangle,0,3)
    elif event.keysym=='Left':
        canvas.move(myTriangle,-3,0)
    else:
        canvas.move(myTriangle,3,0)
canvas.bind_all('<KeyPress-Up>',moveTriangle)
canvas.bind_all('<KeyPress-Down>',moveTriangle)
canvas.bind_all('<KeyPress-Left>',moveTriangle)
canvas.bind_all('<KeyPress-Right>',moveTriangle)
myTriangle.imag
t(myTriangle)
type(myTriangle)
quit()
import networkx as nx
import matplotlib.pyplot as plt
G = nx.Graph()
for e in [(1,2), (1,3), (1,4), (2,3), (3,4), (5,4), (7,4)]:
  G.add_edge(*e)
nx.draw(G)
plt.show()
G.edges()
for e in [(1,2), (1,3), (1,4), (2,3), (3,4), (5,4), (7,4)]:
  G.add_edge(*e)
G.edges()
nx.draw(G)
plt.show()
G.graph['name']='title'
G.node[0]['idx']=5
G.node[0]['idx']='5'
G.node[0]
G.node[1]['idx']=5
G.node[2]['idx']=9
nx.draw(G)
plt.show()
G.degree()
G.degree()[1]
G.degree()[0]
G.add_star()
G.add_star(G.node[1])
nx.draw(G)
plt.show()
h(nx.draw)
nx.draw(G, pos=nx.spring_layout(G))
plt.show()
import graphics
os
os.system('ls')
os.system('cd ..')
os.system('ls')
os.chdir('..')
os.chdir('Python')
os.chdir('tutorial')
os.system('ls')
import graphics
graphics.BAD_OPTION
graphics.Text('123')
graphics.Text()
graphics.Text(graphics.Point(0,0),"asdsa")
t=graphics.Text(graphics.Point(0,0),"asdsa")
t.draw()
w=graphics.GraphWin()
t.draw(w)
w.bbox()
w.close()
file
import file
import fileutils
import fileutil
S('ls')
s
os.system('ls')
mpo
exit()
import socket
socket.bind
socket.socket.bind
exit()
import wav
import wave
FN = '/mnt/c/Users/Kahsolt/Music/kaoling/乖离想生/01 朱の少女.wav'
fp = wave.open(FN, mode='rb')
wave.audioop.max()
h(wave.audioop.max)
fp.getcompname()
fp.getcomptype()
fp._f
fp._file
fp._framerate
fp.getfp()
fp.getframerate()
fp.getnframes(0)
fp.getnframes(1)
fp.getsampwidth()
fp.close()
exit()
import tensorflow
tensorflow
tensorflow.__version__
exit()
import tensorflow as tf
print(tf.__version__)
hello = tf.constant('Hello tensorflow')
sess = tf.Session()
print(sess.run(hello))
a = tf.constant(1)
b = tf.constant(2)
print("1 + 2 = %d" % sess.run(a + b))
h(tf.Variable)
ops=tf.get_default_graph().get_operations()
ops
a
b
__file__
__FILE__
it()
exit()
import tensorflow as tf
h(tf.get_variable)
h(tf.train.Saver)
import pylab
h(pylab.show)
import types
types.
types.new_class('A')
types.new_class('A')()
types.new_class('A')().__dir__
types.new_class('A')().__dir__()
def draw_sinx():
  x = np.arange(0, 2 * np.pi, 0.01)
  x = x.reshape(len(x), 1)
  y = np.sin(x)
  pylab.plot(x, y, label='y=sin(x)')
  plt.axhline(linewidth=1, color='r')
draw_sinx()
import pylab
import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
import pylab
draw_sinx()
pylab.show()
x = np.arange(0, 2 * np.pi, 0.01)
x
x.shapw()
x.shape()
x
type(x)
x.shape()
x.shape
x.reshape(len(x), 1).shape
x
x.reshape(len(x), 1)==x
x=np.arange(0, 5, 1)
x
x.reshape(len(x), 1)
x.reshape(len(x), 1).shape
x.shape
y=np.sin(x)
y
y=np.sin(x.reshape(5,1))
y
np.transpose(x)
x
np.transpose(x)
x=np.transpose(x)
x
np.trace(x)
  x = np.arange(0, 2 * np.pi, 0.01)
  y = np.sin(x)
  pylab.plot(x, y, label='y=sin(x)')  # y = sin(x)
x = np.arange(0, 2 * np.pi, 0.01)
y = np.sin(x)
pylab.plot(x, y, label='y=sin(x)')
pylab.show()
np.arange(0, 2 * np.pi, 0.01)[-1]
np.arange(0, 2 * np.pi, 0.01)[0]
np.random.uniform(0.0, 2 * np.pi, (1,))
np.random.uniform(0.0, 2 * np.pi, (1))
np.random.uniform(0.0, 2 * np.pi)
np.random.uniform(0.0, 2 * np.pi, (1))
np.random.uniform(0.0, 2 * np.pi, 1)
train_y = np.sin(train_x)
train_x = np.random.uniform(0.0, 2 * np.pi, 1)
train_y = np.sin(train_x)
train_y
tf.get_variable
import tensorflow as tf'
import tensorflow as tf
tf.get_variable
h(tf.get_variable)
import tensorflow as tf
tf.relu
tf.sign
tf.sign()
tf.sign(5)
tf.sign(-5)
import cv2
cv2.__dir__
len(cv2.__dir__())
img = image.imread('kano.png')
import matplotlib.image as image
img = image.imread('kano.png')
img
img.shape
out=np.zeros_like(img)
out.shape()
out.shape
out[0]
out[0][1]
out[0][1][1]
out[0][1][1]=5
out[0][1][1]
w, h, d = img.shape
w
h
d
out = np.zeros((w+1) * (h+1) * d).reshape(w+1, h+1, d)
out.shape
w
h
d
out.shape
out[203]
out[204]
kernel = np.array([  # 卷积核，必须是正形奇数阶
  [-3, -1,  1, -1, -3],
  [-1,  1,  3,  1, -1],
  [ 1,  3,  5,  3,  1],
  [-1,  1,  3,  1, -1],
  [-3, -1,  1, -1, -3],
])
kernel.sum()
kernel = np.array([
  [-7, -3,  2, -3, -7],
  [-3,  2,  7,  2, -3],
  [ 2,  7, 12,  7,  2],
  [-3,  2,  7,  2, -3],
  [-7, -3,  2, -3, -7],
])
kernel.sum()
kernel = np.array([
  [-1, -1, -1],
  [-1,  8, -1],
  [-1, -1, -1],
])
kernel.sum()
kernel = np.array([
  [-3,  1, -3],
  [ 1,  4,  1],
  [-3,  1, -3],
])
kernel = np.array([
kernel.sum()
kernel = np.array([
  [-2,  1, -2],
  [ 1,  4,  1],
  [-2,  1, -2],
])
kernel.sum()
kernel = np.array([
  [1/16,  1/8, 1/16],
  [ 1/8,  1/4,  1/8],
  [1/16,  1/8, 1/16],
])
kernel.sum()
kernel = np.array([
  [1/36,  1/9, 1/36],
  [ 1/9,  1/3,  1/9],
  [1/36,  1/9, 1/36],
])
kernel.sum()
kernel = np.array([
  [1/12,  1/9, 1/12],
  [ 1/9,  1/3,  1/9],
  [1/12,  1/9, 1/12],
])
kernel.sum()
kernel = np.array([
  [1/18,  1/9, 1/18],
  [ 1/9,  1/3,  1/9],
  [1/18,  1/9, 1/18],
])
kernel.sum()
kernel = np.array([   # 边缘
  [-8, -3,  2, -3, -8],
  [-3,  2,  7,  2, -3],
  [ 2,  7, 12,  7,  2],
  [-3,  2,  7,  2, -3],
  [-8, -3,  2, -3, -8],
])
kernel.sum()
kernel = np.array([   # 边缘，有色差
  [ 0,  0, -1,  0,  0],
  [ 0, -1,  1, -1,  0],
  [-1,  1,  9,  1, -1],
  [ 0, -1,  1, -1,  0],
  [ 0,  0, -1,  0,  0],
])
kernel.sum()
import epoll
import select
select
select.epoll
import socket
import struct
import hmac
import hashlib
import logging
dir(strct)
dir(struct)
struct.Struct()
dir(hmac)
hmac.__doc__
bytes
str
str==bytes
type('asd')
type(b'asd')
str
dir(str)
str.decode
str.encode
str.encode("asd")
str.encode("asd按时大苏打")
str.encode("asd按时大苏打", encoding='gbk')
str.encode("asd按时大苏打", encoding='utf8')
str.encode("asd按时大苏打", encoding='utf16')
str.encode("asd按时大苏打", encoding='utf32')
str.encode("asd按时大苏打", encoding='utf64')
str.encode("asd按时大苏打", encoding='gb2312')
str.encode("asd按时大苏打", encoding='gbk')
str.encode("asd按时大苏打", encoding='utf-8')
str.encode("asd按时大苏打", encoding='utf8')
socket.AF_INET
socket.AF_INET5
socket.AF_INET6
dir(socket.AF_INET6)
t(socket.AF_INET6)
type(socket.AF_INET6)
enum
h(socket.inet_aton)
h(socket.inet_pton)
h(socket.inet_ntoa)
h(socket.inet_ntop)
socket.inet_ntoa(5465)
socket.inet_ntoa(b'465')
socket.inet_ntoa(b'1.1.1.1')
help(socket.inet_aton)
socket.inet_aton('1.2.3.4')
socket.inet_aton('192.168.0.1')
n  = socket.inet_aton('192.168.0.1')
socket.inet_ntoa(n)
socket.inet_ntop(n)
socket.inet_ntop(socket.AF_INET, n)
socket.inet_ntop(socket.AF_INET6, n)
h(socket.inet_ntop)
h(socket.inet_ntoa)
ipstr='12:32:32:21:AF:12'
':'.join(('%02X%02X' % (ord(i), ord(j))).lstrip('0')
                          for i, j in zip(ipstr[::2], ipstr[1::2]))
ipstr='ABCD:EF01:2345:6789:ABCD:EF01:2345:6789'
':'.join(('%02X%02X' % (ord(i), ord(j))).lstrip('0')
                          for i, j in zip(ipstr[::2], ipstr[1::2]))
v6addr = ':'.join(('%02X%02X' % (ord(i), ord(j))).lstrip('0')
                          for i, j in zip(ipstr[::2], ipstr[1::2]))
        v6addr = re.sub('::+', '::', v6addr, count=1)
v6addr = re.sub('::+', '::', v6addr, count=1)
importp re
v6addr = ':'.join(('%02X%02X' % (ord(i), ord(j))).lstrip('0')
                          for i, j in zip(ipstr[::2], ipstr[1::2]))
        v6addr = re.sub('::+', '::', v6addr, count=1)
import re
v6addr = ':'.join(('%02X%02X' % (ord(i), ord(j))).lstrip('0')
v6addr = re.sub('::+', '::', v6addr, count=1)
v6addr
1//5
16//9
16/9
raise RuntimeError("What family?")
socket.hasattr
hasattr
'inet_pton' in dir(socket)
chr(45)
chr(455465)
chr(255)
chr(254)
chr(253)
x04
'x04'
b'x04'
str(b'x04')
(b'x04').decode('utf8')
ord((b'x04').decode('utf8'))
int((b'x04').decode('utf8'))
struct.pack('>H', 20)
struct.pack('>H', 0)
struct.pack('>H', 1)
struct.pack('>H', 13)
struct.pack('>H', ord('1'))
struct.pack('>H', ord('2'))
struct.pack('>H', 1000)
struct.pack('>H', 100)
dir(struct.pack('>H', 100))
struct.pack('>H', 100).count()
len(struct.pack('>H', 100))
struct.pack('>H', 100)
128/8
128/8/8
{None:0}
d={None:0}
d[2]
d[]
d[a]
a=None
d[a]
""is""
"" is ""
"s" is ""
a=""
a is ""
a == ""
id("")
id(a)
a
id(54)
id(54222222)
id(54)
id(54222222)
'\x04$\x04h\x00@\x05\x08\x05\x00\x00\x00\x00\x00'
b'\x04$\x04h\x00@\x05\x08\x05\x00\x00\x00\x00\x00'.decode('utf8')
sys.version_info
sys.version_info[0]
sys.version_info[1]
sys.version_info[2]
sys.version_info[5]
sys.version_info[4]
sys.version_info[5]
SUCCESS
import pkg_resources
pkg_resources.get_distribution('shadowsocks').version
pkg_resources.get_distribution('six').version
pkg_resources.get_distribution('six')
dir(pkg_resources.get_distribution('six'))
sixpkg_resources.get_distribution('six')
six = pkg_resources.get_distribution('six')
dir(six)
six.key
six._key
six.py_version
six.location
six.has_version()
six.egg_name()
six.parsed_version
six.requires()
six.get_entry_info()
six.get_entry_map()
id(None)
None is a
a
id(a)
id('')
id("")
import enum
enum.Enum()
enum.Enum(12)
enum.Enum([1,2,3,])
h(enum.Enum)
enum.Enum({'A':4})
os.name
os.altsep
os.access()
import getopt
h(getopt)
logging.V=5
logging.V
dir(logging)
logging.ERROR
logging.CRITICAL
logging.ERROR
logging.FATAL
logging.INFO
logging.DEBUG
Exception()
Exception("asd")
raise Exception("asd")
raise RuntimeError("asd")
os.O_EXCL
os.O_IRUSR
os.S_IRUSR
stat.S_IRUSR
import stat
stat.S_IRUSR
stat.S_IWUSR
import shell
h(os.open)
import errono
import errno
errno
errno.EROFS
os.devnull
h(os.devnull)
type(os.devnull)
sys.frozen
sys.
sys.exec_prefix
sys.executable
os.path.dirname(os.path.abspath(sys.executable))
dir(signal)
import signal
dir(signal)
signal.SIGQUIT
import proxy_list as pl
pl.api
pl.proxy_list
pl.proxy_list()
pl.get()
pl.get(10,1)
pl.get(1)
pl.get(1,10)
dir(pl.get)
h(pl.get)
pl.get(1,, count=10)
pl.get(1, count=10)
pl.get(0, count=10)
import proxies as ps
import proxy as ps
from Proxies import Proxies 
p = Proxies() 
p.get_proxies(20, 1) 
result = p.get_result()
print(result) 
pl.update()
from Proxies import Proxies
p = Proxies()
p.get_proxies(50, 3)
p.get_result()
p.get_proxies(50, 1)
p.get_result()
exit()
