https.get('https://10.10.104.254/')
http.get('https://10.10.104.254/')
_
cls
0==[]
1==[]
'\t'=='0'
'\t'==[]
'\t'==0
'0'==[]
'0'==0
[]==0
0=='0'
0==='0'
0=='0'
l
l.push('Username', '13')
l
l.push()
l.push
ls.push
l=[]
"http://www.baidu.com".match(regLink)
"http://www.baidu.com".macth(regLink)
let regLink = /(https?|ftp|file):\/\/[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]/g
regLink = /(https?|ftp|file):\/\/[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]/g
for (i in ls) {console.log(i)}
for (k,v in ls) {console.log(i)}
for (i in ls) {console.log(i)}
ls="asd asd asdcvaefw sdvzbc 865fdsz 65".match(r)
"asd asd asdcvaefw sdvzbc 865fdsz 65".match(r)
r=/\w+/g;
"asd asd asdcvaefw sdvzbc 865fdsz 65".match(r)
r=/\w*/g;
"asd asd asdcvaefw sdvzbc 865fdsz 65".match(r)
r=/w*/g;
let r=/w*/g;
"asd asd asdcvaefw sdvzbc 865fdsz 65".match(r)
r
let r=/w+/g;
m.delete("sad")
m.delete(a)
m.delete(5)
m.delete(2)
m.del(2)
m.get(2)
m
m.has(2)
m=new Map();
require('md5')
md5
dns.lookup()
dns.lookup
dns.NONAME
dns.NO
dns.EOF
os.networkInterfaces()
os.userInfo()
f.eth1
f =os.getNetworkInterfaces()
os.getNetworkInterfaces()
os.EOL
os.homedir()
os.homedir
os.constants.errno
os.constants
os.constants()
os.const()
os.loadavg()
os.endianness
os.endianness()
os.freemem()
os.uptime()
os.type()
os.cpus()
os.arch()
os.arch
os
s=require('store.js')
s=require('storejs')
s=require('store')
class s {}
class {}
{a:1}
{$a:1}
$a
$5
col
col.insertMany()
col
console.log(col)
col
col()
col
});
  return cli.db().collection('test');
  assert.equal(null, err);
var col=MongoClient.connect(url, function(err, cli) {
let url = 'mongodb://lab.iriscraft.tk:27017/test';
let assert = require('assert');
let MongoClient = require("mongodb").MongoClient;
let url = 'mongodb://lab.iriscraft.tk:27017/test';
let assert = require('assert');
let MongoClient = require("mongodb").MongoClient;
col
});
  return cli.db().collection('test');
  assert.equal(null, err);
var col=MongoClient.connect(url, function(err, cli) {
  return cli.db().collection('test');
  assert.equal(null, err);
MongoClient.connect(url, function(err, cli) {
const url = 'mongodb://localhost:27017/lethe';
const assert = require('assert');
const MongoClient = require('mongodb').MongoClient;
const url = 'mongodb://localhost:27017/lethe';
const assert = require('assert');
const MongoClient = require('mongodb').MongoClient;
const assert = require('assert');
db.user().register("ks", "1379"const MongoClient = require('mongodb').MongoClient;)
db.user()
db.user().list_all(show)
db.user().list_all()
db.user()
};
  console.log(data);
show = (data) => {
};
  message(id) {}
  },
    }
      },
      leave_group(gid) { /* T/F */
      },
      enroll_group(gid) { /* T/F */
      },
      get_groups() { /* [gid] */
      },
      get_frineds() { /* [uid] */
      },
      del_frined() { /* T/F */
      },
      add_frined() { /* T/F */
      },
        });
          });
            cli.close();
            fn(res);
            assert.equal(err, null);
          cli.db().collection('user').findOne(data, (err, res) => {
          let data = { _id: require('mongodb').ObjectID(id) };
          assert.equal(null, err);
        MongoClient.connect(url, function (err, cli) {
      get() {
      },
        });
          });
            cli.close();
            fn(res);
            assert.equal(err, null);
          cli.db().collection('user').findOne(data, (err, res) => {
          let data = { username: username };
          assert.equal(null, err);
        MongoClient.connect(url, function (err, cli) {
      exsits(username) {
      },
        });
          });
            cli.close();
            fn(res);
            assert.equal(err, null);
          cli.db().collection('user').findOne(data, (err, res) => {
          };
            password: password
            username: username,
          let data = {
          assert.equal(null, err);
        MongoClient.connect(url, function (err, cli) {
      login(username, password) {
      },
        });
          });
            cli.close();
            fn(res);
            assert.equal(err, null);
          cli.db().collection('user').insertOne(data, (err, res) => {
          };
            password: password
            username: username,
          let data = {
          assert.equal(null, err);
        MongoClient.connect(url, function (err, cli) {
      register(username, password) {
      },
        });
          });
            cli.close();
            fn(res);
            assert.equal(err, null);
          cli.db().collection('user').find(function (err, res) {
          assert.equal(null, err);
        MongoClient.connect(url, function (err, cli) {
      list_all(fn) {
    return {
  user(id) {
};db = {
  console.log(data);
show = (data) => {
};
  message(id) {}
  },
    }
      },
      leave_group(gid) { /* T/F */
      },
      enroll_group(gid) { /* T/F */
      },
      get_groups() { /* [gid] */
      },
      get_frineds() { /* [uid] */
      },
      del_frined() { /* T/F */
      },
      add_frined() { /* T/F */
      },
        });
          });
            cli.close();
            fn(res);
            assert.equal(err, null);
          cli.db().collection('user').findOne(data, (err, res) => {
          let data = { _id: require('mongodb').ObjectID(id) };
          assert.equal(null, err);
        MongoClient.connect(url, function (err, cli) {
      get() {
      },
        });
          });
            cli.close();
            fn(res);
            assert.equal(err, null);
          cli.db().collection('user').findOne(data, (err, res) => {
          let data = { username: username };
          assert.equal(null, err);
        MongoClient.connect(url, function (err, cli) {
      exsits(username) {
      },
        });
          });
            cli.close();
            fn(res);
            assert.equal(err, null);
          cli.db().collection('user').findOne(data, (err, res) => {
          };
            password: password
            username: username,
          let data = {
          assert.equal(null, err);
        MongoClient.connect(url, function (err, cli) {
      login(username, password) {
      },
        });
          });
            cli.close();
            fn(res);
            assert.equal(err, null);
          cli.db().collection('user').insertOne(data, (err, res) => {
          };
            password: password
            username: username,
          let data = {
          assert.equal(null, err);
        MongoClient.connect(url, function (err, cli) {
      register(username, password) {
      },
        });
          });
            cli.close();
            fn(res);
            assert.equal(err, null);
          cli.db().collection('user').find(function (err, res) {
          assert.equal(null, err);
        MongoClient.connect(url, function (err, cli) {
      list_all(fn) {
    return {
  user(id) {
db = {
db.users(1).hello()
db.users().hello()
db.users().hello
db.users()
db.users
  }}
    }
      hello: () => {console.log(id);}
    return {
  users(id) {
db={
db.users(5).hello()
db.users(1).hello()
db.users().hello()
db.users().hello
db.users()
db.users
db
  }}
    }
      hello(id) {console.log(id);}
    return {
  users(id) {
db={
}
  }
    }
      hello(id) {console.log(id);}
    return {
db={users(id) {}
typeof m.d
m.d
m.d=MongoClient
m.5
m.v
m.v=5
m=new Map()
db(add_user);
};
  });
    callback(result);
    console.log("Inserted 3 documents into the collection");
    assert.equal(3, result.ops.length);
    assert.equal(3, result.result.n);
    assert.equal(err, null);
  ], function(err, result) {
    {a : 1}, {a : 2}, {a : 3}
  db.collection('test').insertMany([
add_user = function(db, callback) {
};
  });
    });
      cli.close();
      console.log(res);
    fn(dbo, (res) => {
    let dbo = cli.db();
    assert.equal(null, err);
  MongoClient.connect(url, function(err, cli) {
let db = (fn) => {
let url = 'mongodb://lab.iriscraft.tk:27017/test';
let assert = require('assert');
let MongoClient = require("mongodb").MongoClient;
db=2
db=None
db
};
  });
    });
      cli.close();
      console.log(res);
    fn(dbo, (res) => {
    const dbo = cli.db();
    assert.equal(null, err);
  MongoClient.connect(url, function(err, cli) {
const db = (fn) => {
};
  });
    });
      cli.close();
      console.log(res);
    fn(db, (res) => {
    const db = cli.db();
    assert.equal(null, err);
  MongoClient.connect(url, function(err, cli) {
const db = (fn) => {
};
  });
    fn(db, () => { cli.close();});
    const db = cli.db();
    assert.equal(null, err);
  MongoClient.connect(url, function(err, cli) {
const db = (fn) => {
let url = 'mongodb://lab.iriscraft.tk:27017/test';
let assert = require('assert');
let MongoClient = require("mongodb").MongoClient;
v.length
v=1
1.length
l
l.length
l[9]=20
l[5]=2
l[0]=2
l[0]
l.length
l=[]
m=require("./mongo")
});
  db.close();
  });
    assert.equal(1, result);
    assert.equal(null, err);
  db.collection('user').insert({a:1}, {upsert:true}, function(err, result) {
  assert.equal(null, err);
MongoClient.connect("mongodb://lab.iriscraft.tk:27017/test", {native_parser:true}, function(err, db) {
MongoClient = require('mongodb').MongoClient
m()
m=require("./mongo")
m()
m=require("./mongo")
m()
m=require("./mongo")
m()
m=require("./mongo")
require("./mongo")
m()
console.log(m)
m=require("./mongo")
require("./mongo")
m["a"]()
m["a"]
let m={a:f,b:g}
;
var delete=1
d=1
delete=1
delete
dlete
[{a:1},1] instanceof Array
[] instanceof Array
{asd:12} instanceof Array
typeof []
typeof {}
type of {}
{}
h
h=new Map()
Map()
{asd:12} instanceof Array
[] instanceof Array
{} instanceof Array
{ instanceof Array
[] instanceof Array
[] instanceof List
1
instanceof
instanceof([1,2,3])
instanceof [1,2,3]
typeof [1,2,3]
typeof [[1,2,3]]
[[1,2,3]]
[1,2,3]
g()
var g=()=>{assert.equal(2,1); console.log("asd");}
f()
var f=()=>{try {assert.equal(2,1)} catch(e) {console.log(e);} console.log("asd");}
f()
var f=()=>{try {assert.equal(2,1)} catch(e) {console.log(e); console.log("asd");}}
f()
var f=()=>{try {assert.equal(2,1)} catch(e) {console.log(e);}}
varf=()=>{try {assert.equal(2,1)} catch(e) {console.log(e);}}
try {assert.equal(2,1)} catch(e) {console.log(e);}
try {assert.equal(1,1)} catch(e) {console.log(e);}
try {assert.equal(err,1)} catch(e) {console.log(e);}
assert.equal(1,1)
assert.equal(1,2)
add(1,"a")
add(1,)
add(1,2)
add
let add=(x,y)=>{console.log(x+y);}
f(1,5)
f(1)
f()
function f(x,y) {console.log(x+y);}
f()
f(45645)
f(asdsa)
function f(x) {console.log(x);}
const v=5;
const v=5
v.a
v['a']
v['a']=5
v['a']
v
const v=new Map();
function #() { console.log("2546");}
$()
function $() { console.log("asdasd");}
$()
function $() {}
'\000000000'
'\00000000'
'\00000'
'\001'
'\00'
'\02'
'02'
'0x2'
'\0x3DDSSDSDS'
'\0x3DDS'
'\0x3585'
'\0x35'
'\0x3'
'\03'
'\00'
'\01'
'\056'
'\0x56'
'\n'
require("assert");
});
    }
        });
            console.log(res);
        c.keys('user:1:*', (error, res)=>{
    } else {
        console.log(error);
    if(error) {
c.select('15', (error)=>{
});
    }
        });
            console.log(res);
        c.get('user:1:*', (error, res)=>{
    } else {
        console.log(error);
    if(error) {
c.select('15', (error)=>{
});
    }
        });
            console.log(res);
        c.get('user:1:password', (error, res)=>{
    } else {
        console.log(error);
    if(error) {
c.select('15', (error)=>{
});
    }
        });
            console.log(res);
        c.set('user:1:password', 'haha', (error, res)=>{
    } else {
        console.log(error);
    if(error) {
c.select('15', (error)=>{
c=r.createClient()
c=r.createClient()r=require('redis')
});
    }
        });
            console.log(res);
        c.set('user:1:password', 'haha', function(error, res) {
    } else {
        console.log(error);
    if(error) {
c.select('15', function(error){
});
    }
        });
            c.end();
            console.log(res);
        c.set('str_key_0', '0', function(error, res) {
    } else {
        console.log(error);
    if(error) {
c.select('15', function(error){
});
    }
        });
            client.end();
            // 关闭链接
            }
                console.log(res);
            } else {
                console.log(error);
            if(error) {
        client.set('str_key_0', '0', function(error, res) {
        // set
    } else {
        console.log(error);
    if(error) {
client.select('15', function(error){
client=c
});
    }
        });
            client.end();
            // 关闭链接
            }
                console.log(res);
            } else {
                console.log(error);
            if(error) {
        client.set('str_key_0', '0', function(error, res) {
        // set
    } else {
        console.log(error);
    if(error) {
client.select('15', function(error){
c
});
    console.log(error);
c.on("error", function(error) {
    console.log(error);
c..on("error", function(error) {
c
c.keys("*", (s)=>{console.log(s)})
c.scan("asd", (s)=>{console.log(s)})
c.scan("asd")
c.scan("")
c.scan(1)
c.scan()
c=r.createClient()
r=require('redis')
c=r.createClient()
r=require('redis')
r=require(redis)
user.m_friends()
user.m_friends
user.account
}
    user: user
{
user()
user
}
    }
        this.m_friends = friends;
        this.m_account = account;
    {
    constructor(account,friends)
{
class user
x
x=c.get("user:1:password")
c.get("user:1:password")
c.set("user:1:password","hehe")
c.set("user:1:username","haha")
c.db
c=client
r
r=redis
redis
});
    console.log(error);
client.on("error", function (error) {
//连接错误处理
var client = redis.createClient("6379", "127.0.0.1");
//创建redis客户端
var redis = require("redis");
net.isIP("12.1.1.504")
net.isIP("12.1.1.5")
net.isIP("12.1.1.1")
net.isIP("asd")
net.isIP()
net.isIP
net
socket
require('socket')
require('socket.io')
require('io.socket'))
require('io')
require ('io')
io
l[l.length-1]
l[l.length]
l="asd/sadsv/asd.fv".split('/')
"asd/sadsv/asd.fv".split('/')[0]
"asd/sadsv/asd.fv".split('/')[-1]
"asd/sadsv/asd.fv".split('/')[0]
"asd/sadsv/asd.fv".split('/')
"asd/sadsv/asdfv".split('/')
"asd/sadsv/asdfv".split('/').last
"asd/sadsv/asdfv".split('/')[-1]
"asd/sadsv/asdfv".split('/')
"asd/sadsv/asdfv".split("/")
isString
File
typeof("asd")==='string'
typeof("asd")=='string'
typeof("asd")
"asd" instanceof string
"asd" instanceof String
Intl
Int1
toint("")
int("as")
'吴'<'张'
'吴'>'张'
'我>'你'
'我'<'你'
'我'>'你'
'我'!='你'
'我'!='找'
'我'='找'
'我'>'找'
''>'找'
''>''
a.slice(3,9)
a.slice(4,9)
a.slice(5)
a=[1,2,3,4]
ls
nls
nls.splice(0,1)
nls=ls
ls.clone()
ls
ls=[a,b,c]
a
ls
ls=ls+sub
ls+sub
sub
ls
sub=ls.splice(1,2)
ls=[a,b,c]
c={fk:3}
b={th:2}
a={what:1}
a.name
a=1
axios.post('/auth', data).then((resp) => {console.log(resp.data)});
axios.post('/auth', data).then((resp) => {});
    axios.defaults.headers.post['Content-Type'] = 'application/json';   // 'multipart/form-data';
    axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
    axios.defaults.responseType = 'json';
    axios.defaults.timeout = 3000;
    axios.defaults.method = 'post';
axios.defaults.baseURL = 'http://localhost:3000';
axios=require('axios');
let data={username: 'adm', password: '1379'}
axios.post('/auth', data).then((resp) => {});
this.$http.post('/auth', data).then((resp) => {});
let data={username: 'adm', password: '1379'}
    axios.defaults.headers.post['Content-Type'] = 'application/json';   // 'multipart/form-data';
    axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
    axios.defaults.responseType = 'json';
    axios.defaults.timeout = 3000;
    axios.defaults.method = 'post';
axios.defaults.baseURL = 'http://localhost:3000';
axios=require('axios');
;
import axios from 'axios'
quit()
quit
qui
exit()
exit
'asd'+1+'asd';
;
(x)=>{console.log(x);}.call(4)
;
(x)=>{console.log(x);}(4)
(x)=>{console.log(x);}
(x)=>{console.log(x);};
sd
(x)=>{console.log(x);}(5);
x=>{console.log(x);}(5);
x=>{}(5);
x=>{};
confirm("asd")
confirm()
s
s.removeAll()
s.clear()
s=require("store")
"asd".length
"阿斯顿".length
"阿斯顿"length
for(var i in x) { console.log(i);}
x =[2 , 9 , 5 ]
x
for(var i in x) { console.log(i);}
for(let (i,v) in x) { console.log(i);}
for(let i in x) { console.log(i);}
}
console.log(i)
for(let i in x) {
x=[1,2,3]
[1].includes(1)
[1].include(1)
[]
a
a.push(1)
a.push(5)
a.push()
a=[]
[]
1==='1'
1=='1'
ax.setAuth()
ax.setAuth=function(){console.log("asd");}
ax.setAuth()
ax.setAuth
ax.setAuth=function(){}
ax.setAuth
ax
ax=require('axios')
((w)=>{console.log(w+1)})(1);
((w)=>{console.log(w+1)});
((w)=>{console.log(w+1)})(1);
(w)=>{console.log(w+1)}(1);
(w)=>{console.log(w+1)};
()=>{};
w(){};
axios.post('/api/auth/', data).then((resp)=>{console.log(resp)}).catch((e)=>{console.log(e)});
data
axios.post('/api/auth/', data).then((resp)=>{console.log(resp)}).catch((e)=>{console.log(e)});
axios.post('http://127.0.0.1/api/auth/', data).then((resp)=>{console.log(resp)}).catch((e)=>{console.log(e)});
    axios.defaults.headers.get['Content-Type'] = 'application/json';
    axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
    axios.defaults.responseType = 'json';
    axios.defaults.timeout = 3000;
    axios.defaults.method = 'get';
    axios.defaults.baseURL = 'http://localhost:8000';
axios.post('http://127.0.0.1/api/auth/', data).then((resp)=>{console.log(resp)}).catch((e)=>{console.log(e)});
axios.post('http://127.0.0.1/api/auth/', data).then((resp)=>{console.log(resp)});
let data={username: 'ks', password:'1379'}
axios = require('axios')
axios.post('http://127.0.0.1/api/auth/', data).then((resp)=>{console.log(resp)});
let data={username: 'ks', password:'1379'}
axios = require('axios')
axios.post('http://127.0.0.1/api/auth/', data).then((resp)=>{console.log(resp)});
axios.post('http://127.0.0.1/api/auth/', data).then((resp)=>{console.log(res)});
data
let data={username: 'ks', password:'1379'}
axios = require('axios')
d
d.get("a")
d.get(a)
d={a:5}
;
{a: 5}.get("a")
{a: 5}
parseFloat(5.5516).toFixed(2)
parseFloat(5.5516)
parseFloat(5.554).
parseFloat(5.5)
parseFloat
axios.get('/api/problems/1/').then((r)=>{console.log(r)});
axios.get('/api/problems/1/');
axios.get('/');
    axios.defaults.headers.get['Content-Type'] = 'application/json';
    axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
    axios.defaults.responseType = 'json';
    axios.defaults.timeout = 3000;
    axios.defaults.method = 'get';
axios.defaults.baseURL = 'http://localhost:8000';
axios=require('axios')
axios.get('/');
axios.get('http://127.0.0.1:8000');
axios.get('http://127.0.0.1:8000/');
axios.get('http://127.0.0.1:8000');
axios.get('http://127.0.0.1');
axios.get('/');
    axios.defaults.headers.get['Content-Type'] = 'application/json';
    axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
    axios.defaults.responseType = 'json';
    axios.defaults.timeout = 3000;
    axios.defaults.method = 'get';
axios.defaults.baseURL = 'http://localhost:8000';
axios=require('axios')
axios.get('http://127.0.0.1:8000/api/problems/1/').then((resp)=>{console.log(resp.data)});
axios.get('http://127.0.0.1:80/api/problems/1/').then((resp)=>{console.log(resp.data)});
axios.get('http://127.0.0.1/api/problems/1/').then((resp)=>{console.log(resp.data)});
axios.get('/api/problems/1/').then((resp)=>{console.log(resp.data)});
axios.defaults.baseURL = 'http://127.0.0.1:8000';
axios.get('/api/problems/1/').then((resp)=>{console.log(resp.data)});
    axios.defaults.headers.get['Content-Type'] = 'application/json';
    axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
    axios.defaults.responseType = 'json';
    axios.defaults.timeout = 3000;
    axios.defaults.method = 'get';
axios.defaults.baseURL = 'http://localhost:8000';
    axios.defaults.headers.get['Content-Type'] = 'application/json';
    axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
    axios.defaults.responseType = 'json';
    axios.defaults.timeout = 3000;
    axios.defaults.method = 'get';
axios.get('http://localhost:8000/api/problems/1/').then((resp)=>{console.log(resp.data)})axios.defaults.baseURL = 'http://localhost:8000';;
axios.get('http://localhost:8000/api/problems/1/').then((resp)=>{console.log(resp.data)});
axios.get('http://localhost:3000/api/problems/1/').then((resp)=>{console.log(resp.data)});
axios.get('/api/problems/1/').then((resp)=>{console.log(resp.data)});
axios.get('/api/problems/1/').then((resp)=>{console.log(resp.data)})；
axios.get('/api/problems/1/').then((resp)=>{console.log(resp.data)})
axios.get('/api/problems/1/').then((resp)=>{});
      });
        this.resp = JSON.stringify(err);
      }).catch((err)=>{
            this.item = item;
          if(this.item.hasOwnProperty())
        for(let item in resp.data)
axios.get('/api/problems/' + id + '/').then((resp)=>{
      });
        this.resp = JSON.stringify(err);
      }).catch((err)=>{
            this.item = item;
          if(this.item.hasOwnProperty())
        for(let item in resp.data)
this.$http.get('/api/problems/' + id + '/').then((resp)=>{
id=1
id=5
    axios.defaults.headers.get['Content-Type'] = 'application/json';
    axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
    axios.defaults.responseType = 'json';
    axios.defaults.timeout = 3000;
    axios.defaults.method = 'get';
axios.defaults.baseURL = 'http://localhost:8000';
a
axios
axios=require ('axios')
;
import axios from 'axios'
axios.get('/api/profiles/1.zip').then((resp)=>{console.log(resp.data)})
axios.post('/api/tutors',{name:"hahahah"}).then((resp)=>{console.log(resp.data)})
axios.get('/api/profiles/1.zip').then((resp)=>{console.log(resp.data)})
axios.post('/api/tutors',{name:"hahahah"}).then((resp)=>{console.log(resp.data)})
axios.post('/api/tutors',{name:"hahahah"}).then((resp)=>{console.log(resp)})
axios.defaults.headers.common['Authorization']
axios.defaults.headers.common['Authorization']="Token token=Ly93mU3x8wlcd1XzV362cP--RtWqUubSOHCACIr6hbsMiCNp7FM7Bqjl1LgrAsra3ZmYfiwoZIsGRpbKyG-hkA, username=adm"
axios.default.headers
            ', username=adm';
            'Token token=' + this.$userdata.auth_token +
this.$http.defaults.headers.common['Authorization'] =
axios.post("/auth",{username:"adm", password:"1379"}).then((resp)=>{console.log(resp.data)});
axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
axios.defaults.headers.post['Content-Type'] = 'application/json';   // 'multipart/form-data';
axios.defaults.responseType = 'json';
axios.defaults.timeout = 3000;
axios.defaults.method = 'post';
axios.defaults.baseURL = 'http://localhost:3000';
axios.get('/api/tutors').then((resp)=>{console.log(resp.data)})
axios=require('axios')
axios.get('/api/tutors').then((resp)=>{console.log(resp.data)})
axios.get('/api/tutors').then((resp)=>{console.log(resp.data)}
for (var k in x) {console.log(k);}
for (var k,v in x) {console.log(k);}
for (var k in x) {console.log(k);}
x.key
x.keys
x.attribute
x.attributes
x={a:4,b:"4",c:[]}
1024*8192*4/1024/1024
1024*8192
ls
1024*8192
1024
axios.get('/api/tutors',{headers:{Authorization: "Token token=Ly93mU3x8wlcd1XzV362cP--RtWqUubSOHCACIr6hbsMiCNp7FM7Bqjl1LgrAsra3ZmYfiwoZIsGRpbKyG-hkA, username=adm"}}).then((resp)=>{console.log(resp.data)})
axios.get('/api/tutors').then((resp)=>{console.log(resp.data)})
axios.get('/api/tutors').then((resp)=>{console.log(resp.data)}
axios.default.auth={auth_token: "Ly93mU3x8wlcd1XzV362cP--RtWqUubSOHCACIr6hbsMiCNp7FM7Bqjl1LgrAsra3ZmYfiwoZIsGRpbKyG-hkA", username:"adm"}
axios.post('/auth',{username:"adm", password:"1379"}).then((resp)=>{console.log(resp)})
axios.default.auth={"auth_token": "asd", username:"adm"}
axios.default.auth
    axios.defaults.headers.post['Content-Type'] = 'application/json';   // 'multipart/form-data';
    axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
    axios.defaults.responseType = 'json';
    axios.defaults.timeout = 3000;
    axios.defaults.method = 'post';
axios.defaults.baseURL = 'http://localhost:3000';
axios
axios=require('axios')
ax=require('axios')
ax=require()
d['username']
d['type']
d={username: "adm", auth_token: "Ly93mU3x8wlcd1XzV362cP--RtWqUubSOHCACIr6hbsMiCNp7FM7Bqjl1LgrAsra3ZmYfiwoZIsGRpbKyG-hkA", type: "Admin"}
{username: "adm", auth_token: "Ly93mU3x8wlcd1XzV362cP--RtWqUubSOHCACIr6hbsMiCNp7FM7Bqjl1LgrAsra3ZmYfiwoZIsGRpbKyG-hkA", type: "Admin"}
d.sch[0].name
d.sch.name
d.sch
d["sch"]
d[sch]
d={sch:[{name:"444",grade:-520},{"name":"54", grade:-10}]}
{}
v.$http
v
v=require("vue")
v
var v;
a=="A"
a==="A"
a
a="A"
{d}
d={Name: 1}
d={Name: }
{d}
d={}
{}
document
read()
read
readline()
readline
repl.repl.
repl.repl.terminal
repl.repl.lasts/ax.js")ad "./test/controllers/ax.js"or/controllers/ax.js"./test/controllers/ax.js")arse("{}")parse "{}"[1,2];())e("./test/controllers/ax.js")e("./test/controllers/ax.js")= { method: 'put', auth: { token: $auth_token, email: $email} }; u(url, data) {/rn $resp;st(url, data, config).then(function(resp) { $resp = resp; }); = { method: 'patch', auth: { token: $auth_token, email: $email} };ction t(url, data) {.post(url, data, config).then(function(resp) { $resp = resp; }); config = { method: 'post', auth: { token: $auth_token, email: $email} };{p) { $resp = resp; });r config = { method: 'get', auth: { token: $auth_token, email: $email} };rl) {;, $tinq = '', $tadm = '';rod = '1379';'app@163.com', $minq = 'inq@163.com', $madm = 'adm@163.com';en = '';;'Admin'; 'Inquistor'; = 'Applicant'; Varsaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';efaults.headers.post['Content-Type'] = 'application/json';   // 'multipart/form-data';ios.defaults.responseType = 'json';t = 3000;d = 'post';eURL = 'http://localhost:3000';= require('axios');g axios.jsr/bin/env nodee("./test/controllers/ax.js")espquire("./test/controllers/ax.js")ta, config).then(function(resp) { D=resp; });ulldata, config).then(function(resp) { DATA=resp; });A.data.emaildat.emailA.dataAemail} };{ console.log(resp); });hen(function(resp) { console.log(resp); });puth_token = $tapp; } };t-Type'] = 'application/json';