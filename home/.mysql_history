show tables;
show databases;
show tables;
show databases;
create database test
;
use test;
CREATE TABLE IF NOT EXISTS User (id INTEGER PRIMARY KEY AUTOINCREMENT , username VARCHAR(20) NOT NULL , password VARCHAR(20) NOT NULL , create_time TIMESTAMP , update_time TIMESTAMP ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='用户表，没什么卵用' ;
CREATE TABLE IF NOT EXISTS User (id INTEGER PRIMARY KEY AUTO_INCREMENT , username VARCHAR(20) NOT NULL , password VARCHAR(20) NOT NULL , create_time TIMESTAMP , update_time TIMESTAMP ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='用户表，没什么卵用' ;
CREATE TABLE IF NOT EXISTS Message (id INTEGER PRIMARY KEY AUTO_INCREMENT , poster INTEGER REFERENCES TO User(id) , content TEXT DEFAULT '这货啥也没说...' , likes INTEGER DEFAULT 0 , create_time TIMESTAMP , update_time TIMESTAMP ) ENGINE=MyISAM DEFAULT CHARSET=utf8bm4 COMMENT='发帖记录表，也没什么卵用' ;
CREATE TABLE IF NOT EXISTS Message (id INTEGER PRIMARY KEY AUTO_INCREMENT , poster INTEGER REFERENCES TO User(id) , content TEXT DEFAULT '这货啥也没说...' , likes INTEGER DEFAULT '0' , create_time TIMESTAMP , update_time TIMESTAMP ) ENGINE=MyISAM DEFAULT CHARSET=utf8bm4 COMMENT='发帖记录表，也没什么卵用' ;
CREATE TABLE IF NOT EXISTS User (id INTEGER PRIMARY KEY AUTO_INCREMENT , username VARCHAR(20) NOT NULL , password VARCHAR(20) NOT NULL , create_time TIMESTAMP , update_time TIMESTAMP ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='用户表，没什么卵用' ;
CREATE TABLE IF NOT EXISTS Message (id INTEGER PRIMARY KEY AUTO_INCREMENT , poster INTEGER REFERENCES User(id) , content TEXT DEFAULT '这货啥也没说...' , likes INTEGER DEFAULT 0 , create_time TIMESTAMP , update_time TIMESTAMP ) ENGINE=MyISAM DEFAULT CHARSET=utf8bm4 COMMENT='发帖记录表，也没什么卵用' ;
CREATE TABLE IF NOT EXISTS Message (id INTEGER PRIMARY KEY AUTO_INCREMENT , poster INTEGER REFERENCES User(id) , content VARCHAR(50) DEFAULT '这货啥也没说...' , likes INTEGER DEFAULT 0 , create_time TIMESTAMP , update_time TIMESTAMP ) ENGINE=MyISAM DEFAULT CHARSET=utf8bm4 COMMENT='发帖记录表，也没什么卵用' ;
CREATE TABLE IF NOT EXISTS Message (id INTEGER PRIMARY KEY AUTO_INCREMENT , poster INTEGER REFERENCES User(id) , content VARCHAR(50) DEFAULT '这货啥也没说...' , likes INTEGER DEFAULT 0 , create_time TIMESTAMP , update_time TIMESTAMP ) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COMMENT='发帖记录表，也没什么卵用' ;
show tables;
desc Message;
desc User;
DROP TABLE Message;
TRUNCATE TABLE User;
desc User;
show tables;
DROP TABLE user;
DROP TABLE User;
CREATE TABLE IF NOT EXISTS User (id INTEGER PRIMARY KEY AUTO_INCREMENT , username VARCHAR(20) NOT NULL , password VARCHAR(20) NOT NULL , create_time TIMESTAMP NULL CURRENT_TIMESTAMP , update_time TIMESTAMP NULL CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='用户表，没什么卵用' ;
CREATE TABLE IF NOT EXISTS User (id INTEGER PRIMARY KEY AUTO_INCREMENT , username VARCHAR(20) NOT NULL , password VARCHAR(20) NOT NULL , create_time TIMESTAMP CURRENT_TIMESTAMP , update_time TIMESTAMP CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='用户表，没什么卵用' ;
CREATE TABLE IF NOT EXISTS User (id INTEGER PRIMARY KEY AUTO_INCREMENT , username VARCHAR(20) NOT NULL , password VARCHAR(20) NOT NULL , create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP , update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='用户表，没什么卵用' ;
CREATE TABLE IF NOT EXISTS Message (id INTEGER PRIMARY KEY AUTO_INCREMENT , poster INTEGER NULL REFERENCES User(id) , content TEXT NULL DEFAULT '这货啥也没说...' , likes INTEGER NULL DEFAULT 0 , create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP , update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP ) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COMMENT='发帖记录表，也没什么卵用' ;
CREATE TABLE IF NOT EXISTS Message (id INTEGER PRIMARY KEY AUTO_INCREMENT , poster INTEGER NULL REFERENCES User(id) , content VARCHAR NULL DEFAULT '这货啥也没说...' , likes INTEGER NULL DEFAULT 0 , create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP , update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP ) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COMMENT='发帖记录表，也没什么卵用' ;
use test;
show tables;
CREATE TABLE IF NOT EXISTS Message (id INTEGER PRIMARY KEY AUTO_INCREMENT , poster INTEGER NULL REFERENCES User(id) , content VARCHAR(100) NULL DEFAULT '这货啥也没说...' , likes INTEGER NULL DEFAULT 0 , create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP , update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP on update CURRENT_TIMESTAMP ) ENGINE=MyISAM DEFAULT CHARSET=utf8mb4 COMMENT='发帖记录表，也没什么卵用' ;
show tables;
DROP TABLE IF EXISTS Message;
TRUNCATE TABLE User;
DELETE FROM User WHERE username = 'kahsolt' AND age BETWEEN 13 AND 31 OR gender LIKE '%秀吉%' ;
DELETE FROM Post WHERE LEN(content) > 10000 OR author IS NULL AND comment <> '.keep' ;
show tables;
select * from User where not username = "asd"; 
select * from User where username = "asd"; 
select * from User where username == "asd"; 
select * from User where username != "asd"; 
select * from User where username <> "asd"; 
select * from User where username between "asd" and "sadsa"; 
select * from User where username not between "asd" and "sadsa"; 
select * from User where username not null; 
select * from User where username is not null; 
select * from User where username  not is null; 
select * from User where username  is not null; 
select * from User where username  is ""; 
select * from User where username  like " sad"; 
select * from User where username  like " sad_"; 
select * from User where username > " sad_"; 
select * from User where username not > " sad_"; 
select * from User where not username > " sad_"; 
select * from User where username in User; 
select * from User where username in (1,2,3); 
select * from User where username in (1,2,3);
update User;
update User where username='ksh';
update UserUPDATE User SET isAllowed = FALSE WHERE age < 18 ; where username='ksh';
UPDATE User SET isAllowed = FALSE WHERE age < 18 ;
select true;
select false;
select 0;
select 0 xor 5;
select where 0=0 xor 5=5;
select where 0=0 xor 5=4;
select where 0=0 or 5=4;
select from User where 0=0 or 5=4;
select from User where 0=0 or 5!=4;
select from User where 0=0 xor 5!=4;
select values(1,2,3);
select (1,2,3);
select 1,2,3;
select 1 where 1 in (1,2,3);
select 1 in (1,2,3);
select 1 in (1);
select 1 in 1;
select 1 in (1);
select 1 where select 1=1;
select 1 where select 1;
select 1 where select 1 and 1;
select 1 where select where (1) ;
select 1 where select  where (1) ;
select 1 where select 1 where (1) ;
select 1 where select 1 where (1);
select 1 where select 1 where 1;
select 1 where selec'a' '’ where 1;
;
use test;
show tables
;
create table test(key int, val float);
create table test(key integer, val float);
create table test(`key` int, `val` float);
key
;
show tables;
desc test;
show create table test;
show create table test\G
insert into test values(1,2);
insert into test values(1,2.5);
insert into test values(1.5,2.5);
insert into test values(456,2.5);
insert into test values(456.5,2.5);
insert into test values(456.5,"2.5");
insert into test values("456.5","2.5");
select * from test;
insert into test values("456.5","2.5a");
select * from test;
insert into test values("456.5","6543.5a");
select * from test;
insert into test values("456.5","65s43.5a");
select * from test;
insert into test values("456.5","a65s43.5a");
select * from test;
show warnings;
show warning;
show warnings;
show warning_code;
slect @ warning_code;
select @ warning_code;
select @warning_code;
select * from test;
slect @warning_code;
select @warning_code;
select @warning_c;
select @mysql;
select @my;
select @@my;
select @@mysql;
select @@mysql_version;
select @@version;
select @version;
.q
;
use test;
show tables;
create table t(t timestamps);
create table t(t timestamp);
show create table t;
CREATE TABLE IF NOT EXISTS User (
id INTEGER PRIMARY KEY AUTOINCREMENT, 
username VARCHAR(64) NOT NULL, 
password VARCHAR(32) NOT NULL, 
create_time TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP, 
update_time TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP
); 
CREATE TABLE IF NOT EXISTS User ( id INTEGER PRIMARY KEY AUTOINCREMENT,  username VARCHAR(64) NOT NULL,  password VARCHAR(32) NOT NULL,  create_time TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,  update_time TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP );
CREATE TRIGGER [update_update_time] 
AFTER UPDATE ON User FOR EACH ROW 
WHEN NEW.update_time <= OLD.update_time 
BEGIN 
UPDATE User SET update_time = CURRENT_TIMESTAMP WHERE update_time = OLD.update_time;
CREATE TRIGGER [update_update_time]  AFTER UPDATE ON User FOR EACH ROW  WHEN NEW.update_time <= OLD.update_time  BEGIN  UPDATE User SET update_time = CURRENT_TIMESTAMP WHERE update_time = OLD.update_time;
END;
cd ..
;
quit;
use testl
use test;
create table a(k varchar);
create table a(k int(1024));
create table a(k int(0));
show tables;
desc t;
desc a;
SELECT table_name FROM information_schema.TABLES WHERE table_name ='test';
SELECT count(table_name) FROM information_schema.TABLES WHERE table_name ='test';
SELECT count(table_name) FROM information_schema.TABLES WHERE table_name ='tasdest';
SELECT count(table_name) FROM information_schema.TABLES WHERE table_name ='User';
SELECT count(table_name) FROM information_schema.TABLES WHERE table_name ='Useasdr';
use test;
select * from a
;
;quit
ls
;
quit ls;
show tables;
use Test;
use test;
show tables;
drop table User;
drop table a;
drop table test;
drop table t;
show tables;
use  test;
show tables;
CREATE TABLE IF NOT EXISTS User (id INT PRIMARY KEY AUTO_INCREMENT, username VARCHAR(512) UNIQUE NOT NULL, password VARCHAR(512) DEFAULT '<need change>', create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP, update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP) DEFAULT CHARSET=utf8;
drop table User;
drop table message;
drop table Message;
show tables;
use test;
show table;s
show table;;
s show table;
show table;
show tables;
select * from User;
show databasesl
;
show databases;
use test;
show tables;
select * from User;
select * from Message;
select * from User;
drop table user;
drop table User;
drop table Message;
ls
;
show tables;
quit.
ls
;
quit. ls;
drop table test.User;
use test;
show tables;
use Test;
select * from Test;
select * from User;
select * from Test;
select * from Test\G
desc Test;
drop table Test;
select * from Test\G
drop table Test;
select * from Test\G
desc Test;
drop table Test;
desc Test;
select * from Test\G
quit.
;
drop table Test;
quit;
use Test;
use test
select * from Test;
desc Test
;
drop table Test;
desc Test
;
quit.
;
use test;
show tables;
drop table Test;
select * from Test;
select * from Test\g
select * from Test\G
drop table Test;
select * from Test\G
select * from Test\Gdecsc
desc Test;
decsc desc Test;
decsc Test;
desc Test
;
drop table Test;
desc Test；
;
desc Test;
drop table Test;
desc Test;
drop table Test;
desc Test;
drop table Test;
desc Test;
drop table Test;
desc Test;
use  test;
desc Test;
select * from Test;
select * from Test\g
create table t(id primary key auto_increment, val int);
create table t(id int primary key auto_increment, val int);
insert into t(val) values(12)
;
select @@identity;
insert into t(val) values(165)
;
delete from t where id=1;
insert into t(id, val) values(1,165)
;
select @@identity;
select * from t;
select * from Test;
select * from Test\G
select * from TestType\G
drop Table Test;
show databases;
show tables;
use test;
drop table TestType;
select * from TestType;
select * from TestType\G
use test;
create table i(val int(1325))
;
create table i(val int(255));
desc i;
drop table Test;
drop table Testtype;
show tabels;
show tables;
drop table TestType;
drop table User;
drop table i;
drop table t;
use test;
show tables;
select * from TestType;
select * from TestType\G
show index on TestType;
show indexes on TestType;
show indexes for TestType;
show indexes for test;
show index for test;
show index on test;
show index on test.TestType;
show index from test.TestType;
drop table TestType;
select * from TestType;
select * from TestType\g
select * from TestType\gG
select * from TestType\G
G select * from TestType\G
 select * from TestType\G
ls
use test;
shwo tables;
show tables;
drop table TestType;
select * from Message;
select * from User;
select * from Message;
drop table User;
drop table Message;
drop table TypeTest;
drop table TesType;
shw tables;
show tables;
select * from Message;
select * from User;
select * from TestType;
select * from TypeTest;
select * from TypeTest\G
use test;
select * from User;
select * from Message;
desc Messag;
desc Message;
drop table Message;
desc Message;
CREATE TABLE IF NOT EXISTS t(fk INTEGER NULL REFERENCES User(id));
desc t;
CREATE TABLE IF NOT EXISTS t2(fk INTEGER REFERENCES User(id));
desc t2;
CREATE TABLE IF NOT EXISTS t3(fk INTEGER FOREIGN KEY REFERENCES User(id));
CREATE TABLE IF NOT EXISTS t3(fk INTEGER REFERENCES User(id));
desc t3;
CREATE TABLE IF NOT EXISTS t4(fk INTEGER CONSTRAINTS REFERENCES User(id));
CREATE TABLE IF NOT EXISTS t4(fk INTEGER CONSTRAINT REFERENCES User(id));
CREATE TABLE IF NOT EXISTS t4(fk INTEGER CONSTRAINT fk_fk REFERENCES User(id));
CREATE TABLE IF NOT EXISTS t4(fk INTEGER CONSTRAINT fk REFERENCES User(id));
CREATE OR REPLACE TABLE t(fk INTEGER CONSTRAINT fk REFERENCES User(id));
CREATE OR REPLACE TABLE t(fk INTEGER REFERENCES User(id));
drop table t1;
drop table t2;
drop table t3;
drop table t4;
show tables;
CREATE OR REPLACE TABLE t(fk INTEGER REFERENCES User(id));
 CREATE OR REPLACE TABLE t(key REFERENCES User(id));
 CREATE OR REPLACE TABLE t(key );
 CREATE OR REPLACE TABLE t(key  INTEGER);
 CREATE OR REPLACE TABLE t(key INT);
 CREATE OR REPLACE TABLE t(k INT);
 CREATE OR REPLACE TABLE t(k INT REFERENCES User(id));
 CREATE OR REPLACE TABLE t(k INTEGER REFERENCES User(id));
desc t;
 CREATE OR REPLACE TABLE t(k INT REFERENCES User(id));
desc t;
 CREATE OR REPLACE TABLE t(k REFERENCES User(id));
 CREATE OR REPLACE TABLE t(k INT REFERENCES User(id));
 CREATE OR REPLACE TABLE t(k REFERENCES User(id));
desc t;
 CREATE OR REPLACE TABLE t(k INT CONSTRAINT sda REFERENCES User(id));
desc t;
show engine t;;
show engine ;
show engines;
 CREATE OR REPLACE TABLE t(k INT, REFERENCES User(id));
CREATE OR REPLACE TABLE t(
k INT, REFERENCES User(id),
REFERENCES User(id) ON DELETE CASADE ONUPDATE CASADE
);
CREATE OR REPLACE TABLE t( k INT, REFERENCES User(id), REFERENCES User(id) ON DELETE CASADE ONUPDATE CASADE );
CREATE OR REPLACE TABLE t( k INT, REFERENCES User(id), REFERENCES User(id) ON DELETE CASADE ON UPDATE CASADE );
CREATE OR REPLACE TABLE t( k INT, REFERENCES User(id), REFERENCES User(id) ON DELETE CASADE ON UPDATE CASADE );CREATE OR REPLACE TABLE t(
k INT, REFERENCES User(id),
REFERENCES User(id) ON DELETE CASADE ON UPDATE CASADE
);
CREATE OR REPLACE TABLE t( k INT, REFERENCES User(id), REFERENCES User(id) ON DELETE CASADE ON UPDATE CASADE );
CREATE OR REPLACE TABLE t(
k INT, REFERENCES User(id),
REFERENCES User(id) ON DELETE CASADE ON UPDATE CASADE
);
CREATE OR REPLACE TABLE t( k INT, REFERENCES User(id), REFERENCES User(id) ON DELETE CASADE ON UPDATE CASADE );
CREATE OR REPLACE TABLE t(
k INT,
REFERENCES User(id) ON DELETE CASADE ON UPDATE CASADE
);
CREATE OR REPLACE TABLE t( k INT, REFERENCES User(id) ON DELETE CASADE ON UPDATE CASADE );
CREATE OR REPLACE TABLE t(
k INT,
REFERENCES User(id)
ON DELETE NO ACTION
ON UPDATE NO ACTION
);
CREATE OR REPLACE TABLE t( k INT, REFERENCES User(id) ON DELETE NO ACTION ON UPDATE NO ACTION );
CREATE OR REPLACE TABLE t(
k INT,
REFERENCES User(id)
ON DELETE NO ACTION
ON UPDATE NO ACTION
)engine=InnoDB;
CREATE OR REPLACE TABLE t( k INT, REFERENCES User(id) ON DELETE NO ACTION ON UPDATE NO ACTION )engine=InnoDB;
CREATE OR REPLACE TABLE t( k INT, REFERENCES User(id) ON DELETE NO ACTION ON UPDATE NO ACTION ) engine=InnoDB;
CREATE OR REPLACE TABLE t(
k INT,
REFERENCES User(id)
ON DELETE NO ACTION
ON UPDATE NO ACTION
) ENGINE=InnoDB;
CREATE OR REPLACE TABLE t( k INT, REFERENCES User(id) ON DELETE NO ACTION ON UPDATE NO ACTION ) ENGINE=InnoDB;
CREATE OR REPLACE TABLE t(
k INT,
REFERENCES User(id) ON DELETE NO ACTION
) ENGINE=InnoDB;
CREATE OR REPLACE TABLE t( k INT, REFERENCES User(id) ON DELETE NO ACTION ) ENGINE=InnoDB;
CREATE OR REPLACE TABLE t(
k INT,
CONTRAINT fk_k REFERENCES User(id) ON DELETE NO ACTION
) ENGINE=InnoDB;
CREATE OR REPLACE TABLE t( k INT, CONTRAINT fk_k REFERENCES User(id) ON DELETE NO ACTION ) ENGINE=InnoDB;
CREATE OR REPLACE TABLE t(
k INT,
CONSTRAINT fk_k REFERENCES User(id) ON DELETE NO ACTION
) ENGINE=InnoDB;
CREATE OR REPLACE TABLE t( k INT, CONSTRAINT fk_k REFERENCES User(id) ON DELETE NO ACTION ) ENGINE=InnoDB;
CREATE OR REPLACE TABLE t(
k INT,
CONSTRAINT fk_k REFERENCES User(id)
) ENGINE=InnoDB;
CREATE OR REPLACE TABLE t( k INT, CONSTRAINT fk_k REFERENCES User(id) ) ENGINE=InnoDB;
create table student (                                                                                                                           
pid smallint,
foreign key(pid) references province(id) on delete cascade
);
create table student (                                                                                                                            pid smallint, foreign key(pid) references province(id) on delete cascade );
create table student (                                                                                                                           
pid smallint,
foreign key(pid) references User(id) on delete cascade
);
create table student (                                                                                                                            pid smallint, foreign key(pid) references User(id) on delete cascade );
create table student (                                                                                                                           
pid INTEGER,
foreign key(pid) references User(id) on delete cascade
);
create table student (                                                                                                                            pid INTEGER, foreign key(pid) references User(id) on delete cascade );
CREATE OR REPLACE TABLE t(
k INTEGER,
FOREIGN KEY(k) REFERENCES User(id)
) ENGINE=InnoDB;
CREATE OR REPLACE TABLE t( k INTEGER, FOREIGN KEY(k) REFERENCES User(id) ) ENGINE=InnoDB;
desc t;
CREATE OR REPLACE TABLE t(
k INTEGER,
FOREIGN KEY(k) REFERENCES User(id)
ON DELETE CASCADE
ON UPDATE CASCADE
) ENGINE=InnoDB;
CREATE OR REPLACE TABLE t( k INTEGER, FOREIGN KEY(k) REFERENCES User(id) ON DELETE CASCADE ON UPDATE CASCADE ) ENGINE=InnoDB;
CREATE OR REPLACE TABLE t(
k INTEGER,
FOREIGN KEY(k) REFERENCES User(id)
ON DELETE CASCADE
ON UPDATE CASCADE,
ksd INTEGER,
) ENGINE=InnoDB;
CREATE OR REPLACE TABLE t( k INTEGER, FOREIGN KEY(k) REFERENCES User(id) ON DELETE CASCADE ON UPDATE CASCADE, ksd INTEGER, ) ENGINE=InnoDB;
CREATE OR REPLACE TABLE t(
k INTEGER,
FOREIGN KEY(k) REFERENCES User(id)
ON DELETE CASCADE
ON UPDATE CASCADE
) ENGINE=InnoDB;
CREATE OR REPLACE TABLE t( k INTEGER, FOREIGN KEY(k) REFERENCES User(id) ON DELETE CASCADE ON UPDATE CASCADE ) ENGINE=InnoDB;
CREATE OR REPLACE TABLE t(
k INTEGER,
k2 INTEGER,
FOREIGN KEY(k) REFERENCES User(id),
FOREIGN KEY(k2) REFERENCES User(id)
ON DELETE CASCADE
ON UPDATE CASCADE
) ENGINE=InnoDB;
CREATE OR REPLACE TABLE t( k INTEGER, k2 INTEGER, FOREIGN KEY(k) REFERENCES User(id), FOREIGN KEY(k2) REFERENCES User(id) ON DELETE CASCADE ON UPDATE CASCADE ) ENGINE=InnoDB;
desc k2;
desc t;
drop database test;
create database test;
use test;
show tables;
desc TypeTest;
select * from TestType;
select * from TypeTest;
.q
ls
use test;
show databases;
show tables;
select count(*)
drop database test;
create database test;
SELECT COUNT(*) FROM information_schema.TABLES WHERE table_name = 'Filters';
CREATE TABLE IF NOT EXISTS Filters (
id INT PRIMARY KEY AUTO_INCREMENT, 
key INT NULL, 
val DOUBLE NULL, 
create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP) 
ENGINE=InnoDB DEFAULT CHARSET=utf8;
CREATE TABLE IF NOT EXISTS Filters ( id INT PRIMARY KEY AUTO_INCREMENT,  key INT NULL,  val DOUBLE NULL,  create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP)  ENGINE=InnoDB DEFAULT CHARSET=utf8;
use test;
CREATE TABLE IF NOT EXISTS Filters (
id INT PRIMARY KEY AUTO_INCREMENT, 
key INT NULL, 
val DOUBLE NULL, 
create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP) 
ENGINE=InnoDB DEFAULT CHARSET=utf8;
CREATE TABLE IF NOT EXISTS Filters ( id INT PRIMARY KEY AUTO_INCREMENT,  key INT NULL,  val DOUBLE NULL,  create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP)  ENGINE=InnoDB DEFAULT CHARSET=utf8;
CREATE TABLE IF NOT EXISTS Filters (
id INT PRIMARY KEY AUTO_INCREMENT, 
key INT NULL, 
val DOUBLE NULL, 
create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP) 
ENGINE=InnoDB DEFAULT CHARSET=utf8;
CREATE TABLE IF NOT EXISTS Filters ( id INT PRIMARY KEY AUTO_INCREMENT,  key INT NULL,  val DOUBLE NULL,  create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP)  ENGINE=InnoDB DEFAULT CHARSET=utf8;
CREATE TABLE IF NOT EXISTS Filters (
id INT PRIMARY KEY AUTO_INCREMENT, 
key INT NULL, 
val DOUBLE NULL, 
create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP, 
update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP) 
ENGINE=InnoDB DEFAULT CHARSET=utf8;
CREATE TABLE IF NOT EXISTS Filters ( id INT PRIMARY KEY AUTO_INCREMENT,  key INT NULL,  val DOUBLE NULL,  create_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  update_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP)  ENGINE=InnoDB DEFAULT CHARSET=utf8;
drop table Filters
;
show tables;
create table j(v int);
drop table User;
drop table Message;
drop table User;
drop database test;
create database test;
use test;
show tables;
drop database test;
create database test;
quit.
;
use test;
show tables;
desc Filters;
desc Message;
desc Types;
desc User;
desc ModelizeMe;
show create table ModelizeMe;
show create table ModelizeMe\G
show create table Message\G
show create table User\G
drop database test;
create database test;
use test;
select count(*) from CachedModel;
SELECT COUNT(*) FROM information_schema.TABLES;
SELECT COUNT(*) FROM information_schema.TABLES where
table_name = "test";
SELECT COUNT(*) FROM information_schema.TABLES where table_name = "test";
show databases;
use test;
show tables;;
SELECT COUNT(*) FROM information_schema.TABLES where table_name = 'Types';
SELECT * FROM information_schema.TABLES where table_name = 'Types';
SELECT * FROM information_schema.TABLES where table_name = 'Types'\G
SELECT * FROM information_schema.COLUMNS where table_name = 'Types'\G
SELECT * FROM information_schema.COLUMNS where table_name = 'Types';
desc information_schema.COLUMNS;
drop table test.Player;
drop database test;
create database test;
drop database test;
create database test;
show tables;
show databases;
select ;
use mysql
show tables;
use test;
show tables;
use test;cd;
use mysql
show databases;
show tables
;
desc servers;
select * from servers;
select * from plugin;
select * from proc;
select * from proc\g
select * from proc\G
show tables;
select * from host;
select * from db;
select * from help_keyword;
show tables;
select * from event;
select * from Dual;
select + from Dual;
select 1 from Dual;
select 1+6.5 from Dual;
select 1+6.5 from Dual where 0==5;
select 1+6.5 from Dual;
select Sysdate from Dual;
select sysdate from Dual;
select sysdate() from Dual;
select date() from Dual;
use test;
show tables;
create table T(id int, val float);
alter table T add index on
val;
alter table T add index on val;
create index on T.val;
create index on T(val) desc;
create index idx_val on T(val) desc;
create index idx_val on T(val);
create index idx_val on T(val desc);
create index idx_val2 on T(val desc);
show warnings 
;
create index idx_val3 on T(val desc);
show warnings 
;
create index idx_val3 on T(val asc);
create index idx_val4 on T(val asc);
show warnings 
;
desc T;
show create table T;
show create table T|G
;
show create table T\G
create table S(id int, val float);
insert into T values(1,5),(2,8),(3,10);
insert into S values(1,7),(2,1),(3,10);
select * from S,T;
select * from S join T;
select * from S join T using id;
select * from S join T using(id);
select * from S left join T using(id);
select * from S right join T using(id);
select * from S right join T on S.id<T.id;
select * from S left join T on S.id<T.id;
select * from S left join T on S.id<=T.id;
select * from S left join T on S.id<>T.id;
select * from S left join T on S.id!=T.id;
select * from S left join T on S.id!=T.id order by T.id;
select * from S left join T on S.id!=T.id order by S.id;
select * from S left join T on S.id!=T.id order by S.id, T.id;
use test;
select * from S where exists(select * from T where S.val==T.val);
select * from S where exists(1);
select * from S where exists 1==1;
select * from S where  1==1;
select * from S ;
select * from S where 1==1;
select * from S where S.id==1;
select * from S where S.id == 1;
select * from S where id == 1;
select * from S where id = 1;
select * from S where exists(select * from T where S.val=T.val);
select * from S where exists(select * from T where S.val!=T.val);
select * from S where exists(select * from T where S.id=T.id);
explain select * from S where exists(select * from T where S.id=T.id);
explain select * from S where exists(select * from T where S.id!=T.id);
select * from S where exists(select * from T where S.id!=T.id);
select * from S where exists(select * from T where S.id=T.id);
select * from S where id in (select * from T where S.id=T.id);
select * from S where id in (select id from T where S.id=T.id);
select * from S where id in (select id from T);
explain select * from S where id in (select id from T where S.id=T.id);
explain select * from S where id in (select id from T);
select * from S where exists(select * from T where S.id=T.id);
explain select * from S where exists(select * from T where S.id=T.id);
truncate table T;
truncate table S;
declare
@cnt;
declare @cnt;
declare cnt;
declare cnt as integer;
declare @@cnt as integer;
declare @cnt as integer;
declare cnt as integer;
while (select count(*) from T) < 100000 do
insert into T values(rand(),rand())
;
while (select count(*) from T) < 100000 do insert into T values(rand(),rand());
rand();
select rand() from dua;
select rand() from dual;
select int(rand()) from dual;
select cast(rand()) from dual;
select cast(rand() as integer) from dual;
select cast(rand()*100 as integer) from dual;
alter table T 
modify column id int auto_increment
;
alter table T  modify column id int auto_increment;
alter table T  modify column id int primary key auto_increment;
alter table S  modify column id int primary key auto_increment;
desc T;
desc S;
begin;
commit;
begin; commit;
set
;
set $delimiter $$;
set @delimiter $$;
set @delimiter=$$;
set @@delimiter=$$;
select @delimiter from dual;
select @@delimiter from dual;
select delimiter from dual;
delimiter 
delimiter %%
begin;
while (select count(*) from S)<10000
insert into S(val) values(rand()*10000);
commitl
;
%%
begin; while (select count(*) from S)<10000 insert into S(val) values(rand()*10000); commitl ; ; ; ;%%
begin; while (select count(*) from S)<10000 insert into S(val) values(rand()*10000); commit;%%
begin; while (select count(*) from S)<10000 do insert into S(val) values(rand()*10000); commit;%%
begin; while ((select count(*) from S)<10000) do insert into S(val) values(rand()*10000); commit;%%
begin; while ((select count(*) from S)<10000) insert into S(val) values(rand()*10000); commit;%%
begin; while ((select count(*) from S)<10000) insert into S(val) values(rand()*10000) end while; commit;%%
begin; while ((select count(*) from S)<10000) do insert into S(val) values(rand()*10000) end while; commit;%%
begin; while ((select count(*) from S)<10000) do insert into S(val) values(rand()*10000); end while; commit;%%
begin; while ((select count(*) from S)<10000) do insert into S(val) values(rand()*10000); end while commit;%%
begin; while (select count(*) from S)<10000 do insert into S(val) values(rand()*10000); end while; commit;%%
begin; declare cnt int; set cnt=0;while cnt<10000 do insert into S(val) values(rand()*10000); cnt=cnt+1; end while; commit;%%
begin tran; declare cnt int; set cnt=0;while cnt<10000 do insert into S(val) values(rand()*10000); cnt=cnt+1; end while; commit;%%
create procedure wk() begin; declare cnt int; set cnt=0;while cnt<10000 do insert into S(val) values(rand()*10000); cnt=cnt+1; end while; commit;end;%%
create procedure wk() begin declare cnt int; set cnt=0;while cnt<10000 do insert into S(val) values(rand()*10000); cnt=cnt+1; end while; commit;end;%%
create procedure wk() begin declare cnt int; set cnt=0;while cnt<10000 do insert into S(val) values(rand()*10000); set cnt=cnt+1; end while; commit;end;%%
call wk;
%%
select * from S;
use test;
select count(*) from S;
truncate table S;
truncate table T;
drop procedure wk;
delimiter $$
declare cnt int
$$
delimiter ;
declare cnt int;
start
;
start;
start; tran
use test;
start tran;
start transaction
;
commit;
delimiter $$
start transaction;
while (select count(*) from S)<10000 do insert into S(val) values(rand()*1000); end while;
commit;
$$
start transaction; while (select count(*) from S)<10000 do insert into S(val) values(rand()*1000); end while; commit;$$
SET autocommit=0;
$$
delimiter ;
while (select count(*) from S)<10000 do insert into S(val) values(rand()*1000) end while;
create procedure wk() begin while (select count(*) from S)<10000 do insert into S(val) values(rand()*1000) end while;
create procedure wk() begin while (select count(*) from S)<10000 do insert into S(val) values(rand()*1000) end while; end;
create procedure wk() begin while (select count(*) from S)<10000 do insert into S(val) values(rand()*1000); end while; end;
create procedure wk() begin; while (select count(*) from S)<10000 do insert into S(val) values(rand()*1000); end while; end;
create procedure wk() begin while (select count(*) from S)<10000 do insert into S(val) values(rand()*1000); end while; end;
create procedure wk() begin while (select count(*) from S)<10000 do insert into S(val) values(rand()*1000); end while; end; commit;
call wk;
create procedure wk() begin declare cnt int; set cnt=0;while cnt<10000 do insert into S(val) values(rand()*10000); cnt=cnt+1; end while; commit;end;%
create procedure wk() begin declare cnt int; set cnt=0;while cnt<10000 do insert into S(val) values(rand()*10000); cnt=cnt+1; end while; commit;end;
% create procedure wk() begin declare cnt int;
create procedure wk() begin declare cnt int; set cnt=0;while cnt<10000 do insert into S(val) values(rand()*10000); set cnt=cnt+1; end while; commit;end;
create procedure wk() begin declare cnt int; set cnt=0;while cnt<10000 do insert into S(val) values(rand()*10000); set cnt=cnt+1; end while; end;
create procedure wk() begin declare cnt int; set cnt=0;while cnt<10000 do insert into S(val) values(rand()*10000); set cnt=cnt+1; end while end;
create procedure wk() begin declare cnt int; set cnt=0;while cnt<10000 do insert into S(val) values(rand()*10000); set cnt=cnt+1; end while; end;
delimiter $$
create procedure wk() begin declare cnt int; set cnt=0;while cnt<10000 do insert into S(val) values(rand()*10000); set cnt=cnt+1; end while; end;
$$
delimiter ;
call wk;
select count(*) from T;
select count(*) from S;
create procedure wkt() begin declare cnt int; set cnt=0;while cnt<10000 do insert into T(val) values(rand()*10000); set cnt=cnt+1; end while; end;
delimiter $$
create procedure wkt() begin declare cnt int; set cnt=0;while cnt<10000 do insert into T(val) values(rand()*10000); set cnt=cnt+1; end while; end;
$$
delimiter ;
call wkt;
drop procdure wk;
drop procedure wk;
drop procedure wkt;
select count(*) from S;
select count(*) from T;
select * from S limit 5;
alter table S modeify column val int;
alter table S modify column val int;
alter table T modify column val int;
select * from S limit 5;
select * from T limit 5;
select * from T limit 5 oder by id;
select * from T oder by id; limit 5;
select * from T order by id; limit 5;
use test;
select * from T oder by id limit 5;
select * from T order by id limit 5;
select * from S order by id limit 5;
select * from S limit 5;
select * from T limit 5;
create index idx_val on T(id);
create index idx_val55 on T(id);
select * from T limit 5;
drop index idx_val55;
drop index idx_val55 on T;
drop index idx_val on T;
drop index idx_val1 on T;
drop index idx_val2 on T;
drop index idx_val3 on T;
drop index idx_val4 on T;
desc T;
desc S;
show create table S;
show create table S\G
show create table T\G
select * from S where exists(select * from T where T.val==S.val)
；
;
select * from S where exists(select * from T where T.val==S.val) ；;
select count(*) from S where exists(select * from T where T.val==S.val) ;
select count(*) from S where exists(select * from T where T.val=S.val);
select unique count(*) from S where exists(select * from T where T.val=S.val);
select distinct count(*) from S where exists(select * from T where T.val=S.val);
select distinct count(*) from S join T using id where exists(select * from T where T.val=S.val);
select distinct count(*) from S join T using (id) where exists(select * from T where T.val=S.val);
select distinct count(*) from S join T using (id);
select distinct count(*) from S join T using (val);
select count(*) from S join T using (val);
explain select count(*) from S join T using (val);
explain select count(*) from S join T using (id);
creat index idx on T(val);
creat index idx_t_val on T(val);
create index idx_t_val on T(val);
explain select count(*) from S join T using (val);
explain select count(*) from S join T using (id);
select count(*) from S join T using (val);
drop index idx_t_val
;
drop index idx_t_val on T;
select count(*) from S join T using (val);
explain select count(*) from S join T using (val);
create index idx_t_val on T(val);
select count(*) from S join T using (val);
explain select count(*) from S join T using (val);
create table P(id int, val int);
insert into P values(1,3), (2,2),(3,1)；
;
insert into P values(1,3), (2,2),(3,1);
select * from P p1 where exists(select * from P p2 where p1.id=p2.id);
select * from P p1 where exists(select * from P p2 where p1.id=p2.val);
update P set val=4 where id =3;
select * from P p1 where exists(select * from P p2 where p1.id=p2.val);
select * from P p1 where exists(select * from P p2 where p1.id=p2.id);
select * from P p1 where not exists(select * from P p2 where p1.id=p2.val);
select * from P p1 where id+val=4;
select * from P AS pa where id+val=4;
select id , val from P AS pa where id+val=4;
select id ID , val V from P AS pa where id+val=4;
select id ID , val V from P AS pa where id+val!=4;
alter table P rename column id stu;
alter table P rename column id to stu;
alter table P rename id to stu;
alter table P rename column id to stu;
alter table P chaneg column id to stu;
alter table P change column id to stu;
alter table P change id to stu;
alter table P change id  stu;
alter table P change column id  stu;
alter table P change column id  stu int;
alter table P change column val  stu crs;
alter table P change column val crs int;
desc P;
insert into P values(1,1),(1,2),(2,1),(2,2),(3,2),(4,1),(4,2),(4,3);
select * from P;
select * from P order by stu;
select * from P p1 where p1.stu = 1 and not exists(select * from P p2 where p2.crs!=p1.crs);
select * from P p1 where p1.stu = 1 and not exists(select * from P p2 where p2.crs==p1.crs);
select * from P p1 where p1.stu = 1 and not exists(select * from P p2 where p2.crs=p1.crs);
select * from P p1 where not exists(select * from P p2 where p2.stu=1 and p1.crs!=p2.crs);
select * from P p1 where not exists(select * from P p2 where p2.stu=1 and p1.crs=p2.crs);
select * from P p1 where exists(select * from P p2 where p2.stu=1 and p1.crs=p2.crs);
select stu from P p1 where exists(select * from P p2 where p2.stu=1 and p1.crs=p2.crs);
select stu from P p1 where not exists(select * from P p2 where p2.stu=1 and p1.crs=p2.crs);
select stu from P p0 where not in (select stu from P p1 where not exists(select * from P p2 where p2.stu=1 and p1.crs=p2.crs));
select stu from P p0 where stu not in (select stu from P p1 where not exists(select * from P p2 where p2.stu=1 and p1.crs=p2.crs));
select distinct stu from P p0 where stu not in (select stu from P p1 where not exists(select * from P p2 where p2.stu=1 and p1.crs=p2.crs));
explain select distinct stu from P p0 where stu not in (select stu from P p1 where not exists(select * from P p2 where p2.stu=1 and p1.crs=p2.crs));
explain select stu from P p1 where exists(select * from P p2 where p2.stu=1 and p1.crs=p2.crs);
select * from P;
select * from P order by stu;
insert into P values(4,4);
select distinct stu from P p0 where stu not in (select stu from P p1 where not exists(select * from P p2 where p2.stu=1 and p1.crs=p2.crs));
select stu from P p1 where exists(select * from P p2 where p2.stu=1 and p1.crs=p2.crs);
select distinct stu from P p1 where not exists(select * from P p2 where p2.stu=1 and p1.crs=p2.crs);
select distinct stu from P p1 where p1.stu =1 and not exists(select * from P p2 where p1.crs!=p2.crs);
select distinct stu from P p1 where p1.stu =1 and not exists(select * from P p2 where p1.crs==p2.crs);
select distinct stu from P p1 where p1.stu =1 and not exists(select * from P p2 where p1.crs=p2.crs);
select distinct stu from P p1 where not exists(select * from P p2 where p1.stu=1 and p1.crs!=p2.crs);
select distinct stu from P p1 where exists(select * from P p2 where p1.stu=1 and p1.crs!=p2.crs);
select distinct stu from P p1 where exists(select * from P p2 where p1.stu=1 and p1.crs=p2.crs);
select distinct stu from P p1 where p1.stu=1 and exists(select * from P p2 where and p1.crs=p2.crs);
select distinct stu from P p1 where p1.stu=1 and exists(select * from P p2 where p1.crs=p2.crs);
select * from P order by stu;
select distinct stu from P p1 where exists(select * from P p2 where p2.stu=1 and p1.crs!=p2.crs);
select distinct stu from P p1 where exists(select * from P p2 where p2.stu=1 and p1.crdelecs!=p2.crs);
delete from P where stu =2 and crs=2;
select * from P order by stu;
delete from P where stu =1 and crs=3;
delete from P where stu =4 and crs=4;
select * from P order by stu;
update P set crs=1 where stu=3 and crs=4;
select * from P order by stu;
select distinct stu from P p1 where not exists (select * from P p2 where p2.stu=1 and p2.crs!=p1.crs);
select distinct stu from P p1 where not exists (select * from P p2 where p1.stu=1 and p2.crs!=p1.crs);
select distinct stu from P p1 where p1.stu=1 and not exists (select * from P p2 where p2.crs!=p1.crs);
show databases;
use test;
show tables;
CREATE TABLE IF NOT EXISTS A (
uid INT AUTO_INCREMENT PRIMARY KEY,
usernumber TEXT NOT NULL,
username TEXT NOT NULL,
gender TINYINT DEFAULT 0,
phonenumber CHAR(11) NOT NULL,
address TEXT NOT NULL,
node text NOT NULL,
money DOUBLE DEFAULT 0.0
) Engine=MyISAM CHARSET=utf8;
CREATE TABLE IF NOT EXISTS A ( uid INT AUTO_INCREMENT PRIMARY KEY, usernumber TEXT NOT NULL, username TEXT NOT NULL, gender TINYINT DEFAULT 0, phonenumber CHAR(11) NOT NULL, address TEXT NOT NULL, node text NOT NULL, money DOUBLE DEFAULT 0.0 ) Engine=MyISAM CHARSET=utf8;
use test;
select * from A;
desc A;
use test;
show engines;
show engine
;
show engine A;
show create table A;
drop table A();
drop table A;
show tables;
select * from userinfotable;
UPDATE userinfotable WHERE uid = 20 SET usernumber = 'NewNumber', username = 'NewName', gender = 0, phonenumber = '110', address = 'new Addr', node = 'still', money = 2333;
select * from userinfotable;
truncate table userinfotable;
select * from userinfotable;
truncate table userinfotable;
select * from userinfotable;
truncate table userinfotable;
select * from userinfotable;
truncate table userinfotable;
select * from userinfotable;
truncate table userinfotable;
select * from userinfotable;
truncate table userinfotable;
truncate table moneyrecordtable;
show databases;
create database koj;
show databases;
use koj;
show tables;
use koj
select * from api_users limit 1;
select * from api_user limit 1;
select * from api_user limit 5,1;
drop databases koj;
drop database koj;
craete database koj;
create database koj;
use koj
show tables;
show database;
show databases;
use koj;
show tables;
drop database koj;
show databases;
se test;
use test;
show tables;
drop table *table
;
drop table '%table'
;
drop table faceinfotable;
drop table moneyrecordtable;
drop table userinfotable;
select * from P;
select * from S;
select * from T;
cls
;
\h
\G
\g
\c
show tables;
show databases;
\q
ls
use test;
ls use test;
use test;
ls
;
select count(*) from S;
explain select count(*) from S;
desc S;
declare int @x=1;
declare int x=1;
declare x int;
declare @x int;
create table X(val int);
insert X value(1),value(2)
;
insert into X value(1),value(2)
;
insert into X values(1), values(2);
insert into X value(1), (2);
desc X;
select count(*) from X;
explain select count(*) from X;
explain select * from X where val=1;
explain select * from X where val=2;
explain select * from X where val=6;
let @x=1;
let x=1;
let x = 1;
let
int 
x;
let int  x;
create index on S.val;
alter table S add index on val;
alter table S add indexes on val;
alter table S add indexes for val;
alter table S add index on val;
alter table X rename to C;;
show tables;
alter table C create index on val;;
alter table C create index on val;
alter table C add index on val;
alter table C add index ;
alter table C add index val;
alter table C add index S(val);
desc C;
alter table C add index C(val);
desc C;
 drop index C(val);
use testl
use test;
show tables;
desc T;
use test;
show tables;
desc T;
select count(*) from T;
use test;
select * from T limit 1;
select * from T limit 3;
select * from T limit 100;
use test;
select * from T limit 3;
select * from T limit 21;
select RAND(100);
select RAND();
select RAND()*100;
select RANDINT();
select RANDINT(10);
select RANDOM(10);
select RANDOM();
use test;
select * from T limit 3;
select * from T limit 5;
use test;
select * from account limit 5;
select * from Account limit 5;
select * from Account where balance < 0;
select * from Account where balance = 0;
q
;
quit;
show databases;
