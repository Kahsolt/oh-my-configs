help
fs
fs ls
fs -ls
fs -head text
help
exit
quit
fs
fs pwd
fs -pwd
fs pwd
fs ls
fs -ls
fs -pwd
help
map
exit
quit
dfs
dfs rm -r out
fs rm -r out
fs -rm -r out
fs -ls
fs -mv ping.data.clean ping
fs -ls
d = load "ping"
A=LOAD 'ping' AS (t0:long, t1:long, t2:long);
A = LOAD 'ping' AS (t0:long, t1:long, t2:long);
A
DUMP A;
A = LOAD 'ping' AS (t0:chararray);
DUMP A;
A = LOAD 'ping' AS (t0:int t1:int t2:int);
A = LOAD 'ping' AS (t0:int, t1:int, t2:int);
DUMP A;
A=5
A = 5
;
fs -ls
A=load "ping" using PigStorage() as (min:int, max:ing, avg:int);
A = load "ping" using PigStorage() as (min:int, max:ing, avg:int);
A=load 'ping' using PigStorage() as (min:int, max:ing, avg:int);
A = load 'ping' using PigStorage() as (min:int, max:ing, avg:int);
A = load 'ping' using PigStorage() as (min:int, max:int, avg:int);
B =GROUP A BY avg;
\\i
\i
help
describe A;
describe A::min;
describe A:min;
DESCRIBE A;
help
DUMP B;
fs -ls
DUMP A;
fs -ls
A = load 'ping' as (min:int, max:int, avg:int);
B = GROUP A BY avg;
DUMP B;
DUMP A;
quit
fs -ls;
fs -rm -r out
fs -ls
fs -head ping
fs -df /
fs -du /
a = load 'ping' as (min:int, max:int, avg:int);
dump a;
fs -ls
A = load "text" AS t:chararay;
A = load 'text' AS t:chararray;
DUMP A;
A
DUMP A;
A = load 'text' AS t:chararray;
DUMP A;
quit
A = load 'text' AS t:chararray;
DUMP A;
quit
A = load 'text' AS t:chararray;
DUMP A;
A = load 'text' AS t:chararray;
DUMP A;
t = load 'text' AS t:chararray;
quit
t = load 'text' AS t:chararray;
DUMP t;
fs -rm *
fs -formaet
fs -format
quit
fs -put **
fs -put *
fs -put grade
t = load 'text' AS t:chararray;
DUMP t;
quit
t = load 'text' AS t:chararray;
quit
t = load 'text' AS t:chararray;
dump tl
t = load 'text' AS t:chararray;
dump t;
quit
t = load 'text' AS t:chararray;
fs -ls 
t = load 'grade' AS (name:chararray, grade:int);
dump t;
fd -ls 
fs -ls 
fs -cat text
t = load 'grade' AS name:chararray, grade:int;
t = load 'grades' AS (name:chararray, grade:int);
dump t;
t = load 'grades' USING PigStorage(' ') AS (name:chararray, grade:int);
dump t;
c = FOREACH t GENERATE AVG($2);
c = FOREACH t GENERATE AVG($1);
c = FOREACH t GENERATE AVG(*);
c = FOREACH t GENERATE COUNT (*);
c = FOREACH t GENERATE COUNT(*);
c = FOREACH t GENERATE AVG(t.grade);
g = FILTER t BY grade > 60;
c = FOREACH g GENERATE COUNT($1);
c = FOREACH g GENERATE COUNT($0);
DESCRIBE t;
DESCRIBE g;
DESCRIBE c;
dump g;
c = FOREACH g GENERATE COUNT(g.grage);
c = FOREACH g GENERATE COUNT(g.grade);
c = FOREACH g GENERATE COUNT((int)g.grade);
c = FOREACH g GENERATE AVG((int)g.grade);
c = FOREACH g GENERATE AVG(g.grade);
desc t;
describe  t;
;
describe  g;
c = GENERATE AVG(g.grade);
x = FOREACH g GENERATE CONCAT(name, grade);
x = FOREACH g GENERATE CONCAT(name, (chararray)grade);
x = FOREACH g GENERATE CONCAT((chararray)name, (chararray)grade);
dump x;
x = FOREACH g GENERATE COUNT(grade);
x = FOREACH g GENERATE COUNT((int)grade);
x = FOREACH g GENERATE COUNT((long)grade);
x = FOREACH g GENERATE AVG((long)grade);
x = FOREACH g GENERATE AVG ((int)grade);
x = FOREACH g GENERATE grade+5;
x = FOREACH g GENERATE (g.grade);
x = FOREACH g GENERATE COUNT (g.grade);
xg = GROUP g ALL;
r = FOREACH xg GENERATE COUNT(*);
r = FOREACH xg GENERATE COUNT(xg.grade);
desc xg;
describe  xg;
r = FOREACH xg GENERATE COUNT(g.grade);
dump r;
r = FOREACH xg GENERATE AVG(g.grade);
dump r;
